atlassian.atlascode: '{"rulingPid":117694,"pmfStats":{"lastSurveyed":"2021-11-02","snoozeUntil":"2022-05-02[1651520719770]21:45:19+02:00","activityByDay":{}},"atlascodeVersion":"3.0.10","configurationTarget":"user","bitbucketSites":[{"avatarUrl":"","baseApiUrl":"https://api.bitbucket.org/2.0","baseLinkUrl":"https://bitbucket.org","host":"bitbucket.org","id":"bbcloud","name":"Bitbucket
  Cloud","product":{"name":"Bitbucket","key":"bitbucket"},"isCloud":true,"userId":"557058:7e6ed326-918f-4907-8f32-0b137b1ed582","credentialId":"b45767223a47f4ce0312a4762ce04267"}]}'
Fudge.auto-using: '{"commonwords":[{"label":"ServerCertificateSelectionCallback","namespace":"System.Net.Security"}]}'
geequlim.godot-tools: '{"previousVersion":"2.0.0"}'
GitHub.vscode-pull-request-github: '{"VSCode.ABExp.FeatureData":{"features":["account-aa","config.editor.experimental.asyncTokenization","copilotchat.renameSuggestionsDelayBeforeFetchcf","livesharecontinuousaacf","mindaroBinariesVersion","portForwardingServiceEnabled-development","portForwardingServiceEnabled-production","portForwardingServiceEnabled-staging","shouldUseGrpcService"],"assignmentContext":"vsliv368cf:30146710;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593:30376534;c4g48928:30535728;asynctok:30898717;da93g388:31013173;","configs":[{"Id":"vscode","Parameters":{"account-aa":true,"config.editor.experimental.asyncTokenization":true,"copilotchat.renameSuggestionsDelayBeforeFetch":0,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true}}]},"github.pullRequest.repos":{"repos":{}},"github.pullRequest.pullNotification.show":false,"rateCounterLastWindow":1681322787796,"rateCounterCount":85,"githubPullRequest.lastUsedScopes":["read:user","user:email","repo","workflow"],"githubPullRequest.lastUsedScopesEnterprise":["read:user","user:email","repo","workflow"],"prompt
  for sign in:login":false}'
mongodb.mongodb-vscode: '{"GLOBAL_ANONYMOUS_ID":"8bf4f0d2-0a03-462b-a2d7-23f4ad428785","GLOBAL_HAS_BEEN_SHOWN_INITIAL_VIEW":true,"GLOBAL_SAVED_CONNECTIONS":{}}'
ms-azuretools.vscode-docker: '{"VSCode.ABExp.FeatureData":{"features":["account-aa","config.editor.experimental.asyncTokenization","copilotchat.renameSuggestionsDelayBeforeFetchcf","livesharecontinuousaacf","mindaroBinariesVersion","portForwardingServiceEnabled-development","portForwardingServiceEnabled-production","portForwardingServiceEnabled-staging","shouldUseGrpcService","vscode-docker.aatest"],"assignmentContext":"vsliv368cf:30146710;vscode-docker_aaflight:30153983;vspor879:30202332;vspor708:30202333;vspor363:30204092;binariesv615:30325510;vsaa593:30376534;c4g48928:30535728;asynctok:30898717;da93g388:31013173;","configs":[{"Id":"vscode","Parameters":{"account-aa":true,"config.editor.experimental.asyncTokenization":true,"copilotchat.renameSuggestionsDelayBeforeFetch":0,"livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"shouldUseGrpcService":true,"vscode-docker.aatest":true}}]},"vscode-docker.activity.overall":{"lastSession":1720424196152,"currentMonthSessions":1,"totalSessions":65},"vscode-docker.activity.overallnoedit":{"lastSession":1720424195969,"currentMonthSessions":1,"totalSessions":27},"vscode-docker.container.newContainerUser":false,"isRegistryMigrated":true}'
ms-dotnettools.vscode-dotnet-runtime: "{\"releases\":\"{\\r\\n    \\\"$schema\\\
  \":
  \\\"https://json.schemastore.org/dotnet-releases-index.json\\\",\\r\\n    \\\
  \"releases-index\\\": [\\r\\n      {\\r\\n            \\\"channel-version\\\":
  \\\"8.0\\\",\\r\\n            \\\"latest-release\\\":
  \\\"8.0.0-preview.7\\\",\\r\\n            \\\"latest-release-date\\\":
  \\\"2023-08-08\\\",\\r\\n            \\\"security\\\":
  false,\\r\\n            \\\"latest-runtime\\\":
  \\\"8.0.0-preview.7.23375.6\\\",\\r\\n            \\\"latest-sdk\\\":
  \\\"8.0.100-preview.7.23376.3\\\",\\r\\n            \\\"product\\\":
  \\\".NET\\\",\\r\\n            \\\"release-type\\\" :
  \\\"lts\\\",\\r\\n            \\\"support-phase\\\":
  \\\"preview\\\",\\r\\n            \\\"eol-date\\\":
  null,\\r\\n            \\\"releases.json\\\":
  \\\"https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/8.0/relea\
  ses.json\\\"\\r\\n        },\\r\\n          {\\r\\n            \\\"channel-ve\
  rsion\\\": \\\"7.0\\\",\\r\\n            \\\"latest-release\\\":
  \\\"7.0.10\\\",\\r\\n            \\\"latest-release-date\\\":
  \\\"2023-08-08\\\",\\r\\n            \\\"security\\\":
  true,\\r\\n            \\\"latest-runtime\\\":
  \\\"7.0.10\\\",\\r\\n            \\\"latest-sdk\\\":
  \\\"7.0.400\\\",\\r\\n            \\\"product\\\":
  \\\".NET\\\",\\r\\n            \\\"release-type\\\" :
  \\\"sts\\\",\\r\\n            \\\"support-phase\\\":
  \\\"active\\\",\\r\\n            \\\"eol-date\\\":
  \\\"2024-05-24\\\",\\r\\n            \\\"releases.json\\\":
  \\\"https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/7.0/relea\
  ses.json\\\"\\r\\n        },\\r\\n        {\\r\\n            \\\"channel-vers\
  ion\\\": \\\"6.0\\\",\\r\\n            \\\"latest-release\\\":
  \\\"6.0.21\\\",\\r\\n            \\\"latest-release-date\\\":
  \\\"2023-08-08\\\",\\r\\n            \\\"security\\\":
  true,\\r\\n            \\\"latest-runtime\\\":
  \\\"6.0.21\\\",\\r\\n            \\\"latest-sdk\\\":
  \\\"6.0.413\\\",\\r\\n            \\\"product\\\":
  \\\".NET\\\",\\r\\n            \\\"release-type\\\" :
  \\\"lts\\\",\\r\\n            \\\"support-phase\\\":
  \\\"active\\\",\\r\\n            \\\"eol-date\\\":
  \\\"2024-11-12\\\",\\r\\n            \\\"releases.json\\\":
  \\\"https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/6.0/relea\
  ses.json\\\"\\r\\n        },\\r\\n        {\\r\\n            \\\"channel-vers\
  ion\\\": \\\"5.0\\\",\\r\\n            \\\"latest-release\\\":
  \\\"5.0.17\\\",\\r\\n            \\\"latest-release-date\\\":
  \\\"2022-05-10\\\",\\r\\n            \\\"security\\\":
  true,\\r\\n            \\\"latest-runtime\\\":
  \\\"5.0.17\\\",\\r\\n            \\\"latest-sdk\\\":
  \\\"5.0.408\\\",\\r\\n            \\\"product\\\":
  \\\".NET\\\",\\r\\n            \\\"release-type\\\" :
  \\\"sts\\\",\\r\\n            \\\"support-phase\\\":
  \\\"eol\\\",\\r\\n            \\\"eol-date\\\":\\\"2022-05-10\\\",\\r\\n            \
  \\\"releases.json\\\":
  \\\"https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/5.0/relea\
  ses.json\\\"\\r\\n        },\\r\\n        {\\r\\n            \\\"channel-vers\
  ion\\\": \\\"3.1\\\",\\r\\n            \\\"latest-release\\\":
  \\\"3.1.32\\\",\\r\\n            \\\"latest-release-date\\\":
  \\\"2022-12-13\\\",\\r\\n            \\\"security\\\":
  true,\\r\\n            \\\"latest-runtime\\\":
  \\\"3.1.32\\\",\\r\\n            \\\"latest-sdk\\\":
  \\\"3.1.426\\\",\\r\\n            \\\"product\\\": \\\".NET
  Core\\\",\\r\\n            \\\"release-type\\\" :
  \\\"lts\\\",\\r\\n            \\\"support-phase\\\":
  \\\"eol\\\",\\r\\n            \\\"eol-date\\\":
  \\\"2022-12-13\\\",\\r\\n            \\\"releases.json\\\":
  \\\"https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/3.1/relea\
  ses.json\\\"\\r\\n        },\\r\\n        {\\r\\n            \\\"channel-vers\
  ion\\\": \\\"3.0\\\",\\r\\n            \\\"latest-release\\\":
  \\\"3.0.3\\\",\\r\\n            \\\"latest-release-date\\\":
  \\\"2020-02-18\\\",\\r\\n            \\\"security\\\":
  false,\\r\\n            \\\"latest-runtime\\\":
  \\\"3.0.3\\\",\\r\\n            \\\"latest-sdk\\\":
  \\\"3.0.103\\\",\\r\\n            \\\"product\\\": \\\".NET
  Core\\\",\\r\\n            \\\"release-type\\\" :
  \\\"sts\\\",\\r\\n            \\\"support-phase\\\":
  \\\"eol\\\",\\r\\n            \\\"eol-date\\\":
  \\\"2020-03-03\\\",\\r\\n            \\\"releases.json\\\":
  \\\"https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/3.0/relea\
  ses.json\\\"\\r\\n        },\\r\\n        {\\r\\n            \\\"channel-vers\
  ion\\\": \\\"2.1\\\",\\r\\n            \\\"latest-release\\\":
  \\\"2.1.30\\\",\\r\\n            \\\"latest-release-date\\\":
  \\\"2021-08-19\\\",\\r\\n            \\\"security\\\":
  true,\\r\\n            \\\"latest-runtime\\\":
  \\\"2.1.30\\\",\\r\\n            \\\"latest-sdk\\\":
  \\\"2.1.818\\\",\\r\\n            \\\"product\\\": \\\".NET
  Core\\\",\\r\\n            \\\"release-type\\\" :
  \\\"lts\\\",\\r\\n            \\\"support-phase\\\":
  \\\"eol\\\",\\r\\n            \\\"eol-date\\\":
  \\\"2021-08-21\\\",\\r\\n            \\\"releases.json\\\":
  \\\"https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/2.1/relea\
  ses.json\\\"\\r\\n        },\\r\\n        {\\r\\n            \\\"channel-vers\
  ion\\\": \\\"2.2\\\",\\r\\n            \\\"latest-release\\\":
  \\\"2.2.8\\\",\\r\\n            \\\"latest-release-date\\\":
  \\\"2019-11-19\\\",\\r\\n            \\\"security\\\":
  true,\\r\\n            \\\"latest-runtime\\\":
  \\\"2.2.8\\\",\\r\\n            \\\"latest-sdk\\\":
  \\\"2.2.207\\\",\\r\\n            \\\"product\\\": \\\".NET
  Core\\\",\\r\\n            \\\"release-type\\\" :
  \\\"sts\\\",\\r\\n            \\\"support-phase\\\":
  \\\"eol\\\",\\r\\n            \\\"eol-date\\\":
  \\\"2019-12-23\\\",\\r\\n            \\\"releases.json\\\":
  \\\"https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/2.2/relea\
  ses.json\\\"\\r\\n          },\\r\\n        {\\r\\n            \\\"channel-ve\
  rsion\\\": \\\"2.0\\\",\\r\\n            \\\"latest-release\\\":
  \\\"2.0.9\\\",\\r\\n            \\\"latest-release-date\\\":\\\"2018-07-10\\\
  \",\\r\\n            \\\"security\\\":
  true,\\r\\n            \\\"latest-runtime\\\":
  \\\"2.0.9\\\",\\r\\n            \\\"latest-sdk\\\":
  \\\"2.1.202\\\",\\r\\n            \\\"product\\\": \\\".NET
  Core\\\",\\r\\n            \\\"release-type\\\" :
  \\\"sts\\\",\\r\\n            \\\"support-phase\\\":
  \\\"eol\\\",\\r\\n            \\\"eol-date\\\":
  \\\"2018-10-01\\\",\\r\\n            \\\"releases.json\\\":
  \\\"https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/2.0/relea\
  ses.json\\\"\\r\\n        },\\r\\n        {\\r\\n            \\\"channel-vers\
  ion\\\": \\\"1.1\\\",\\r\\n            \\\"latest-release\\\":
  \\\"1.1.13\\\",\\r\\n            \\\"latest-release-date\\\":
  \\\"2019-05-14\\\",\\r\\n            \\\"security\\\":
  true,\\r\\n            \\\"latest-runtime\\\":
  \\\"1.1.13\\\",\\r\\n            \\\"latest-sdk\\\":
  \\\"1.1.14\\\",\\r\\n            \\\"product\\\": \\\".NET
  Core\\\",\\r\\n            \\\"release-type\\\" :
  \\\"lts\\\",\\r\\n            \\\"support-phase\\\":
  \\\"eol\\\",\\r\\n            \\\"eol-date\\\":
  \\\"2019-06-27\\\",\\r\\n            \\\"releases.json\\\":
  \\\"https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/1.1/relea\
  ses.json\\\"\\r\\n        },\\r\\n        {\\r\\n            \\\"channel-vers\
  ion\\\": \\\"1.0\\\",\\r\\n            \\\"latest-release\\\":
  \\\"1.0.16\\\",\\r\\n            \\\"latest-release-date\\\":
  \\\"2019-05-14\\\",\\r\\n            \\\"security\\\":
  true,\\r\\n            \\\"latest-runtime\\\":
  \\\"1.0.16\\\",\\r\\n            \\\"latest-sdk\\\":
  \\\"1.1.14\\\",\\r\\n            \\\"product\\\": \\\".NET
  Core\\\",\\r\\n            \\\"release-type\\\" :
  \\\"lts\\\",\\r\\n            \\\"support-phase\\\":
  \\\"eol\\\",\\r\\n            \\\"eol-date\\\":
  \\\"2019-06-27\\\",\\r\\n            \\\"releases.json\\\":
  \\\"https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/1.0/relea\
  ses.json\\\"\\r\\n        }\\r\\n    ]\\r\\n}\\r\\n\",\"installing\":[],\"dot\
  net-installsh\":\"#!/usr/bin/env bash\\n# Copyright (c) .NET Foundation and
  contributors. All rights reserved.\\n# Licensed under the MIT license. See
  LICENSE file in the project root for full license information.\\n#\\n\\n# Stop
  script on NZEC\\nset -e\\n# Stop script if unbound variable found (use
  ${var:-} if intentional)\\nset -u\\n# By default cmd1 | cmd2 returns exit code
  of cmd2 regardless of cmd1 success\\n# This is causing it to fail\\nset -o
  pipefail\\n\\n# Use in the the functions: eval
  $invocation\\ninvocation='say_verbose \\\"Calling: ${yellow:-}${FUNCNAME[0]}
  ${green:-}$*${normal:-}\\\"'\\n\\n# standard output may be used as a return
  value in the functions\\n# we need a way to write text on the screen in the
  functions so that\\n# it won't interfere with the return value.\\n# Exposing
  stream 3 as a pipe to standard output of the script itself\\nexec 3>&1\\n\\n#
  Setup some colors to use. These need to work in fairly limited shells, like
  the Ubuntu Docker container where there are only 8 colors.\\n# See if stdout
  is a terminal\\nif [ -t 1 ] && command -v tput > /dev/null; then\\n    # see
  if it supports colors\\n    ncolors=$(tput colors || echo 0)\\n    if [ -n
  \\\"$ncolors\\\" ] && [ $ncolors -ge 8 ]; then\\n        bold=\\\"$(tput
  bold       || echo)\\\"\\n        normal=\\\"$(tput sgr0     ||
  echo)\\\"\\n        black=\\\"$(tput setaf 0   ||
  echo)\\\"\\n        red=\\\"$(tput setaf 1     ||
  echo)\\\"\\n        green=\\\"$(tput setaf 2   ||
  echo)\\\"\\n        yellow=\\\"$(tput setaf 3  ||
  echo)\\\"\\n        blue=\\\"$(tput setaf 4    ||
  echo)\\\"\\n        magenta=\\\"$(tput setaf 5 ||
  echo)\\\"\\n        cyan=\\\"$(tput setaf 6    ||
  echo)\\\"\\n        white=\\\"$(tput setaf 7   ||
  echo)\\\"\\n    fi\\nfi\\n\\nsay_warning() {\\n    printf \\\"%b\\\\n\\\"
  \\\"${yellow:-}dotnet_install: Warning: $1${normal:-}\\\"
  >&3\\n}\\n\\nsay_err() {\\n    printf \\\"%b\\\\n\\\"
  \\\"${red:-}dotnet_install: Error: $1${normal:-}\\\" >&2\\n}\\n\\nsay()
  {\\n    # using stream 3 (defined in the beginning) to not interfere with
  stdout of functions\\n    # which may be used as return value\\n    printf
  \\\"%b\\\\n\\\" \\\"${cyan:-}dotnet-install:${normal:-} $1\\\"
  >&3\\n}\\n\\nsay_verbose() {\\n    if [ \\\"$verbose\\\" = true ];
  then\\n        say \\\"$1\\\"\\n    fi\\n}\\n\\n# This platform list is finite
  - if the SDK/Runtime has supported Linux distribution-specific
  assets,\\n#   then and only then should the Linux distribution appear in this
  list.\\n# Adding a Linux distribution to this list does not imply
  distribution-specific support.\\nget_legacy_os_name_from_platform()
  {\\n    eval $invocation\\n\\n    platform=\\\"$1\\\"\\n    case
  \\\"$platform\\\" in\\n        \\\"centos.7\\\")\\n            echo
  \\\"centos\\\"\\n            return
  0\\n            ;;\\n        \\\"debian.8\\\")\\n            echo
  \\\"debian\\\"\\n            return
  0\\n            ;;\\n        \\\"debian.9\\\")\\n            echo
  \\\"debian.9\\\"\\n            return
  0\\n            ;;\\n        \\\"fedora.23\\\")\\n            echo
  \\\"fedora.23\\\"\\n            return
  0\\n            ;;\\n        \\\"fedora.24\\\")\\n            echo
  \\\"fedora.24\\\"\\n            return
  0\\n            ;;\\n        \\\"fedora.27\\\")\\n            echo
  \\\"fedora.27\\\"\\n            return
  0\\n            ;;\\n        \\\"fedora.28\\\")\\n            echo
  \\\"fedora.28\\\"\\n            return
  0\\n            ;;\\n        \\\"opensuse.13.2\\\")\\n            echo
  \\\"opensuse.13.2\\\"\\n            return
  0\\n            ;;\\n        \\\"opensuse.42.1\\\")\\n            echo
  \\\"opensuse.42.1\\\"\\n            return
  0\\n            ;;\\n        \\\"opensuse.42.3\\\")\\n            echo
  \\\"opensuse.42.3\\\"\\n            return
  0\\n            ;;\\n        \\\"rhel.7\\\"*)\\n            echo
  \\\"rhel\\\"\\n            return
  0\\n            ;;\\n        \\\"ubuntu.14.04\\\")\\n            echo
  \\\"ubuntu\\\"\\n            return
  0\\n            ;;\\n        \\\"ubuntu.16.04\\\")\\n            echo
  \\\"ubuntu.16.04\\\"\\n            return
  0\\n            ;;\\n        \\\"ubuntu.16.10\\\")\\n            echo
  \\\"ubuntu.16.10\\\"\\n            return
  0\\n            ;;\\n        \\\"ubuntu.18.04\\\")\\n            echo
  \\\"ubuntu.18.04\\\"\\n            return
  0\\n            ;;\\n        \\\"alpine.3.4.3\\\")\\n            echo
  \\\"alpine\\\"\\n            return 0\\n            ;;\\n    esac\\n    return
  1\\n}\\n\\nget_legacy_os_name() {\\n    eval $invocation\\n\\n    local
  uname=$(uname)\\n    if [ \\\"$uname\\\" = \\\"Darwin\\\" ];
  then\\n        echo \\\"osx\\\"\\n        return 0\\n    elif [ -n
  \\\"$runtime_id\\\" ]; then\\n        echo $(get_legacy_os_name_from_platform
  \\\"${runtime_id%-*}\\\" || echo \\\"${runtime_id%-*}\\\")\\n        return
  0\\n    else\\n        if [ -e /etc/os-release ]; then\\n            .
  /etc/os-release\\n            os=$(get_legacy_os_name_from_platform
  \\\"$ID${VERSION_ID:+.${VERSION_ID}}\\\" || echo \\\"\\\")\\n            if [
  -n \\\"$os\\\" ]; then\\n                echo
  \\\"$os\\\"\\n                return
  0\\n            fi\\n        fi\\n    fi\\n\\n    say_verbose \\\"Distribution
  specific OS name and version could not be detected: UName =
  $uname\\\"\\n    return 1\\n}\\n\\nget_linux_platform_name() {\\n    eval
  $invocation\\n\\n    if [ -n \\\"$runtime_id\\\" ]; then\\n        echo
  \\\"${runtime_id%-*}\\\"\\n        return 0\\n    else\\n        if [ -e
  /etc/os-release ]; then\\n            . /etc/os-release\\n            echo
  \\\"$ID${VERSION_ID:+.${VERSION_ID}}\\\"\\n            return 0\\n        elif
  [ -e /etc/redhat-release ]; then\\n            local
  redhatRelease=$(</etc/redhat-release)\\n            if [[ $redhatRelease ==
  \\\"CentOS release 6.\\\"* || $redhatRelease == \\\"Red Hat Enterprise Linux
  \\\"*\\\" release 6.\\\"* ]]; then\\n                echo
  \\\"rhel.6\\\"\\n                return
  0\\n            fi\\n        fi\\n    fi\\n\\n    say_verbose \\\"Linux
  specific platform name and version could not be detected: UName =
  $uname\\\"\\n    return 1\\n}\\n\\nis_musl_based_distro() {\\n    (ldd
  --version 2>&1 || true) | grep -q musl\\n}\\n\\nget_current_os_name()
  {\\n    eval $invocation\\n\\n    local uname=$(uname)\\n    if [
  \\\"$uname\\\" = \\\"Darwin\\\" ]; then\\n        echo
  \\\"osx\\\"\\n        return 0\\n    elif [ \\\"$uname\\\" = \\\"FreeBSD\\\"
  ]; then\\n        echo \\\"freebsd\\\"\\n        return 0\\n    elif [
  \\\"$uname\\\" = \\\"Linux\\\" ]; then\\n        local
  linux_platform_name=\\\"\\\"\\n        linux_platform_name=\\\"$(get_linux_pl\
  atform_name)\\\" || true\\n\\n        if [ \\\"$linux_platform_name\\\" =
  \\\"rhel.6\\\" ]; then\\n            echo
  $linux_platform_name\\n            return 0\\n        elif
  is_musl_based_distro; then\\n            echo
  \\\"linux-musl\\\"\\n            return 0\\n        elif [
  \\\"$linux_platform_name\\\" = \\\"linux-musl\\\" ]; then\\n            echo
  \\\"linux-musl\\\"\\n            return 0\\n        else\\n            echo
  \\\"linux\\\"\\n            return 0\\n        fi\\n    fi\\n\\n    say_err
  \\\"OS name could not be detected: UName = $uname\\\"\\n    return
  1\\n}\\n\\nmachine_has() {\\n    eval $invocation\\n\\n    command -v
  \\\"$1\\\" > /dev/null 2>&1\\n    return $?\\n}\\n\\ncheck_min_reqs()
  {\\n    local hasMinimum=false\\n    if machine_has \\\"curl\\\";
  then\\n        hasMinimum=true\\n    elif machine_has \\\"wget\\\";
  then\\n        hasMinimum=true\\n    fi\\n\\n    if [ \\\"$hasMinimum\\\" =
  \\\"false\\\" ]; then\\n        say_err \\\"curl (recommended) or wget are
  required to download dotnet. Install missing prerequisite to
  proceed.\\\"\\n        return 1\\n    fi\\n    return 0\\n}\\n\\n# args:\\n#
  input - $1\\nto_lowercase() {\\n    #eval $invocation\\n\\n    echo \\\"$1\\\"
  | tr '[:upper:]' '[:lower:]'\\n    return 0\\n}\\n\\n# args:\\n# input -
  $1\\nremove_trailing_slash() {\\n    #eval $invocation\\n\\n    local
  input=\\\"${1:-}\\\"\\n    echo \\\"${input%/}\\\"\\n    return 0\\n}\\n\\n#
  args:\\n# input - $1\\nremove_beginning_slash() {\\n    #eval
  $invocation\\n\\n    local input=\\\"${1:-}\\\"\\n    echo
  \\\"${input#/}\\\"\\n    return 0\\n}\\n\\n# args:\\n# root_path - $1\\n#
  child_path - $2 - this parameter can be empty\\ncombine_paths() {\\n    eval
  $invocation\\n\\n    # TODO: Consider making it work with any number of paths.
  For now:\\n    if [ ! -z \\\"${3:-}\\\" ]; then\\n        say_err
  \\\"combine_paths: Function takes two parameters.\\\"\\n        return
  1\\n    fi\\n\\n    local root_path=\\\"$(remove_trailing_slash
  \\\"$1\\\")\\\"\\n    local child_path=\\\"$(remove_beginning_slash
  \\\"${2:-}\\\")\\\"\\n    say_verbose \\\"combine_paths:
  root_path=$root_path\\\"\\n    say_verbose \\\"combine_paths:
  child_path=$child_path\\\"\\n    echo
  \\\"$root_path/$child_path\\\"\\n    return
  0\\n}\\n\\nget_machine_architecture() {\\n    eval $invocation\\n\\n    if
  command -v uname > /dev/null; then\\n        CPUName=$(uname
  -m)\\n        case $CPUName in\\n        armv*l)\\n            echo
  \\\"arm\\\"\\n            return
  0\\n            ;;\\n        aarch64|arm64)\\n            echo
  \\\"arm64\\\"\\n            return
  0\\n            ;;\\n        s390x)\\n            echo
  \\\"s390x\\\"\\n            return
  0\\n            ;;\\n        ppc64le)\\n            echo
  \\\"ppc64le\\\"\\n            return
  0\\n            ;;\\n        esac\\n    fi\\n\\n    # Always default to
  'x64'\\n    echo \\\"x64\\\"\\n    return 0\\n}\\n\\n# args:\\n# architecture
  - $1\\nget_normalized_architecture_from_architecture() {\\n    eval
  $invocation\\n\\n    local architecture=\\\"$(to_lowercase
  \\\"$1\\\")\\\"\\n\\n    if [[ $architecture == \\\\<auto\\\\> ]];
  then\\n        echo \\\"$(get_machine_architecture)\\\"\\n        return
  0\\n    fi\\n\\n    case \\\"$architecture\\\"
  in\\n        amd64|x64)\\n            echo \\\"x64\\\"\\n            return
  0\\n            ;;\\n        arm)\\n            echo
  \\\"arm\\\"\\n            return
  0\\n            ;;\\n        arm64)\\n            echo
  \\\"arm64\\\"\\n            return
  0\\n            ;;\\n        s390x)\\n            echo
  \\\"s390x\\\"\\n            return
  0\\n            ;;\\n        ppc64le)\\n            echo
  \\\"ppc64le\\\"\\n            return
  0\\n            ;;\\n    esac\\n\\n    say_err \\\"Architecture
  \\\\`$architecture\\\\` not supported. If you think this is a bug, report it
  at https://github.com/dotnet/install-scripts/issues\\\"\\n    return
  1\\n}\\n\\n# args:\\n# version - $1\\n# channel - $2\\n# architecture -
  $3\\nget_normalized_architecture_for_specific_sdk_version() {\\n    eval
  $invocation\\n\\n    local is_version_support_arm64=\\\"$(is_arm64_supported
  \\\"$1\\\")\\\"\\n    local is_channel_support_arm64=\\\"$(is_arm64_supported
  \\\"$2\\\")\\\"\\n    local architecture=\\\"$3\\\";\\n    local
  osname=\\\"$(get_current_os_name)\\\"\\n\\n    if [ \\\"$osname\\\" ==
  \\\"osx\\\" ] && [ \\\"$architecture\\\" == \\\"arm64\\\" ] && { [
  \\\"$is_version_support_arm64\\\" = false ] || [
  \\\"$is_channel_support_arm64\\\" = false ]; }; then\\n        #check if
  rosetta is installed\\n        if [ \\\"$(/usr/bin/pgrep oahd >/dev/null
  2>&1;echo $?)\\\" -eq 0 ]; then \\n            say_verbose \\\"Changing user
  architecture from '$architecture' to 'x64' because .NET SDKs prior to version
  6.0 do not support arm64.\\\" \\n            echo
  \\\"x64\\\"\\n            return 0;\\n        else\\n            say_err
  \\\"Architecture \\\\`$architecture\\\\` is not supported for .NET SDK version
  \\\\`$version\\\\`. Please install Rosetta to allow emulation of the
  \\\\`$architecture\\\\` .NET SDK on this platform\\\"\\n            return
  1\\n        fi\\n    fi\\n\\n    echo \\\"$architecture\\\"\\n    return
  0\\n}\\n\\n# args:\\n# version or channel - $1\\nis_arm64_supported()
  {\\n    #any channel or version that starts with the specified
  versions\\n    case \\\"$1\\\" in\\n        ( \\\"1\\\"* | \\\"2\\\"* |
  \\\"3\\\"*  | \\\"4\\\"* | \\\"5\\\"*) \\n            echo
  false\\n            return 0\\n    esac\\n\\n    echo true\\n    return
  0\\n}\\n\\n# args:\\n# user_defined_os - $1\\nget_normalized_os() {\\n    eval
  $invocation\\n\\n    local osname=\\\"$(to_lowercase \\\"$1\\\")\\\"\\n    if
  [ ! -z \\\"$osname\\\" ]; then\\n        case \\\"$osname\\\"
  in\\n            osx | freebsd | rhel.6 | linux-musl |
  linux)\\n                echo \\\"$osname\\\"\\n                return
  0\\n                ;;\\n            *)\\n                say_err
  \\\"'$user_defined_os' is not a supported value for --os option, supported
  values are: osx, linux, linux-musl, freebsd, rhel.6. If you think this is a
  bug, report it at
  https://github.com/dotnet/install-scripts/issues.\\\"\\n                return
  1\\n                ;;\\n        esac\\n    else\\n        osname=\\\"$(get_c\
  urrent_os_name)\\\" || return 1\\n    fi\\n    echo
  \\\"$osname\\\"\\n    return 0\\n}\\n\\n# args:\\n# quality -
  $1\\nget_normalized_quality() {\\n    eval $invocation\\n\\n    local
  quality=\\\"$(to_lowercase \\\"$1\\\")\\\"\\n    if [ ! -z \\\"$quality\\\" ];
  then\\n        case \\\"$quality\\\" in\\n            daily | signed |
  validated | preview)\\n                echo
  \\\"$quality\\\"\\n                return
  0\\n                ;;\\n            ga)\\n                #ga quality is
  available without specifying quality, so normalizing it to
  empty\\n                return
  0\\n                ;;\\n            *)\\n                say_err
  \\\"'$quality' is not a supported value for --quality option. Supported values
  are: daily, signed, validated, preview, ga. If you think this is a bug, report
  it at
  https://github.com/dotnet/install-scripts/issues.\\\"\\n                return
  1\\n                ;;\\n        esac\\n    fi\\n    return 0\\n}\\n\\n#
  args:\\n# channel - $1\\nget_normalized_channel() {\\n    eval
  $invocation\\n\\n    local channel=\\\"$(to_lowercase
  \\\"$1\\\")\\\"\\n\\n    if [[ $channel == current ]];
  then\\n        say_warning 'Value \\\"Current\\\" is deprecated for -Channel
  option. Use \\\"STS\\\" instead.'\\n    fi\\n\\n    if [[ $channel ==
  release/* ]]; then\\n        say_warning 'Using branch name with -Channel
  option is no longer supported with newer releases. Use -Quality option with a
  channel in X.Y format instead.';\\n    fi\\n\\n    if [ ! -z \\\"$channel\\\"
  ]; then\\n        case \\\"$channel\\\"
  in\\n            lts)\\n                echo
  \\\"LTS\\\"\\n                return
  0\\n                ;;\\n            sts)\\n                echo
  \\\"STS\\\"\\n                return
  0\\n                ;;\\n            current)\\n                echo
  \\\"STS\\\"\\n                return
  0\\n                ;;\\n            *)\\n                echo
  \\\"$channel\\\"\\n                return
  0\\n                ;;\\n        esac\\n    fi\\n\\n    return 0\\n}\\n\\n#
  args:\\n# runtime - $1\\nget_normalized_product() {\\n    eval
  $invocation\\n\\n    local product=\\\"\\\"\\n    local
  runtime=\\\"$(to_lowercase \\\"$1\\\")\\\"\\n    if [[ \\\"$runtime\\\" ==
  \\\"dotnet\\\" ]]; then\\n        product=\\\"dotnet-runtime\\\"\\n    elif [[
  \\\"$runtime\\\" == \\\"aspnetcore\\\" ]];
  then\\n        product=\\\"aspnetcore-runtime\\\"\\n    elif [ -z
  \\\"$runtime\\\" ];
  then\\n        product=\\\"dotnet-sdk\\\"\\n    fi\\n    echo
  \\\"$product\\\"\\n    return 0\\n}\\n\\n# The version text returned from the
  feeds is a 1-line or 2-line string:\\n# For the SDK and the dotnet runtime (2
  lines):\\n# Line 1: # commit_hash\\n# Line 2: # 4-part version\\n# For the
  aspnetcore runtime (1 line):\\n# Line 1: # 4-part version\\n\\n# args:\\n#
  version_text - stdin\\nget_version_from_latestversion_file_content()
  {\\n    eval $invocation\\n\\n    cat | tail -n 1 | sed
  's/\\\\r$//'\\n    return 0\\n}\\n\\n# args:\\n# install_root - $1\\n#
  relative_path_to_package - $2\\n# specific_version -
  $3\\nis_dotnet_package_installed() {\\n    eval $invocation\\n\\n    local
  install_root=\\\"$1\\\"\\n    local
  relative_path_to_package=\\\"$2\\\"\\n    local
  specific_version=\\\"${3//[$'\\\\t\\\\r\\\\n']}\\\"\\n\\n    local
  dotnet_package_path=\\\"$(combine_paths \\\"$(combine_paths
  \\\"$install_root\\\" \\\"$relative_path_to_package\\\")\\\"
  \\\"$specific_version\\\")\\\"\\n    say_verbose
  \\\"is_dotnet_package_installed:
  dotnet_package_path=$dotnet_package_path\\\"\\n\\n    if [ -d
  \\\"$dotnet_package_path\\\" ]; then\\n        return
  0\\n    else\\n        return 1\\n    fi\\n}\\n\\n# args:\\n# azure_feed -
  $1\\n# channel - $2\\n# normalized_architecture -
  $3\\nget_version_from_latestversion_file() {\\n    eval
  $invocation\\n\\n    local azure_feed=\\\"$1\\\"\\n    local
  channel=\\\"$2\\\"\\n    local
  normalized_architecture=\\\"$3\\\"\\n\\n    local
  version_file_url=null\\n    if [[ \\\"$runtime\\\" == \\\"dotnet\\\" ]];
  then\\n        version_file_url=\\\"$azure_feed/Runtime/$channel/latest.versi\
  on\\\"\\n    elif [[ \\\"$runtime\\\" == \\\"aspnetcore\\\" ]];
  then\\n        version_file_url=\\\"$azure_feed/aspnetcore/Runtime/$channel/l\
  atest.version\\\"\\n    elif [ -z \\\"$runtime\\\" ];
  then\\n         version_file_url=\\\"$azure_feed/Sdk/$channel/latest.version\\\
  \"\\n    else\\n        say_err \\\"Invalid value for
  \\\\$runtime\\\"\\n        return 1\\n    fi\\n    say_verbose
  \\\"get_version_from_latestversion_file: latest url:
  $version_file_url\\\"\\n\\n    download \\\"$version_file_url\\\" || return
  $?\\n    return 0\\n}\\n\\n# args:\\n# json_file -
  $1\\nparse_globaljson_file_for_version() {\\n    eval
  $invocation\\n\\n    local json_file=\\\"$1\\\"\\n    if [ ! -f
  \\\"$json_file\\\" ]; then\\n        say_err \\\"Unable to find
  \\\\`$json_file\\\\`\\\"\\n        return
  1\\n    fi\\n\\n    sdk_section=$(cat $json_file | tr -d \\\"\\\\r\\\" | awk
  '/\\\"sdk\\\"/,/}/')\\n    if [ -z \\\"$sdk_section\\\" ];
  then\\n        say_err \\\"Unable to parse the SDK node in
  \\\\`$json_file\\\\`\\\"\\n        return 1\\n    fi\\n\\n    sdk_list=$(echo
  $sdk_section | awk -F\\\"[{}]\\\" '{print
  $2}')\\n    sdk_list=${sdk_list//[\\\\\\\"
  ]/}\\n    sdk_list=${sdk_list//,/$'\\\\n'}\\n\\n    local
  version_info=\\\"\\\"\\n    while read -r line; do\\n      IFS=:\\n      while
  read -r key value; do\\n        if [[ \\\"$key\\\" == \\\"version\\\" ]];
  then\\n          version_info=$value\\n        fi\\n      done <<<
  \\\"$line\\\"\\n    done <<< \\\"$sdk_list\\\"\\n    if [ -z
  \\\"$version_info\\\" ]; then\\n        say_err \\\"Unable to find the
  SDK:version node in \\\\`$json_file\\\\`\\\"\\n        return
  1\\n    fi\\n\\n    unset IFS;\\n    echo \\\"$version_info\\\"\\n    return
  0\\n}\\n\\n# args:\\n# azure_feed - $1\\n# channel - $2\\n#
  normalized_architecture - $3\\n# version - $4\\n# json_file -
  $5\\nget_specific_version_from_version() {\\n    eval
  $invocation\\n\\n    local azure_feed=\\\"$1\\\"\\n    local
  channel=\\\"$2\\\"\\n    local normalized_architecture=\\\"$3\\\"\\n    local
  version=\\\"$(to_lowercase \\\"$4\\\")\\\"\\n    local
  json_file=\\\"$5\\\"\\n\\n    if [ -z \\\"$json_file\\\" ]; then\\n        if
  [[ \\\"$version\\\" == \\\"latest\\\" ]]; then\\n            local
  version_info\\n            version_info=\\\"$(get_version_from_latestversion_\
  file \\\"$azure_feed\\\" \\\"$channel\\\" \\\"$normalized_architecture\\\"
  false)\\\" || return 1\\n            say_verbose
  \\\"get_specific_version_from_version:
  version_info=$version_info\\\"\\n            echo \\\"$version_info\\\" |
  get_version_from_latestversion_file_content\\n            return
  0\\n        else\\n            echo \\\"$version\\\"\\n            return
  0\\n        fi\\n    else\\n        local
  version_info\\n        version_info=\\\"$(parse_globaljson_file_for_version
  \\\"$json_file\\\")\\\" || return 1\\n        echo
  \\\"$version_info\\\"\\n        return 0\\n    fi\\n}\\n\\n# args:\\n#
  azure_feed - $1\\n# channel - $2\\n# normalized_architecture - $3\\n#
  specific_version - $4\\n# normalized_os - $5\\nconstruct_download_link()
  {\\n    eval $invocation\\n\\n    local azure_feed=\\\"$1\\\"\\n    local
  channel=\\\"$2\\\"\\n    local normalized_architecture=\\\"$3\\\"\\n    local
  specific_version=\\\"${4//[$'\\\\t\\\\r\\\\n']}\\\"\\n    local
  specific_product_version=\\\"$(get_specific_product_version \\\"$1\\\"
  \\\"$4\\\")\\\"\\n    local osname=\\\"$5\\\"\\n\\n    local
  download_link=null\\n    if [[ \\\"$runtime\\\" == \\\"dotnet\\\" ]];
  then\\n        download_link=\\\"$azure_feed/Runtime/$specific_version/dotnet\
  -runtime-$specific_product_version-$osname-$normalized_architecture.tar.gz\\\"\
  \\n    elif [[ \\\"$runtime\\\" == \\\"aspnetcore\\\" ]];
  then\\n        download_link=\\\"$azure_feed/aspnetcore/Runtime/$specific_ver\
  sion/aspnetcore-runtime-$specific_product_version-$osname-$normalized_archite\
  cture.tar.gz\\\"\\n    elif [ -z \\\"$runtime\\\" ];
  then\\n        download_link=\\\"$azure_feed/Sdk/$specific_version/dotnet-sdk\
  -$specific_product_version-$osname-$normalized_architecture.tar.gz\\\"\\n    \
  else\\n        return 1\\n    fi\\n\\n    echo
  \\\"$download_link\\\"\\n    return 0\\n}\\n\\n# args:\\n# azure_feed - $1\\n#
  specific_version - $2\\n# download link - $3
  (optional)\\nget_specific_product_version() {\\n    # If we find a
  'productVersion.txt' at the root of any folder, we'll use its contents\\n    #
  to resolve the version of what's in the folder, superseding the specified
  version.\\n    # if 'productVersion.txt' is missing but download link is
  already available, product version will be taken from download link\\n    eval
  $invocation\\n\\n    local azure_feed=\\\"$1\\\"\\n    local
  specific_version=\\\"${2//[$'\\\\t\\\\r\\\\n']}\\\"\\n    local
  package_download_link=\\\"\\\"\\n    if [ $# -gt 2  ]; then\\n        local
  package_download_link=\\\"$3\\\"\\n    fi\\n    local
  specific_product_version=null\\n\\n    # Try to get the version number, using
  the productVersion.txt file located next to the installer file.\\n    local
  download_links=($(get_specific_product_version_url \\\"$azure_feed\\\"
  \\\"$specific_version\\\" true
  \\\"$package_download_link\\\")\\n        $(get_specific_product_version_url
  \\\"$azure_feed\\\" \\\"$specific_version\\\" false
  \\\"$package_download_link\\\"))\\n\\n    for download_link in
  \\\"${download_links[@]}\\\"\\n    do\\n        say_verbose \\\"Checking for
  the existence of $download_link\\\"\\n\\n        if machine_has
  \\\"curl\\\"\\n        then\\n            if ! specific_product_version=$(curl
  -s --fail \\\"${download_link}${feed_credential}\\\" 2>&1);
  then\\n                continue\\n            else\\n                echo
  \\\"${specific_product_version//[$'\\\\t\\\\r\\\\n']}\\\"\\n                r\
  eturn 0\\n            fi\\n\\n        elif machine_has
  \\\"wget\\\"\\n        then\\n            specific_product_version=$(wget -qO-
  \\\"${download_link}${feed_credential}\\\" 2>&1)\\n            if [ $? = 0 ];
  then\\n                echo
  \\\"${specific_product_version//[$'\\\\t\\\\r\\\\n']}\\\"\\n                r\
  eturn 0\\n            fi\\n        fi\\n    done\\n    \\n    # Getting the
  version number with productVersion.txt has failed. Try parsing the download
  link for a version number.\\n    say_verbose \\\"Failed to get the version
  using productVersion.txt file. Download link will be parsed
  instead.\\\"\\n    specific_product_version=\\\"$(get_product_specific_versio\
  n_from_download_link \\\"$package_download_link\\\"
  \\\"$specific_version\\\")\\\"\\n    echo
  \\\"${specific_product_version//[$'\\\\t\\\\r\\\\n']}\\\"\\n    return
  0\\n}\\n\\n# args:\\n# azure_feed - $1\\n# specific_version - $2\\n#
  is_flattened - $3\\n# download link - $4
  (optional)\\nget_specific_product_version_url() {\\n    eval
  $invocation\\n\\n    local azure_feed=\\\"$1\\\"\\n    local
  specific_version=\\\"$2\\\"\\n    local is_flattened=\\\"$3\\\"\\n    local
  package_download_link=\\\"\\\"\\n    if [ $# -gt 3  ]; then\\n        local
  package_download_link=\\\"$4\\\"\\n    fi\\n\\n    local
  pvFileName=\\\"productVersion.txt\\\"\\n    if [ \\\"$is_flattened\\\" = true
  ]; then\\n        if [ -z \\\"$runtime\\\" ];
  then\\n            pvFileName=\\\"sdk-productVersion.txt\\\"\\n        elif [[
  \\\"$runtime\\\" == \\\"dotnet\\\" ]];
  then\\n            pvFileName=\\\"runtime-productVersion.txt\\\"\\n        el\
  se\\n            pvFileName=\\\"$runtime-productVersion.txt\\\"\\n        fi\
  \\n    fi\\n\\n    local download_link=null\\n\\n    if [ -z
  \\\"$package_download_link\\\" ]; then\\n        if [[ \\\"$runtime\\\" ==
  \\\"dotnet\\\" ]];
  then\\n            download_link=\\\"$azure_feed/Runtime/$specific_version/${\
  pvFileName}\\\"\\n        elif [[ \\\"$runtime\\\" == \\\"aspnetcore\\\" ]];
  then\\n            download_link=\\\"$azure_feed/aspnetcore/Runtime/$specific\
  _version/${pvFileName}\\\"\\n        elif [ -z \\\"$runtime\\\" ];
  then\\n            download_link=\\\"$azure_feed/Sdk/$specific_version/${pvFi\
  leName}\\\"\\n        else\\n            return
  1\\n        fi\\n    else\\n        download_link=\\\"${package_download_link\
  %/*}/${pvFileName}\\\"\\n    fi\\n\\n    say_verbose \\\"Constructed
  productVersion link: $download_link\\\"\\n    echo
  \\\"$download_link\\\"\\n    return 0\\n}\\n\\n# args:\\n# download link -
  $1\\n# specific version -
  $2\\nget_product_specific_version_from_download_link()\\n{\\n    eval
  $invocation\\n\\n    local download_link=\\\"$1\\\"\\n    local
  specific_version=\\\"$2\\\"\\n    local specific_product_version=\\\"\\\"
  \\n\\n    if [ -z \\\"$download_link\\\" ]; then\\n        echo
  \\\"$specific_version\\\"\\n        return 0\\n    fi\\n\\n    #get
  filename\\n    filename=\\\"${download_link##*/}\\\"\\n\\n    #product
  specific version follows the product name\\n    #for filename
  'dotnet-sdk-3.1.404-linux-x64.tar.gz': the product version is
  3.1.404\\n    IFS='-'\\n    read -ra filename_elems <<<
  \\\"$filename\\\"\\n    count=${#filename_elems[@]}\\n    if [[ \\\"$count\\\"
  -gt 2 ]];
  then\\n        specific_product_version=\\\"${filename_elems[2]}\\\"\\n    el\
  se\\n        specific_product_version=$specific_version\\n    fi\\n    unset
  IFS;\\n    echo \\\"$specific_product_version\\\"\\n    return 0\\n}\\n\\n#
  args:\\n# azure_feed - $1\\n# channel - $2\\n# normalized_architecture -
  $3\\n# specific_version - $4\\nconstruct_legacy_download_link() {\\n    eval
  $invocation\\n\\n    local azure_feed=\\\"$1\\\"\\n    local
  channel=\\\"$2\\\"\\n    local normalized_architecture=\\\"$3\\\"\\n    local
  specific_version=\\\"${4//[$'\\\\t\\\\r\\\\n']}\\\"\\n\\n    local
  distro_specific_osname\\n    distro_specific_osname=\\\"$(get_legacy_os_name)\
  \\\" || return 1\\n\\n    local legacy_download_link=null\\n    if [[
  \\\"$runtime\\\" == \\\"dotnet\\\" ]];
  then\\n        legacy_download_link=\\\"$azure_feed/Runtime/$specific_version\
  /dotnet-$distro_specific_osname-$normalized_architecture.$specific_version.ta\
  r.gz\\\"\\n    elif [ -z \\\"$runtime\\\" ];
  then\\n        legacy_download_link=\\\"$azure_feed/Sdk/$specific_version/dot\
  net-dev-$distro_specific_osname-$normalized_architecture.$specific_version.ta\
  r.gz\\\"\\n    else\\n        return 1\\n    fi\\n\\n    echo
  \\\"$legacy_download_link\\\"\\n    return 0\\n}\\n\\nget_user_install_path()
  {\\n    eval $invocation\\n\\n    if [ ! -z \\\"${DOTNET_INSTALL_DIR:-}\\\" ];
  then\\n        echo \\\"$DOTNET_INSTALL_DIR\\\"\\n    else\\n        echo
  \\\"$HOME/.dotnet\\\"\\n    fi\\n    return 0\\n}\\n\\n# args:\\n# install_dir
  - $1\\nresolve_installation_path() {\\n    eval $invocation\\n\\n    local
  install_dir=$1\\n    if [ \\\"$install_dir\\\" = \\\"<auto>\\\" ];
  then\\n        local
  user_install_path=\\\"$(get_user_install_path)\\\"\\n        say_verbose
  \\\"resolve_installation_path:
  user_install_path=$user_install_path\\\"\\n        echo
  \\\"$user_install_path\\\"\\n        return 0\\n    fi\\n\\n    echo
  \\\"$install_dir\\\"\\n    return 0\\n}\\n\\n# args:\\n#
  relative_or_absolute_path - $1\\nget_absolute_path() {\\n    eval
  $invocation\\n\\n    local relative_or_absolute_path=$1\\n    echo \\\"$(cd
  \\\"$(dirname \\\"$1\\\")\\\" && pwd -P)/$(basename
  \\\"$1\\\")\\\"\\n    return 0\\n}\\n\\n# args:\\n# input_files - stdin\\n#
  root_path - $1\\n# out_path - $2\\n# override -
  $3\\ncopy_files_or_dirs_from_list() {\\n    eval $invocation\\n\\n    local
  root_path=\\\"$(remove_trailing_slash \\\"$1\\\")\\\"\\n    local
  out_path=\\\"$(remove_trailing_slash \\\"$2\\\")\\\"\\n    local
  override=\\\"$3\\\"\\n    local
  osname=\\\"$(get_current_os_name)\\\"\\n    local
  override_switch=$(\\n        if [ \\\"$override\\\" = false ];
  then\\n            if [ \\\"$osname\\\" = \\\"linux-musl\\\" ];
  then\\n                printf --
  \\\"-u\\\";\\n            else\\n                printf --
  \\\"-n\\\";\\n            fi\\n        fi)\\n\\n    cat | uniq | while read -r
  file_path; do\\n        local path=\\\"$(remove_beginning_slash
  \\\"${file_path#$root_path}\\\")\\\"\\n        local
  target=\\\"$out_path/$path\\\"\\n        if [ \\\"$override\\\" = true ] || (!
  ([ -d \\\"$target\\\" ] || [ -e \\\"$target\\\" ])); then\\n            mkdir
  -p \\\"$out_path/$(dirname \\\"$path\\\")\\\"\\n            if [ -d
  \\\"$target\\\" ]; then\\n                rm -rf
  \\\"$target\\\"\\n            fi\\n            cp -R $override_switch
  \\\"$root_path/$path\\\" \\\"$target\\\"\\n        fi\\n    done\\n}\\n\\n#
  args:\\n# zip_path - $1\\n# out_path - $2\\nextract_dotnet_package()
  {\\n    eval $invocation\\n\\n    local zip_path=\\\"$1\\\"\\n    local
  out_path=\\\"$2\\\"\\n\\n    local temp_out_path=\\\"$(mktemp -d
  \\\"$temporary_file_template\\\")\\\"\\n\\n    local failed=false\\n    tar
  -xzf \\\"$zip_path\\\" -C \\\"$temp_out_path\\\" > /dev/null ||
  failed=true\\n\\n    local
  folders_with_version_regex='^.*/[0-9]+\\\\.[0-9]+[^/]+/'\\n    find
  \\\"$temp_out_path\\\" -type f | grep -Eo \\\"$folders_with_version_regex\\\"
  | sort | copy_files_or_dirs_from_list \\\"$temp_out_path\\\" \\\"$out_path\\\"
  false\\n    find \\\"$temp_out_path\\\" -type f | grep -Ev
  \\\"$folders_with_version_regex\\\" | copy_files_or_dirs_from_list
  \\\"$temp_out_path\\\" \\\"$out_path\\\"
  \\\"$override_non_versioned_files\\\"\\n\\n    rm -rf
  \\\"$temp_out_path\\\"\\n    rm -f \\\"$zip_path\\\" && say_verbose
  \\\"Temporary zip file $zip_path was removed\\\"\\n\\n    if [ \\\"$failed\\\"
  = true ]; then\\n        say_err \\\"Extraction failed\\\"\\n        return
  1\\n    fi\\n    return 0\\n}\\n\\n# args:\\n# remote_path - $1\\n#
  disable_feed_credential - $2\\nget_http_header()\\n{\\n    eval
  $invocation\\n    local remote_path=\\\"$1\\\"\\n    local
  disable_feed_credential=\\\"$2\\\"\\n\\n    local failed=false\\n    local
  response\\n    if machine_has \\\"curl\\\";
  then\\n        get_http_header_curl $remote_path $disable_feed_credential ||
  failed=true\\n    elif machine_has \\\"wget\\\";
  then\\n        get_http_header_wget $remote_path $disable_feed_credential ||
  failed=true\\n    else\\n        failed=true\\n    fi\\n    if [
  \\\"$failed\\\" = true ]; then\\n        say_verbose \\\"Failed to get HTTP
  header: '$remote_path'.\\\"\\n        return 1\\n    fi\\n    return
  0\\n}\\n\\n# args:\\n# remote_path - $1\\n# disable_feed_credential -
  $2\\nget_http_header_curl() {\\n    eval $invocation\\n    local
  remote_path=\\\"$1\\\"\\n    local
  disable_feed_credential=\\\"$2\\\"\\n\\n    remote_path_with_credential=\\\"$\
  remote_path\\\"\\n    if [ \\\"$disable_feed_credential\\\" = false ];
  then\\n        remote_path_with_credential+=\\\"$feed_credential\\\"\\n    fi\
  \\n\\n    curl_options=\\\"-I -sSL --retry 5 --retry-delay 2 --connect-timeout
  15 \\\"\\n    curl $curl_options \\\"$remote_path_with_credential\\\" 2>&1 ||
  return 1\\n    return 0\\n}\\n\\n# args:\\n# remote_path - $1\\n#
  disable_feed_credential - $2\\nget_http_header_wget() {\\n    eval
  $invocation\\n    local remote_path=\\\"$1\\\"\\n    local
  disable_feed_credential=\\\"$2\\\"\\n    local wget_options=\\\"-q -S --spider
  --tries 5 \\\"\\n\\n    local wget_options_extra=''\\n\\n    # Test for
  options that aren't supported on all wget implementations.\\n    if [[ $(wget
  -h 2>&1 | grep -E 'waitretry|connect-timeout') ]];
  then\\n        wget_options_extra=\\\"--waitretry 2 --connect-timeout 15
  \\\"\\n    else\\n        say \\\"wget extra options are unavailable for this
  environment\\\"\\n    fi\\n\\n    remote_path_with_credential=\\\"$remote_path\
  \\\"\\n    if [ \\\"$disable_feed_credential\\\" = false ];
  then\\n        remote_path_with_credential+=\\\"$feed_credential\\\"\\n    fi\
  \\n\\n    wget $wget_options $wget_options_extra
  \\\"$remote_path_with_credential\\\" 2>&1\\n\\n    return $?\\n}\\n\\n#
  args:\\n# remote_path - $1\\n# [out_path] - $2 - stdout if not
  provided\\ndownload() {\\n    eval $invocation\\n\\n    local
  remote_path=\\\"$1\\\"\\n    local out_path=\\\"${2:-}\\\"\\n\\n    if [[
  \\\"$remote_path\\\" != \\\"http\\\"* ]]; then\\n        cp
  \\\"$remote_path\\\" \\\"$out_path\\\"\\n        return
  $?\\n    fi\\n\\n    local failed=false\\n    local attempts=0\\n    while [
  $attempts -lt 3 ];
  do\\n        attempts=$((attempts+1))\\n        failed=false\\n        if
  machine_has \\\"curl\\\"; then\\n            downloadcurl \\\"$remote_path\\\"
  \\\"$out_path\\\" || failed=true\\n        elif machine_has \\\"wget\\\";
  then\\n            downloadwget \\\"$remote_path\\\" \\\"$out_path\\\" ||
  failed=true\\n        else\\n            say_err \\\"Missing dependency:
  neither curl nor wget was found.\\\"\\n            exit
  1\\n        fi\\n\\n        if [ \\\"$failed\\\" = false ] || [ $attempts -ge
  3 ] || { [ ! -z $http_code ] && [ $http_code = \\\"404\\\" ]; };
  then\\n            break\\n        fi\\n\\n        say \\\"Download attempt
  #$attempts has failed: $http_code $download_error_msg\\\"\\n        say
  \\\"Attempt #$((attempts+1)) will start in $((attempts*10))
  seconds.\\\"\\n        sleep $((attempts*10))\\n    done\\n\\n    if [
  \\\"$failed\\\" = true ]; then\\n        say_verbose \\\"Download failed:
  $remote_path\\\"\\n        return 1\\n    fi\\n    return 0\\n}\\n\\n# Updates
  global variables $http_code and $download_error_msg\\ndownloadcurl()
  {\\n    eval $invocation\\n    unset http_code\\n    unset
  download_error_msg\\n    local remote_path=\\\"$1\\\"\\n    local
  out_path=\\\"${2:-}\\\"\\n    # Append feed_credential as late as possible
  before calling curl to avoid logging feed_credential\\n    # Avoid passing URI
  with credentials to functions: note, most of them echoing parameters of
  invocation in verbose output.\\n    local
  remote_path_with_credential=\\\"${remote_path}${feed_credential}\\\"\\n    lo\
  cal curl_options=\\\"--retry 20 --retry-delay 2 --connect-timeout 15 -sSL -f
  --create-dirs \\\"\\n    local curl_exit_code=0;\\n    if [ -z
  \\\"$out_path\\\" ]; then\\n        curl $curl_options
  \\\"$remote_path_with_credential\\\"
  2>&1\\n        curl_exit_code=$?\\n    else\\n        curl $curl_options -o
  \\\"$out_path\\\" \\\"$remote_path_with_credential\\\"
  2>&1\\n        curl_exit_code=$?\\n    fi\\n    \\n    if [ $curl_exit_code
  -gt 0 ]; then\\n        download_error_msg=\\\"Unable to download
  $remote_path.\\\"\\n        # Check for curl timeout codes\\n        if [[
  $curl_exit_code == 7 || $curl_exit_code == 28 ]];
  then\\n            download_error_msg+=\\\" Failed to reach the server:
  connection timeout.\\\"\\n        else\\n            local
  disable_feed_credential=false\\n            local
  response=$(get_http_header_curl $remote_path
  $disable_feed_credential)\\n            http_code=$( echo \\\"$response\\\" |
  awk '/^HTTP/{print $2}' | tail -1 )\\n            if  [[ ! -z $http_code &&
  $http_code != 2* ]]; then\\n                download_error_msg+=\\\" Returned
  HTTP status code:
  $http_code.\\\"\\n            fi\\n        fi\\n        say_verbose
  \\\"$download_error_msg\\\"\\n        return 1\\n    fi\\n    return
  0\\n}\\n\\n\\n# Updates global variables $http_code and
  $download_error_msg\\ndownloadwget() {\\n    eval $invocation\\n    unset
  http_code\\n    unset download_error_msg\\n    local
  remote_path=\\\"$1\\\"\\n    local out_path=\\\"${2:-}\\\"\\n    # Append
  feed_credential as late as possible before calling wget to avoid logging
  feed_credential\\n    local
  remote_path_with_credential=\\\"${remote_path}${feed_credential}\\\"\\n    lo\
  cal wget_options=\\\"--tries 20 \\\"\\n\\n    local
  wget_options_extra=''\\n    local wget_result=''\\n\\n    # Test for options
  that aren't supported on all wget implementations.\\n    if [[ $(wget -h 2>&1
  | grep -E 'waitretry|connect-timeout') ]];
  then\\n        wget_options_extra=\\\"--waitretry 2 --connect-timeout 15
  \\\"\\n    else\\n        say \\\"wget extra options are unavailable for this
  environment\\\"\\n    fi\\n\\n    if [ -z \\\"$out_path\\\" ];
  then\\n        wget -q $wget_options $wget_options_extra -O -
  \\\"$remote_path_with_credential\\\"
  2>&1\\n        wget_result=$?\\n    else\\n        wget $wget_options
  $wget_options_extra -O \\\"$out_path\\\" \\\"$remote_path_with_credential\\\"
  2>&1\\n        wget_result=$?\\n    fi\\n\\n    if [[ $wget_result != 0 ]];
  then\\n        local disable_feed_credential=false\\n        local
  response=$(get_http_header_wget $remote_path
  $disable_feed_credential)\\n        http_code=$( echo \\\"$response\\\" | awk
  '/^  HTTP/{print $2}' | tail -1 )\\n        download_error_msg=\\\"Unable to
  download $remote_path.\\\"\\n        if  [[ ! -z $http_code && $http_code !=
  2* ]]; then\\n            download_error_msg+=\\\" Returned HTTP status code:
  $http_code.\\\"\\n        # wget exit code 4 stands for
  network-issue\\n        elif [[ $wget_result == 4 ]];
  then\\n            download_error_msg+=\\\" Failed to reach the server:
  connection timeout.\\\"\\n        fi\\n        say_verbose
  \\\"$download_error_msg\\\"\\n        return 1\\n    fi\\n\\n    return
  0\\n}\\n\\nget_download_link_from_aka_ms() {\\n    eval
  $invocation\\n\\n    #quality is not supported for LTS or STS
  channel\\n    #STS maps to current\\n    if [[ ! -z
  \\\"$normalized_quality\\\"  && (\\\"$normalized_channel\\\" == \\\"LTS\\\" ||
  \\\"$normalized_channel\\\" == \\\"STS\\\") ]];
  then\\n        normalized_quality=\\\"\\\"\\n        say_warning
  \\\"Specifying quality for STS or LTS channel is not supported, the quality
  will be ignored.\\\"\\n    fi\\n\\n    say_verbose \\\"Retrieving primary
  payload URL from aka.ms for channel: '$normalized_channel', quality:
  '$normalized_quality', product: '$normalized_product', os: '$normalized_os',
  architecture: '$normalized_architecture'.\\\" \\n\\n    #construct aka.ms
  link\\n    aka_ms_link=\\\"https://aka.ms/dotnet\\\"\\n    if  [
  \\\"$internal\\\" = true ];
  then\\n        aka_ms_link=\\\"$aka_ms_link/internal\\\"\\n    fi\\n    aka_m\
  s_link=\\\"$aka_ms_link/$normalized_channel\\\"\\n    if [[ ! -z
  \\\"$normalized_quality\\\" ]];
  then\\n        aka_ms_link=\\\"$aka_ms_link/$normalized_quality\\\"\\n    fi\
  \\n    aka_ms_link=\\\"$aka_ms_link/$normalized_product-$normalized_os-$norma\
  lized_architecture.tar.gz\\\"\\n    say_verbose \\\"Constructed aka.ms link:
  '$aka_ms_link'.\\\"\\n\\n    #get HTTP response\\n    #do not pass credentials
  as a part of the $aka_ms_link and do not apply credentials in the
  get_http_header function\\n    #otherwise the redirect link would have
  credentials as well\\n    #it would result in applying credentials twice to
  the resulting link and thus breaking it, and in echoing credentials to the
  output as a part of redirect
  link\\n    disable_feed_credential=true\\n    response=\\\"$(get_http_header
  $aka_ms_link $disable_feed_credential)\\\"\\n\\n    say_verbose \\\"Received
  response: $response\\\"\\n    # Get results of all the
  redirects.\\n    http_codes=$( echo \\\"$response\\\" | awk '$1 ~ /^HTTP/
  {print $2}' )\\n    # They all need to be 301, otherwise some links are broken
  (except for the last, which is not a redirect but 200 or
  404).\\n    broken_redirects=$( echo \\\"$http_codes\\\" | sed '$d' | grep -v
  '301' )\\n\\n    # All HTTP codes are 301 (Moved Permanently), the redirect
  link exists.\\n    if [[ -z \\\"$broken_redirects\\\" ]];
  then\\n        aka_ms_download_link=$( echo \\\"$response\\\" | awk '$1 ~
  /^Location/{print $2}' | tail -1 | tr -d '\\\\r')\\n\\n        if [[ -z
  \\\"$aka_ms_download_link\\\" ]]; then\\n            say_verbose \\\"The
  aka.ms link '$aka_ms_link' is not valid: failed to get redirect
  location.\\\"\\n            return 1\\n        fi\\n\\n        say_verbose
  \\\"The redirect location retrieved:
  '$aka_ms_download_link'.\\\"\\n        return
  0\\n    else\\n        say_verbose \\\"The aka.ms link '$aka_ms_link' is not
  valid: received HTTP code: $(echo \\\"$broken_redirects\\\" | paste -sd
  \\\",\\\" -).\\\"\\n        return
  1\\n    fi\\n}\\n\\nget_feeds_to_use()\\n{\\n    feeds=(\\n    \\\"https://do\
  tnetcli.azureedge.net/dotnet\\\"\\n    \\\"https://dotnetbuilds.azureedge.net\
  /public\\\"\\n    )\\n\\n    if [[ -n \\\"$azure_feed\\\" ]];
  then\\n        feeds=(\\\"$azure_feed\\\")\\n    fi\\n\\n    if [[
  \\\"$no_cdn\\\" == \\\"true\\\" ]];
  then\\n        feeds=(\\n        \\\"https://dotnetcli.blob.core.windows.net/\
  dotnet\\\"\\n        \\\"https://dotnetbuilds.blob.core.windows.net/public\\\"\
  \\n        )\\n\\n        if [[ -n \\\"$uncached_feed\\\" ]];
  then\\n            feeds=(\\\"$uncached_feed\\\")\\n        fi\\n    fi\\n}\\n\
  \\n# THIS FUNCTION MAY EXIT (if the determined version is already
  installed).\\ngenerate_download_links()
  {\\n\\n    download_links=()\\n    specific_versions=()\\n    effective_versi\
  ons=()\\n    link_types=()\\n\\n    # If generate_akams_links returns false,
  no fallback to old links. Just terminate.\\n    # This function may also
  'exit' (if the determined version is already
  installed).\\n    generate_akams_links || return\\n\\n    # Check other feeds
  only if we haven't been able to find an aka.ms link.\\n    if [[
  \\\"${#download_links[@]}\\\" -lt 1 ]]; then\\n        for feed in
  ${feeds[@]}\\n        do\\n            # generate_regular_links may also
  'exit' (if the determined version is already
  installed).\\n            generate_regular_links $feed ||
  return\\n        done\\n    fi\\n\\n    if [[ \\\"${#download_links[@]}\\\"
  -eq 0 ]]; then\\n        say_err \\\"Failed to resolve the exact version
  number.\\\"\\n        return 1\\n    fi\\n\\n    say_verbose \\\"Generated
  ${#download_links[@]} links.\\\"\\n    for link_index in
  ${!download_links[@]}\\n    do\\n        say_verbose \\\"Link $link_index:
  ${link_types[$link_index]}, ${effective_versions[$link_index]},
  ${download_links[$link_index]}\\\"\\n    done\\n}\\n\\n# THIS FUNCTION MAY
  EXIT (if the determined version is already
  installed).\\ngenerate_akams_links() {\\n    local
  valid_aka_ms_link=true;\\n\\n    normalized_version=\\\"$(to_lowercase
  \\\"$version\\\")\\\"\\n    if [[ \\\"$normalized_version\\\" !=
  \\\"latest\\\" ]] && [ -n \\\"$normalized_quality\\\" ];
  then\\n        say_err \\\"Quality and Version options are not allowed to be
  specified simultaneously. See
  https://learn.microsoft.com/dotnet/core/tools/dotnet-install-script#options
  for details.\\\"\\n        return 1\\n    fi\\n\\n    if [[ -n
  \\\"$json_file\\\" || \\\"$normalized_version\\\" != \\\"latest\\\" ]];
  then\\n        # aka.ms links are not needed when exact version is specified
  via command or json
  file\\n        return\\n    fi\\n\\n    get_download_link_from_aka_ms ||
  valid_aka_ms_link=false\\n\\n    if [[ \\\"$valid_aka_ms_link\\\" == true ]];
  then\\n        say_verbose \\\"Retrieved primary payload URL from aka.ms link:
  '$aka_ms_download_link'.\\\"\\n        say_verbose \\\"Downloading using
  legacy url will not be
  attempted.\\\"\\n\\n        download_link=$aka_ms_download_link\\n\\n        \
  #get version from the path\\n        IFS='/'\\n        read -ra pathElems <<<
  \\\"$download_link\\\"\\n        count=${#pathElems[@]}\\n        specific_ve\
  rsion=\\\"${pathElems[count-2]}\\\"\\n        unset IFS;\\n        say_verbose
  \\\"Version: '$specific_version'.\\\"\\n\\n        #Retrieve effective
  version\\n        effective_version=\\\"$(get_specific_product_version
  \\\"$azure_feed\\\" \\\"$specific_version\\\"
  \\\"$download_link\\\")\\\"\\n\\n        # Add link info to
  arrays\\n        download_links+=($download_link)\\n        specific_versions\
  +=($specific_version)\\n        effective_versions+=($effective_version)\\n        \
  link_types+=(\\\"aka.ms\\\")\\n\\n        #  Check if the SDK version is
  already installed.\\n        if [[ \\\"$dry_run\\\" != true ]] &&
  is_dotnet_package_installed \\\"$install_root\\\" \\\"$asset_relative_path\\\"
  \\\"$effective_version\\\"; then\\n            say \\\"$asset_name with
  version '$effective_version' is already installed.\\\"\\n            exit
  0\\n        fi\\n\\n        return 0\\n    fi\\n\\n    # if quality is
  specified - exit with error - there is no fallback approach\\n    if [ ! -z
  \\\"$normalized_quality\\\" ]; then\\n        say_err \\\"Failed to locate the
  latest version in the channel '$normalized_channel' with '$normalized_quality'
  quality for '$normalized_product', os: '$normalized_os', architecture:
  '$normalized_architecture'.\\\"\\n        say_err \\\"Refer to:
  https://aka.ms/dotnet-os-lifecycle for information on .NET Core
  support.\\\"\\n        return 1\\n    fi\\n    say_verbose \\\"Falling back to
  latest.version file approach.\\\"\\n}\\n\\n# THIS FUNCTION MAY EXIT (if the
  determined version is already installed)\\n# args:\\n# feed -
  $1\\ngenerate_regular_links() {\\n    local feed=\\\"$1\\\"\\n    local
  valid_legacy_download_link=true\\n\\n    specific_version=$(get_specific_vers\
  ion_from_version \\\"$feed\\\" \\\"$channel\\\"
  \\\"$normalized_architecture\\\" \\\"$version\\\" \\\"$json_file\\\") ||
  specific_version='0'\\n\\n    if [[ \\\"$specific_version\\\" == '0' ]];
  then\\n        say_verbose \\\"Failed to resolve the specific version number
  using feed
  '$feed'\\\"\\n        return\\n    fi\\n\\n    effective_version=\\\"$(get_sp\
  ecific_product_version \\\"$feed\\\"
  \\\"$specific_version\\\")\\\"\\n    say_verbose
  \\\"specific_version=$specific_version\\\"\\n\\n    download_link=\\\"$(const\
  ruct_download_link \\\"$feed\\\" \\\"$channel\\\"
  \\\"$normalized_architecture\\\" \\\"$specific_version\\\"
  \\\"$normalized_os\\\")\\\"\\n    say_verbose \\\"Constructed primary named
  payload URL: $download_link\\\"\\n\\n    # Add link info to
  arrays\\n    download_links+=($download_link)\\n    specific_versions+=($spec\
  ific_version)\\n    effective_versions+=($effective_version)\\n    link_types\
  +=(\\\"primary\\\")\\n\\n    legacy_download_link=\\\"$(construct_legacy_down\
  load_link \\\"$feed\\\" \\\"$channel\\\" \\\"$normalized_architecture\\\"
  \\\"$specific_version\\\")\\\" || valid_legacy_download_link=false\\n\\n    if
  [ \\\"$valid_legacy_download_link\\\" = true ]; then\\n        say_verbose
  \\\"Constructed legacy named payload URL:
  $legacy_download_link\\\"\\n    \\n        download_links+=($legacy_download_\
  link)\\n        specific_versions+=($specific_version)\\n        effective_ve\
  rsions+=($effective_version)\\n        link_types+=(\\\"legacy\\\")\\n    else\
  \\n        legacy_download_link=\\\"\\\"\\n        say_verbose \\\"Cound not
  construct a legacy_download_link; omitting...\\\"\\n    fi\\n\\n    #  Check
  if the SDK version is already installed.\\n    if [[ \\\"$dry_run\\\" != true
  ]] && is_dotnet_package_installed \\\"$install_root\\\"
  \\\"$asset_relative_path\\\" \\\"$effective_version\\\"; then\\n        say
  \\\"$asset_name with version '$effective_version' is already
  installed.\\\"\\n        exit 0\\n    fi\\n}\\n\\nprint_dry_run()
  {\\n\\n    say \\\"Payload URLs:\\\"\\n\\n    for link_index in
  \\\"${!download_links[@]}\\\"\\n        do\\n            say \\\"URL
  #$link_index - ${link_types[$link_index]}:
  ${download_links[$link_index]}\\\"\\n    done\\n\\n    resolved_version=${spe\
  cific_versions[0]}\\n    repeatable_command=\\\"./$script_name --version
  \\\"\\\\\\\"\\\"$resolved_version\\\"\\\\\\\"\\\" --install-dir
  \\\"\\\\\\\"\\\"$install_root\\\"\\\\\\\"\\\" --architecture
  \\\"\\\\\\\"\\\"$normalized_architecture\\\"\\\\\\\"\\\" --os
  \\\"\\\\\\\"\\\"$normalized_os\\\"\\\\\\\"\\\"\\\"\\n    \\n    if [ ! -z
  \\\"$normalized_quality\\\" ]; then\\n        repeatable_command+=\\\"
  --quality
  \\\"\\\\\\\"\\\"$normalized_quality\\\"\\\\\\\"\\\"\\\"\\n    fi\\n\\n    if
  [[ \\\"$runtime\\\" == \\\"dotnet\\\" ]];
  then\\n        repeatable_command+=\\\" --runtime
  \\\"\\\\\\\"\\\"dotnet\\\"\\\\\\\"\\\"\\\"\\n    elif [[ \\\"$runtime\\\" ==
  \\\"aspnetcore\\\" ]]; then\\n        repeatable_command+=\\\" --runtime
  \\\"\\\\\\\"\\\"aspnetcore\\\"\\\\\\\"\\\"\\\"\\n    fi\\n\\n    repeatable_c\
  ommand+=\\\"$non_dynamic_parameters\\\"\\n\\n    if [ -n
  \\\"$feed_credential\\\" ]; then\\n        repeatable_command+=\\\"
  --feed-credential
  \\\"\\\\\\\"\\\"<feed_credential>\\\"\\\\\\\"\\\"\\\"\\n    fi\\n\\n    say
  \\\"Repeatable invocation: $repeatable_command\\\"\\n}\\n\\ncalculate_vars()
  {\\n    eval $invocation\\n\\n    script_name=$(basename
  \\\"$0\\\")\\n    normalized_architecture=\\\"$(get_normalized_architecture_f\
  rom_architecture \\\"$architecture\\\")\\\"\\n    say_verbose \\\"Normalized
  architecture:
  '$normalized_architecture'.\\\"\\n    normalized_os=\\\"$(get_normalized_os
  \\\"$user_defined_os\\\")\\\"\\n    say_verbose \\\"Normalized OS:
  '$normalized_os'.\\\"\\n    normalized_quality=\\\"$(get_normalized_quality
  \\\"$quality\\\")\\\"\\n    say_verbose \\\"Normalized quality:
  '$normalized_quality'.\\\"\\n    normalized_channel=\\\"$(get_normalized_chan\
  nel \\\"$channel\\\")\\\"\\n    say_verbose \\\"Normalized channel:
  '$normalized_channel'.\\\"\\n    normalized_product=\\\"$(get_normalized_prod\
  uct \\\"$runtime\\\")\\\"\\n    say_verbose \\\"Normalized product:
  '$normalized_product'.\\\"\\n    install_root=\\\"$(resolve_installation_path
  \\\"$install_dir\\\")\\\"\\n    say_verbose \\\"InstallRoot:
  '$install_root'.\\\"\\n\\n    normalized_architecture=\\\"$(get_normalized_ar\
  chitecture_for_specific_sdk_version \\\"$version\\\"
  \\\"$normalized_channel\\\" \\\"$normalized_architecture\\\")\\\"\\n\\n    if
  [[ \\\"$runtime\\\" == \\\"dotnet\\\" ]];
  then\\n        asset_relative_path=\\\"shared/Microsoft.NETCore.App\\\"\\n        \
  asset_name=\\\".NET Core Runtime\\\"\\n    elif [[ \\\"$runtime\\\" ==
  \\\"aspnetcore\\\" ]];
  then\\n        asset_relative_path=\\\"shared/Microsoft.AspNetCore.App\\\"\\n        \
  asset_name=\\\"ASP.NET Core Runtime\\\"\\n    elif [ -z \\\"$runtime\\\" ];
  then\\n        asset_relative_path=\\\"sdk\\\"\\n        asset_name=\\\".NET
  Core SDK\\\"\\n    fi\\n\\n    get_feeds_to_use\\n}\\n\\ninstall_dotnet()
  {\\n    eval $invocation\\n    local download_failed=false\\n    local
  download_completed=false\\n\\n    mkdir -p
  \\\"$install_root\\\"\\n    zip_path=\\\"$(mktemp
  \\\"$temporary_file_template\\\")\\\"\\n    say_verbose \\\"Zip path:
  $zip_path\\\"\\n\\n    for link_index in
  \\\"${!download_links[@]}\\\"\\n    do\\n        download_link=\\\"${download\
  _links[$link_index]}\\\"\\n        specific_version=\\\"${specific_versions[$\
  link_index]}\\\"\\n        effective_version=\\\"${effective_versions[$link_i\
  ndex]}\\\"\\n        link_type=\\\"${link_types[$link_index]}\\\"\\n\\n        \
  say \\\"Attempting to download using $link_type link
  $download_link\\\"\\n\\n        # The download function will set variables
  $http_code and $download_error_msg in case of
  failure.\\n        download_failed=false\\n        download
  \\\"$download_link\\\" \\\"$zip_path\\\" 2>&1 ||
  download_failed=true\\n\\n        if [ \\\"$download_failed\\\" = true ];
  then\\n            case $http_code in\\n            404)\\n                say
  \\\"The resource at $link_type link '$download_link' is not
  available.\\\"\\n                ;;\\n            *)\\n                say
  \\\"Failed to download $link_type link '$download_link':
  $download_error_msg\\\"\\n                ;;\\n            esac\\n            \
  rm -f \\\"$zip_path\\\" 2>&1 && say_verbose \\\"Temporary zip file $zip_path
  was
  removed\\\"\\n        else\\n            download_completed=true\\n            \
  break\\n        fi\\n    done\\n\\n    if [[ \\\"$download_completed\\\" ==
  false ]]; then\\n        say_err \\\"Could not find \\\\`$asset_name\\\\` with
  version = $specific_version\\\"\\n        say_err \\\"Refer to:
  https://aka.ms/dotnet-os-lifecycle for information on .NET Core
  support\\\"\\n        return 1\\n    fi\\n\\n    say \\\"Extracting zip from
  $download_link\\\"\\n    extract_dotnet_package \\\"$zip_path\\\"
  \\\"$install_root\\\" || return 1\\n\\n    #  Check if the SDK version is
  installed; if not, fail the installation.\\n    # if the version contains
  \\\"RTM\\\" or \\\"servicing\\\"; check if a 'release-type' SDK version is
  installed.\\n    if [[ $specific_version == *\\\"rtm\\\"* || $specific_version
  == *\\\"servicing\\\"* ]]; then\\n        IFS='-'\\n        read -ra verArr
  <<<
  \\\"$specific_version\\\"\\n        release_version=\\\"${verArr[0]}\\\"\\n        \
  unset IFS;\\n        say_verbose \\\"Checking installation: version =
  $release_version\\\"\\n        if is_dotnet_package_installed
  \\\"$install_root\\\" \\\"$asset_relative_path\\\" \\\"$release_version\\\";
  then\\n            say \\\"Installed version is
  $effective_version\\\"\\n            return
  0\\n        fi\\n    fi\\n\\n    #  Check if the standard SDK version is
  installed.\\n    say_verbose \\\"Checking installation: version =
  $effective_version\\\"\\n    if is_dotnet_package_installed
  \\\"$install_root\\\" \\\"$asset_relative_path\\\" \\\"$effective_version\\\";
  then\\n        say \\\"Installed version is
  $effective_version\\\"\\n        return 0\\n    fi\\n\\n    # Version
  verification failed. More likely something is wrong either with the downloaded
  content or with the verification algorithm.\\n    say_err \\\"Failed to verify
  the version of installed \\\\`$asset_name\\\\`.\\\\nInstallation source:
  $download_link.\\\\nInstallation location: $install_root.\\\\nReport the bug
  at https://github.com/dotnet/install-scripts/issues.\\\"\\n    say_err
  \\\"\\\\`$asset_name\\\\` with version = $effective_version failed to install
  with an error.\\\"\\n    return
  1\\n}\\n\\nargs=(\\\"$@\\\")\\n\\nlocal_version_file_relative_path=\\\"/.vers\
  ion\\\"\\nbin_folder_relative_path=\\\"\\\"\\ntemporary_file_template=\\\"${T\
  MPDIR:-/tmp}/dotnet.XXXXXXXXX\\\"\\n\\nchannel=\\\"LTS\\\"\\nversion=\\\"Late\
  st\\\"\\njson_file=\\\"\\\"\\ninstall_dir=\\\"<auto>\\\"\\narchitecture=\\\"<\
  auto>\\\"\\ndry_run=false\\nno_path=false\\nno_cdn=false\\nazure_feed=\\\"\\\"\
  \\nuncached_feed=\\\"\\\"\\nfeed_credential=\\\"\\\"\\nverbose=false\\nruntim\
  e=\\\"\\\"\\nruntime_id=\\\"\\\"\\nquality=\\\"\\\"\\ninternal=false\\noverri\
  de_non_versioned_files=true\\nnon_dynamic_parameters=\\\"\\\"\\nuser_defined_\
  os=\\\"\\\"\\n\\nwhile [ $# -ne 0 ]\\ndo\\n    name=\\\"$1\\\"\\n    case
  \\\"$name\\\"
  in\\n        -c|--channel|-[Cc]hannel)\\n            shift\\n            chan\
  nel=\\\"$1\\\"\\n            ;;\\n        -v|--version|-[Vv]ersion)\\n            \
  shift\\n            version=\\\"$1\\\"\\n            ;;\\n        -q|--qualit\
  y|-[Qq]uality)\\n            shift\\n            quality=\\\"$1\\\"\\n            \
  ;;\\n        --internal|-[Ii]nternal)\\n            internal=true\\n            \
  non_dynamic_parameters+=\\\"
  $name\\\"\\n            ;;\\n        -i|--install-dir|-[Ii]nstall[Dd]ir)\\n            \
  shift\\n            install_dir=\\\"$1\\\"\\n            ;;\\n        --arch|\
  --architecture|-[Aa]rch|-[Aa]rchitecture)\\n            shift\\n            a\
  rchitecture=\\\"$1\\\"\\n            ;;\\n        --os|-[Oo][SS])\\n            \
  shift\\n            user_defined_os=\\\"$1\\\"\\n            ;;\\n        --s\
  hared-runtime|-[Ss]hared[Rr]untime)\\n            say_warning \\\"The
  --shared-runtime flag is obsolete and may be removed in a future version of
  this script. The recommended usage is to specify '--runtime
  dotnet'.\\\"\\n            if [ -z \\\"$runtime\\\" ];
  then\\n                runtime=\\\"dotnet\\\"\\n            fi\\n            \
  ;;\\n        --runtime|-[Rr]untime)\\n            shift\\n            runtime=\
  \\\"$1\\\"\\n            if [[ \\\"$runtime\\\" != \\\"dotnet\\\" ]] && [[
  \\\"$runtime\\\" != \\\"aspnetcore\\\" ]]; then\\n                say_err
  \\\"Unsupported value for --runtime: '$1'. Valid values are 'dotnet' and
  'aspnetcore'.\\\"\\n                if [[ \\\"$runtime\\\" ==
  \\\"windowsdesktop\\\" ]]; then\\n                    say_err
  \\\"WindowsDesktop archives are manufactured for Windows platforms
  only.\\\"\\n                fi\\n                exit
  1\\n            fi\\n            ;;\\n        --dry-run|-[Dd]ry[Rr]un)\\n            \
  dry_run=true\\n            ;;\\n        --no-path|-[Nn]o[Pp]ath)\\n            \
  no_path=true\\n            non_dynamic_parameters+=\\\"
  $name\\\"\\n            ;;\\n        --verbose|-[Vv]erbose)\\n            ver\
  bose=true\\n            non_dynamic_parameters+=\\\"
  $name\\\"\\n            ;;\\n        --no-cdn|-[Nn]o[Cc]dn)\\n            no_\
  cdn=true\\n            non_dynamic_parameters+=\\\"
  $name\\\"\\n            ;;\\n        --azure-feed|-[Aa]zure[Ff]eed)\\n            \
  shift\\n            azure_feed=\\\"$1\\\"\\n            non_dynamic_parameter\
  s+=\\\" $name
  \\\"\\\\\\\"\\\"$1\\\"\\\\\\\"\\\"\\\"\\n            ;;\\n        --uncached-\
  feed|-[Uu]ncached[Ff]eed)\\n            shift\\n            uncached_feed=\\\
  \"$1\\\"\\n            non_dynamic_parameters+=\\\" $name
  \\\"\\\\\\\"\\\"$1\\\"\\\\\\\"\\\"\\\"\\n            ;;\\n        --feed-cred\
  ential|-[Ff]eed[Cc]redential)\\n            shift\\n            feed_credenti\
  al=\\\"$1\\\"\\n            #feed_credential should start with \\\"?\\\", for
  it to be added to the end of the link.\\n            #adding \\\"?\\\" at the
  beginning of the feed_credential if needed.\\n            [[ -z \\\"$(echo
  $feed_credential)\\\" ]] || [[ $feed_credential == \\\\?* ]] ||
  feed_credential=\\\"?$feed_credential\\\"\\n            ;;\\n        --runtim\
  e-id|-[Rr]untime[Ii]d)\\n            shift\\n            runtime_id=\\\"$1\\\"\
  \\n            non_dynamic_parameters+=\\\" $name
  \\\"\\\\\\\"\\\"$1\\\"\\\\\\\"\\\"\\\"\\n            say_warning \\\"Use of
  --runtime-id is obsolete and should be limited to the versions below 2.1. To
  override architecture, use --architecture option instead. To override OS, use
  --os option
  instead.\\\"\\n            ;;\\n        --jsonfile|-[Jj][Ss]on[Ff]ile)\\n            \
  shift\\n            json_file=\\\"$1\\\"\\n            ;;\\n        --skip-no\
  n-versioned-files|-[Ss]kip[Nn]on[Vv]ersioned[Ff]iles)\\n            override_\
  non_versioned_files=false\\n            non_dynamic_parameters+=\\\"
  $name\\\"\\n            ;;\\n        -?|--?|-h|--help|-[Hh]elp)\\n            \
  script_name=\\\"$(basename \\\"$0\\\")\\\"\\n            echo \\\".NET Tools
  Installer\\\"\\n            echo \\\"Usage: $script_name [-c|--channel
  <CHANNEL>] [-v|--version <VERSION>] [-p|--prefix
  <DESTINATION>]\\\"\\n            echo \\\"       $script_name
  -h|-?|--help\\\"\\n            echo \\\"\\\"\\n            echo
  \\\"$script_name is a simple command line interface for obtaining dotnet
  cli.\\\"\\n            echo \\\"    Note that the intended use of this script
  is for Continuous Integration (CI) scenarios, where:\\\"\\n            echo
  \\\"    - The SDK needs to be installed without user interaction and without
  admin rights.\\\"\\n            echo \\\"    - The SDK installation doesn't
  need to persist across multiple CI runs.\\\"\\n            echo \\\"    To set
  up a development environment or to run apps, use installers rather than this
  script. Visit https://dotnet.microsoft.com/download to get the
  installer.\\\"\\n            echo \\\"\\\"\\n            echo
  \\\"Options:\\\"\\n            echo \\\"  -c,--channel
  <CHANNEL>         Download from the channel specified, Defaults to
  \\\\`$channel\\\\`.\\\"\\n            echo
  \\\"      -Channel\\\"\\n            echo \\\"          Possible
  values:\\\"\\n            echo \\\"          - STS - the most recent Standard
  Term Support release\\\"\\n            echo \\\"          - LTS - the most
  recent Long Term Support release\\\"\\n            echo \\\"          - 2-part
  version in a format A.B - represents a specific release\\\"\\n            echo
  \\\"              examples: 2.0; 1.0\\\"\\n            echo \\\"          -
  3-part version in a format A.B.Cxx - represents a specific SDK
  release\\\"\\n            echo \\\"              examples: 5.0.1xx,
  5.0.2xx.\\\"\\n            echo \\\"              Supported since 5.0
  release\\\"\\n            echo \\\"          Warning: Value 'Current' is
  deprecated for the Channel parameter. Use 'STS'
  instead.\\\"\\n            echo \\\"          Note: The version parameter
  overrides the channel parameter when any version other than 'latest' is
  used.\\\"\\n            echo \\\"  -v,--version <VERSION>         Use specific
  VERSION, Defaults to \\\\`$version\\\\`.\\\"\\n            echo
  \\\"      -Version\\\"\\n            echo \\\"          Possible
  values:\\\"\\n            echo \\\"          - latest - the latest build on
  specific channel\\\"\\n            echo \\\"          - 3-part version in a
  format A.B.C - represents specific version of build\\\"\\n            echo
  \\\"              examples: 2.0.0-preview2-006120;
  1.1.0\\\"\\n            echo \\\"  -q,--quality <quality>         Download the
  latest build of specified quality in the channel.\\\"\\n            echo
  \\\"      -Quality\\\"\\n            echo \\\"          The possible values
  are: daily, signed, validated, preview, GA.\\\"\\n            echo
  \\\"          Works only in combination with channel. Not applicable for STS
  and LTS channels and will be ignored if those channels are used.\\\"
  \\n            echo \\\"          For SDK use channel in A.B.Cxx format. Using
  quality for SDK together with channel in A.B format is not supported.\\\"
  \\n            echo \\\"          Supported since 5.0 release.\\\"
  \\n            echo \\\"          Note: The version parameter overrides the
  channel parameter when any version other than 'latest' is used, and therefore
  overrides the quality.\\\"\\n            echo
  \\\"  --internal,-Internal               Download internal builds. Requires
  providing credentials via --feed-credential parameter.\\\"\\n            echo
  \\\"  --feed-credential <FEEDCREDENTIAL> Token to access Azure feed. Used as a
  query string to append to the Azure feed.\\\"\\n            echo
  \\\"      -FeedCredential                This parameter typically is not
  specified.\\\"\\n            echo \\\"  -i,--install-dir
  <DIR>             Install under specified location (see Install Location
  below)\\\"\\n            echo \\\"      -InstallDir\\\"\\n            echo
  \\\"  --architecture <ARCHITECTURE>      Architecture of dotnet binaries to be
  installed, Defaults to \\\\`$architecture\\\\`.\\\"\\n            echo
  \\\"      --arch,-Architecture,-Arch\\\"\\n            echo
  \\\"          Possible values: x64, arm, arm64, s390x and
  ppc64le\\\"\\n            echo \\\"  --os
  <system>                    Specifies operating system to be used when
  selecting the installer.\\\"\\n            echo \\\"          Overrides the OS
  determination approach used by the script. Supported values: osx, linux,
  linux-musl, freebsd, rhel.6.\\\"\\n            echo \\\"          In case any
  other value is provided, the platform will be determined by the script based
  on machine configuration.\\\"\\n            echo \\\"          Not supported
  for legacy links. Use --runtime-id to specify platform for legacy
  links.\\\"\\n            echo \\\"          Refer to:
  https://aka.ms/dotnet-os-lifecycle for more
  information.\\\"\\n            echo \\\"  --runtime
  <RUNTIME>                Installs a shared runtime only, without the
  SDK.\\\"\\n            echo \\\"      -Runtime\\\"\\n            echo
  \\\"          Possible values:\\\"\\n            echo \\\"          -
  dotnet     - the Microsoft.NETCore.App shared runtime\\\"\\n            echo
  \\\"          - aspnetcore - the Microsoft.AspNetCore.App shared
  runtime\\\"\\n            echo \\\"  --dry-run,-DryRun                  Do not
  perform installation. Display download link.\\\"\\n            echo
  \\\"  --no-path, -NoPath                 Do not set PATH for the current
  process.\\\"\\n            echo
  \\\"  --verbose,-Verbose                 Display diagnostics
  information.\\\"\\n            echo
  \\\"  --azure-feed,-AzureFeed            For internal use
  only.\\\"\\n            echo \\\"                                     Allows
  using a different storage to download SDK archives
  from.\\\"\\n            echo \\\"                                     This
  parameter is only used if --no-cdn is false.\\\"\\n            echo
  \\\"  --uncached-feed,-UncachedFeed      For internal use
  only.\\\"\\n            echo \\\"                                     Allows
  using a different storage to download SDK archives
  from.\\\"\\n            echo \\\"                                     This
  parameter is only used if --no-cdn is true.\\\"\\n            echo
  \\\"  --skip-non-versioned-files         Skips non-versioned files if they
  already exist, such as the dotnet executable.\\\"\\n            echo
  \\\"      -SkipNonVersionedFiles\\\"\\n            echo
  \\\"  --no-cdn,-NoCdn                    Disable downloading from the Azure
  CDN, and use the uncached feed directly.\\\"\\n            echo
  \\\"  --jsonfile <JSONFILE>              Determines the SDK version from a
  user specified global.json file.\\\"\\n            echo
  \\\"                                     Note: global.json must have a value
  for 'SDK:Version'\\\"\\n            echo
  \\\"  -?,--?,-h,--help,-Help             Shows this help
  message\\\"\\n            echo \\\"\\\"\\n            echo \\\"Install
  Location:\\\"\\n            echo \\\"  Location is chosen in following
  order:\\\"\\n            echo \\\"    - --install-dir
  option\\\"\\n            echo \\\"    - Environmental variable
  DOTNET_INSTALL_DIR\\\"\\n            echo \\\"    -
  $HOME/.dotnet\\\"\\n            exit
  0\\n            ;;\\n        *)\\n            say_err \\\"Unknown argument
  \\\\`$name\\\\`\\\"\\n            exit
  1\\n            ;;\\n    esac\\n\\n    shift\\ndone\\n\\nsay_verbose \\\"Note
  that the intended use of this script is for Continuous Integration (CI)
  scenarios, where:\\\"\\nsay_verbose \\\"- The SDK needs to be installed
  without user interaction and without admin rights.\\\"\\nsay_verbose \\\"- The
  SDK installation doesn't need to persist across multiple CI
  runs.\\\"\\nsay_verbose \\\"To set up a development environment or to run
  apps, use installers rather than this script. Visit
  https://dotnet.microsoft.com/download to get the installer.\\\\n\\\"\\n\\nif [
  \\\"$internal\\\" = true ] && [ -z \\\"$(echo $feed_credential)\\\" ];
  then\\n    message=\\\"Provide credentials via --feed-credential
  parameter.\\\"\\n    if [ \\\"$dry_run\\\" = true ];
  then\\n        say_warning \\\"$message\\\"\\n    else\\n        say_err
  \\\"$message\\\"\\n        exit
  1\\n    fi\\nfi\\n\\ncheck_min_reqs\\ncalculate_vars\\n#
  generate_regular_links call below will 'exit' if the determined version is
  already installed.\\ngenerate_download_links\\n\\nif [[ \\\"$dry_run\\\" =
  true ]]; then\\n    print_dry_run\\n    exit
  0\\nfi\\n\\ninstall_dotnet\\n\\nbin_path=\\\"$(get_absolute_path
  \\\"$(combine_paths \\\"$install_root\\\"
  \\\"$bin_folder_relative_path\\\")\\\")\\\"\\nif [ \\\"$no_path\\\" = false ];
  then\\n    say \\\"Adding to current process PATH: \\\\`$bin_path\\\\`. Note:
  This change will be visible only when sourcing script.\\\"\\n    export
  PATH=\\\"$bin_path\\\":\\\"$PATH\\\"\\nelse\\n    say \\\"Binaries of dotnet
  can be found in $bin_path\\\"\\nfi\\n\\nsay \\\"Note that the script does not
  resolve dependencies during installation.\\\"\\nsay \\\"To check the list of
  dependencies, go to https://learn.microsoft.com/dotnet/core/install, select
  your operating system and check the \\\\\\\"Dependencies\\\\\\\"
  section.\\\"\\nsay \\\"Installation finished
  successfully.\\\"\\n\",\"installed\":[\"7.0.9\",\"7.0.10\",\"7.0.15~x64\"],\"\
  axios-cache:1460287405\":{\"state\":\"cached\",\"ttl\":60000000,\"createdAt\"\
  :1705412252964,\"data\":{\"data\":{\"$schema\":\"https://json.schemastore.org\
  /dotnet-releases-index.json\",\"releases-index\":[{\"channel-version\":\"8.0\
  \",\"latest-release\":\"8.0.1\",\"latest-release-date\":\"2024-01-09\",\"secu\
  rity\":true,\"latest-runtime\":\"8.0.1\",\"latest-sdk\":\"8.0.101\",\"product\
  \":\".NET\",\"release-type\":\"lts\",\"support-phase\":\"active\",\"eol-date\
  \":\"2026-11-10\",\"releases.json\":\"https://dotnetcli.blob.core.windows.net\
  /dotnet/release-metadata/8.0/releases.json\"},{\"channel-version\":\"7.0\",\"\
  latest-release\":\"7.0.15\",\"latest-release-date\":\"2024-01-09\",\"security\
  \":true,\"latest-runtime\":\"7.0.15\",\"latest-sdk\":\"7.0.405\",\"product\":\
  \".NET\",\"release-type\":\"sts\",\"support-phase\":\"maintenance\",\"eol-date\
  \":\"2024-05-24\",\"releases.json\":\"https://dotnetcli.blob.core.windows.net\
  /dotnet/release-metadata/7.0/releases.json\"},{\"channel-version\":\"6.0\",\"\
  latest-release\":\"6.0.26\",\"latest-release-date\":\"2024-01-09\",\"security\
  \":true,\"latest-runtime\":\"6.0.26\",\"latest-sdk\":\"6.0.418\",\"product\":\
  \".NET\",\"release-type\":\"lts\",\"support-phase\":\"active\",\"eol-date\":\
  \"2024-11-12\",\"releases.json\":\"https://dotnetcli.blob.core.windows.net/do\
  tnet/release-metadata/6.0/releases.json\"},{\"channel-version\":\"5.0\",\"lat\
  est-release\":\"5.0.17\",\"latest-release-date\":\"2022-05-10\",\"security\":\
  true,\"latest-runtime\":\"5.0.17\",\"latest-sdk\":\"5.0.408\",\"product\":\".\
  NET\",\"release-type\":\"sts\",\"support-phase\":\"eol\",\"eol-date\":\"2022-\
  05-10\",\"releases.json\":\"https://dotnetcli.blob.core.windows.net/dotnet/re\
  lease-metadata/5.0/releases.json\"},{\"channel-version\":\"3.1\",\"latest-rel\
  ease\":\"3.1.32\",\"latest-release-date\":\"2022-12-13\",\"security\":true,\"\
  latest-runtime\":\"3.1.32\",\"latest-sdk\":\"3.1.426\",\"product\":\".NET
  Core\",\"release-type\":\"lts\",\"support-phase\":\"eol\",\"eol-date\":\"2022\
  -12-13\",\"releases.json\":\"https://dotnetcli.blob.core.windows.net/dotnet/r\
  elease-metadata/3.1/releases.json\"},{\"channel-version\":\"3.0\",\"latest-re\
  lease\":\"3.0.3\",\"latest-release-date\":\"2020-02-18\",\"security\":false,\
  \"latest-runtime\":\"3.0.3\",\"latest-sdk\":\"3.0.103\",\"product\":\".NET
  Core\",\"release-type\":\"sts\",\"support-phase\":\"eol\",\"eol-date\":\"2020\
  -03-03\",\"releases.json\":\"https://dotnetcli.blob.core.windows.net/dotnet/r\
  elease-metadata/3.0/releases.json\"},{\"channel-version\":\"2.1\",\"latest-re\
  lease\":\"2.1.30\",\"latest-release-date\":\"2021-08-19\",\"security\":true,\
  \"latest-runtime\":\"2.1.30\",\"latest-sdk\":\"2.1.818\",\"product\":\".NET
  Core\",\"release-type\":\"lts\",\"support-phase\":\"eol\",\"eol-date\":\"2021\
  -08-21\",\"releases.json\":\"https://dotnetcli.blob.core.windows.net/dotnet/r\
  elease-metadata/2.1/releases.json\"},{\"channel-version\":\"2.2\",\"latest-re\
  lease\":\"2.2.8\",\"latest-release-date\":\"2019-11-19\",\"security\":true,\"\
  latest-runtime\":\"2.2.8\",\"latest-sdk\":\"2.2.207\",\"product\":\".NET
  Core\",\"release-type\":\"sts\",\"support-phase\":\"eol\",\"eol-date\":\"2019\
  -12-23\",\"releases.json\":\"https://dotnetcli.blob.core.windows.net/dotnet/r\
  elease-metadata/2.2/releases.json\"},{\"channel-version\":\"2.0\",\"latest-re\
  lease\":\"2.0.9\",\"latest-release-date\":\"2018-07-10\",\"security\":true,\"\
  latest-runtime\":\"2.0.9\",\"latest-sdk\":\"2.1.202\",\"product\":\".NET
  Core\",\"release-type\":\"sts\",\"support-phase\":\"eol\",\"eol-date\":\"2018\
  -10-01\",\"releases.json\":\"https://dotnetcli.blob.core.windows.net/dotnet/r\
  elease-metadata/2.0/releases.json\"},{\"channel-version\":\"1.1\",\"latest-re\
  lease\":\"1.1.13\",\"latest-release-date\":\"2019-05-14\",\"security\":true,\
  \"latest-runtime\":\"1.1.13\",\"latest-sdk\":\"1.1.14\",\"product\":\".NET
  Core\",\"release-type\":\"lts\",\"support-phase\":\"eol\",\"eol-date\":\"2019\
  -06-27\",\"releases.json\":\"https://dotnetcli.blob.core.windows.net/dotnet/r\
  elease-metadata/1.1/releases.json\"},{\"channel-version\":\"1.0\",\"latest-re\
  lease\":\"1.0.16\",\"latest-release-date\":\"2019-05-14\",\"security\":true,\
  \"latest-runtime\":\"1.0.16\",\"latest-sdk\":\"1.1.14\",\"product\":\".NET
  Core\",\"release-type\":\"lts\",\"support-phase\":\"eol\",\"eol-date\":\"2019\
  -06-27\",\"releases.json\":\"https://dotnetcli.blob.core.windows.net/dotnet/r\
  elease-metadata/1.0/releases.json\"}]},\"status\":200,\"statusText\":\"OK\",\
  \"headers\":{\"content-length\":\"5894\",\"content-type\":\"application/json\
  \",\"content-md5\":\"BNLxc8M8J/h0e55OjqaQ5Q==\",\"last-modified\":\"Tue, 09
  Jan 2024 21:09:25
  GMT\",\"etag\":\"0x8DC1157425DF63D\",\"server\":\"Windows-Azure-Blob/1.0
  Microsoft-HTTPAPI/2.0\",\"x-ms-request-id\":\"c915d72a-c01e-007d-3281-48a4a10\
  00000\",\"x-ms-version\":\"2009-09-19\",\"x-ms-lease-status\":\"unlocked\",\"\
  x-ms-blob-type\":\"BlockBlob\",\"date\":\"Tue, 16 Jan 2024 13:37:31
  GMT\",\"x-axios-cache-stale-if-error\":\"60000000\"}}},\"axios-cache:235451418\
  \":{\"state\":\"cached\",\"ttl\":300000,\"createdAt\":1705412255483,\"data\":{\
  \"data\":\"#!/usr/bin/env bash\\n# Copyright (c) .NET Foundation and
  contributors. All rights reserved.\\n# Licensed under the MIT license. See
  LICENSE file in the project root for full license information.\\n#\\n\\n# Stop
  script on NZEC\\nset -e\\n# Stop script if unbound variable found (use
  ${var:-} if intentional)\\nset -u\\n# By default cmd1 | cmd2 returns exit code
  of cmd2 regardless of cmd1 success\\n# This is causing it to fail\\nset -o
  pipefail\\n\\n# Use in the the functions: eval
  $invocation\\ninvocation='say_verbose \\\"Calling: ${yellow:-}${FUNCNAME[0]}
  ${green:-}$*${normal:-}\\\"'\\n\\n# standard output may be used as a return
  value in the functions\\n# we need a way to write text on the screen in the
  functions so that\\n# it won't interfere with the return value.\\n# Exposing
  stream 3 as a pipe to standard output of the script itself\\nexec 3>&1\\n\\n#
  Setup some colors to use. These need to work in fairly limited shells, like
  the Ubuntu Docker container where there are only 8 colors.\\n# See if stdout
  is a terminal\\nif [ -t 1 ] && command -v tput > /dev/null; then\\n    # see
  if it supports colors\\n    ncolors=$(tput colors || echo 0)\\n    if [ -n
  \\\"$ncolors\\\" ] && [ $ncolors -ge 8 ]; then\\n        bold=\\\"$(tput
  bold       || echo)\\\"\\n        normal=\\\"$(tput sgr0     ||
  echo)\\\"\\n        black=\\\"$(tput setaf 0   ||
  echo)\\\"\\n        red=\\\"$(tput setaf 1     ||
  echo)\\\"\\n        green=\\\"$(tput setaf 2   ||
  echo)\\\"\\n        yellow=\\\"$(tput setaf 3  ||
  echo)\\\"\\n        blue=\\\"$(tput setaf 4    ||
  echo)\\\"\\n        magenta=\\\"$(tput setaf 5 ||
  echo)\\\"\\n        cyan=\\\"$(tput setaf 6    ||
  echo)\\\"\\n        white=\\\"$(tput setaf 7   ||
  echo)\\\"\\n    fi\\nfi\\n\\nsay_warning() {\\n    printf \\\"%b\\\\n\\\"
  \\\"${yellow:-}dotnet_install: Warning: $1${normal:-}\\\"
  >&3\\n}\\n\\nsay_err() {\\n    printf \\\"%b\\\\n\\\"
  \\\"${red:-}dotnet_install: Error: $1${normal:-}\\\" >&2\\n}\\n\\nsay()
  {\\n    # using stream 3 (defined in the beginning) to not interfere with
  stdout of functions\\n    # which may be used as return value\\n    printf
  \\\"%b\\\\n\\\" \\\"${cyan:-}dotnet-install:${normal:-} $1\\\"
  >&3\\n}\\n\\nsay_verbose() {\\n    if [ \\\"$verbose\\\" = true ];
  then\\n        say \\\"$1\\\"\\n    fi\\n}\\n\\n# This platform list is finite
  - if the SDK/Runtime has supported Linux distribution-specific
  assets,\\n#   then and only then should the Linux distribution appear in this
  list.\\n# Adding a Linux distribution to this list does not imply
  distribution-specific support.\\nget_legacy_os_name_from_platform()
  {\\n    eval $invocation\\n\\n    platform=\\\"$1\\\"\\n    case
  \\\"$platform\\\" in\\n        \\\"centos.7\\\")\\n            echo
  \\\"centos\\\"\\n            return
  0\\n            ;;\\n        \\\"debian.8\\\")\\n            echo
  \\\"debian\\\"\\n            return
  0\\n            ;;\\n        \\\"debian.9\\\")\\n            echo
  \\\"debian.9\\\"\\n            return
  0\\n            ;;\\n        \\\"fedora.23\\\")\\n            echo
  \\\"fedora.23\\\"\\n            return
  0\\n            ;;\\n        \\\"fedora.24\\\")\\n            echo
  \\\"fedora.24\\\"\\n            return
  0\\n            ;;\\n        \\\"fedora.27\\\")\\n            echo
  \\\"fedora.27\\\"\\n            return
  0\\n            ;;\\n        \\\"fedora.28\\\")\\n            echo
  \\\"fedora.28\\\"\\n            return
  0\\n            ;;\\n        \\\"opensuse.13.2\\\")\\n            echo
  \\\"opensuse.13.2\\\"\\n            return
  0\\n            ;;\\n        \\\"opensuse.42.1\\\")\\n            echo
  \\\"opensuse.42.1\\\"\\n            return
  0\\n            ;;\\n        \\\"opensuse.42.3\\\")\\n            echo
  \\\"opensuse.42.3\\\"\\n            return
  0\\n            ;;\\n        \\\"rhel.7\\\"*)\\n            echo
  \\\"rhel\\\"\\n            return
  0\\n            ;;\\n        \\\"ubuntu.14.04\\\")\\n            echo
  \\\"ubuntu\\\"\\n            return
  0\\n            ;;\\n        \\\"ubuntu.16.04\\\")\\n            echo
  \\\"ubuntu.16.04\\\"\\n            return
  0\\n            ;;\\n        \\\"ubuntu.16.10\\\")\\n            echo
  \\\"ubuntu.16.10\\\"\\n            return
  0\\n            ;;\\n        \\\"ubuntu.18.04\\\")\\n            echo
  \\\"ubuntu.18.04\\\"\\n            return
  0\\n            ;;\\n        \\\"alpine.3.4.3\\\")\\n            echo
  \\\"alpine\\\"\\n            return 0\\n            ;;\\n    esac\\n    return
  1\\n}\\n\\nget_legacy_os_name() {\\n    eval $invocation\\n\\n    local
  uname=$(uname)\\n    if [ \\\"$uname\\\" = \\\"Darwin\\\" ];
  then\\n        echo \\\"osx\\\"\\n        return 0\\n    elif [ -n
  \\\"$runtime_id\\\" ]; then\\n        echo $(get_legacy_os_name_from_platform
  \\\"${runtime_id%-*}\\\" || echo \\\"${runtime_id%-*}\\\")\\n        return
  0\\n    else\\n        if [ -e /etc/os-release ]; then\\n            .
  /etc/os-release\\n            os=$(get_legacy_os_name_from_platform
  \\\"$ID${VERSION_ID:+.${VERSION_ID}}\\\" || echo \\\"\\\")\\n            if [
  -n \\\"$os\\\" ]; then\\n                echo
  \\\"$os\\\"\\n                return
  0\\n            fi\\n        fi\\n    fi\\n\\n    say_verbose \\\"Distribution
  specific OS name and version could not be detected: UName =
  $uname\\\"\\n    return 1\\n}\\n\\nget_linux_platform_name() {\\n    eval
  $invocation\\n\\n    if [ -n \\\"$runtime_id\\\" ]; then\\n        echo
  \\\"${runtime_id%-*}\\\"\\n        return 0\\n    else\\n        if [ -e
  /etc/os-release ]; then\\n            . /etc/os-release\\n            echo
  \\\"$ID${VERSION_ID:+.${VERSION_ID}}\\\"\\n            return 0\\n        elif
  [ -e /etc/redhat-release ]; then\\n            local
  redhatRelease=$(</etc/redhat-release)\\n            if [[ $redhatRelease ==
  \\\"CentOS release 6.\\\"* || $redhatRelease == \\\"Red Hat Enterprise Linux
  \\\"*\\\" release 6.\\\"* ]]; then\\n                echo
  \\\"rhel.6\\\"\\n                return
  0\\n            fi\\n        fi\\n    fi\\n\\n    say_verbose \\\"Linux
  specific platform name and version could not be detected: UName =
  $uname\\\"\\n    return 1\\n}\\n\\nis_musl_based_distro() {\\n    (ldd
  --version 2>&1 || true) | grep -q musl\\n}\\n\\nget_current_os_name()
  {\\n    eval $invocation\\n\\n    local uname=$(uname)\\n    if [
  \\\"$uname\\\" = \\\"Darwin\\\" ]; then\\n        echo
  \\\"osx\\\"\\n        return 0\\n    elif [ \\\"$uname\\\" = \\\"FreeBSD\\\"
  ]; then\\n        echo \\\"freebsd\\\"\\n        return 0\\n    elif [
  \\\"$uname\\\" = \\\"Linux\\\" ]; then\\n        local
  linux_platform_name=\\\"\\\"\\n        linux_platform_name=\\\"$(get_linux_pl\
  atform_name)\\\" || true\\n\\n        if [ \\\"$linux_platform_name\\\" =
  \\\"rhel.6\\\" ]; then\\n            echo
  $linux_platform_name\\n            return 0\\n        elif
  is_musl_based_distro; then\\n            echo
  \\\"linux-musl\\\"\\n            return 0\\n        elif [
  \\\"$linux_platform_name\\\" = \\\"linux-musl\\\" ]; then\\n            echo
  \\\"linux-musl\\\"\\n            return 0\\n        else\\n            echo
  \\\"linux\\\"\\n            return 0\\n        fi\\n    fi\\n\\n    say_err
  \\\"OS name could not be detected: UName = $uname\\\"\\n    return
  1\\n}\\n\\nmachine_has() {\\n    eval $invocation\\n\\n    command -v
  \\\"$1\\\" > /dev/null 2>&1\\n    return $?\\n}\\n\\ncheck_min_reqs()
  {\\n    local hasMinimum=false\\n    if machine_has \\\"curl\\\";
  then\\n        hasMinimum=true\\n    elif machine_has \\\"wget\\\";
  then\\n        hasMinimum=true\\n    fi\\n\\n    if [ \\\"$hasMinimum\\\" =
  \\\"false\\\" ]; then\\n        say_err \\\"curl (recommended) or wget are
  required to download dotnet. Install missing prerequisite to
  proceed.\\\"\\n        return 1\\n    fi\\n    return 0\\n}\\n\\n# args:\\n#
  input - $1\\nto_lowercase() {\\n    #eval $invocation\\n\\n    echo \\\"$1\\\"
  | tr '[:upper:]' '[:lower:]'\\n    return 0\\n}\\n\\n# args:\\n# input -
  $1\\nremove_trailing_slash() {\\n    #eval $invocation\\n\\n    local
  input=\\\"${1:-}\\\"\\n    echo \\\"${input%/}\\\"\\n    return 0\\n}\\n\\n#
  args:\\n# input - $1\\nremove_beginning_slash() {\\n    #eval
  $invocation\\n\\n    local input=\\\"${1:-}\\\"\\n    echo
  \\\"${input#/}\\\"\\n    return 0\\n}\\n\\n# args:\\n# root_path - $1\\n#
  child_path - $2 - this parameter can be empty\\ncombine_paths() {\\n    eval
  $invocation\\n\\n    # TODO: Consider making it work with any number of paths.
  For now:\\n    if [ ! -z \\\"${3:-}\\\" ]; then\\n        say_err
  \\\"combine_paths: Function takes two parameters.\\\"\\n        return
  1\\n    fi\\n\\n    local root_path=\\\"$(remove_trailing_slash
  \\\"$1\\\")\\\"\\n    local child_path=\\\"$(remove_beginning_slash
  \\\"${2:-}\\\")\\\"\\n    say_verbose \\\"combine_paths:
  root_path=$root_path\\\"\\n    say_verbose \\\"combine_paths:
  child_path=$child_path\\\"\\n    echo
  \\\"$root_path/$child_path\\\"\\n    return
  0\\n}\\n\\nget_machine_architecture() {\\n    eval $invocation\\n\\n    if
  command -v uname > /dev/null; then\\n        CPUName=$(uname
  -m)\\n        case $CPUName in\\n        armv*l)\\n            echo
  \\\"arm\\\"\\n            return
  0\\n            ;;\\n        aarch64|arm64)\\n            echo
  \\\"arm64\\\"\\n            return
  0\\n            ;;\\n        s390x)\\n            echo
  \\\"s390x\\\"\\n            return
  0\\n            ;;\\n        ppc64le)\\n            echo
  \\\"ppc64le\\\"\\n            return
  0\\n            ;;\\n        loongarch64)\\n            echo
  \\\"loongarch64\\\"\\n            return
  0\\n            ;;\\n        esac\\n    fi\\n\\n    # Always default to
  'x64'\\n    echo \\\"x64\\\"\\n    return 0\\n}\\n\\n# args:\\n# architecture
  - $1\\nget_normalized_architecture_from_architecture() {\\n    eval
  $invocation\\n\\n    local architecture=\\\"$(to_lowercase
  \\\"$1\\\")\\\"\\n\\n    if [[ $architecture == \\\\<auto\\\\> ]];
  then\\n        echo \\\"$(get_machine_architecture)\\\"\\n        return
  0\\n    fi\\n\\n    case \\\"$architecture\\\"
  in\\n        amd64|x64)\\n            echo \\\"x64\\\"\\n            return
  0\\n            ;;\\n        arm)\\n            echo
  \\\"arm\\\"\\n            return
  0\\n            ;;\\n        arm64)\\n            echo
  \\\"arm64\\\"\\n            return
  0\\n            ;;\\n        s390x)\\n            echo
  \\\"s390x\\\"\\n            return
  0\\n            ;;\\n        ppc64le)\\n            echo
  \\\"ppc64le\\\"\\n            return
  0\\n            ;;\\n        loongarch64)\\n            echo
  \\\"loongarch64\\\"\\n            return
  0\\n            ;;\\n    esac\\n\\n    say_err \\\"Architecture
  \\\\`$architecture\\\\` not supported. If you think this is a bug, report it
  at https://github.com/dotnet/install-scripts/issues\\\"\\n    return
  1\\n}\\n\\n# args:\\n# version - $1\\n# channel - $2\\n# architecture -
  $3\\nget_normalized_architecture_for_specific_sdk_version() {\\n    eval
  $invocation\\n\\n    local is_version_support_arm64=\\\"$(is_arm64_supported
  \\\"$1\\\")\\\"\\n    local is_channel_support_arm64=\\\"$(is_arm64_supported
  \\\"$2\\\")\\\"\\n    local architecture=\\\"$3\\\";\\n    local
  osname=\\\"$(get_current_os_name)\\\"\\n\\n    if [ \\\"$osname\\\" ==
  \\\"osx\\\" ] && [ \\\"$architecture\\\" == \\\"arm64\\\" ] && { [
  \\\"$is_version_support_arm64\\\" = false ] || [
  \\\"$is_channel_support_arm64\\\" = false ]; }; then\\n        #check if
  rosetta is installed\\n        if [ \\\"$(/usr/bin/pgrep oahd >/dev/null
  2>&1;echo $?)\\\" -eq 0 ]; then \\n            say_verbose \\\"Changing user
  architecture from '$architecture' to 'x64' because .NET SDKs prior to version
  6.0 do not support arm64.\\\" \\n            echo
  \\\"x64\\\"\\n            return 0;\\n        else\\n            say_err
  \\\"Architecture \\\\`$architecture\\\\` is not supported for .NET SDK version
  \\\\`$version\\\\`. Please install Rosetta to allow emulation of the
  \\\\`$architecture\\\\` .NET SDK on this platform\\\"\\n            return
  1\\n        fi\\n    fi\\n\\n    echo \\\"$architecture\\\"\\n    return
  0\\n}\\n\\n# args:\\n# version or channel - $1\\nis_arm64_supported()
  {\\n    #any channel or version that starts with the specified
  versions\\n    case \\\"$1\\\" in\\n        ( \\\"1\\\"* | \\\"2\\\"* |
  \\\"3\\\"*  | \\\"4\\\"* | \\\"5\\\"*) \\n            echo
  false\\n            return 0\\n    esac\\n\\n    echo true\\n    return
  0\\n}\\n\\n# args:\\n# user_defined_os - $1\\nget_normalized_os() {\\n    eval
  $invocation\\n\\n    local osname=\\\"$(to_lowercase \\\"$1\\\")\\\"\\n    if
  [ ! -z \\\"$osname\\\" ]; then\\n        case \\\"$osname\\\"
  in\\n            osx | freebsd | rhel.6 | linux-musl |
  linux)\\n                echo \\\"$osname\\\"\\n                return
  0\\n                ;;\\n            macos)\\n                osname='osx'\\n                \
  echo \\\"$osname\\\"\\n                return
  0\\n                ;;\\n            *)\\n                say_err
  \\\"'$user_defined_os' is not a supported value for --os option, supported
  values are: osx, macos, linux, linux-musl, freebsd, rhel.6. If you think this
  is a bug, report it at
  https://github.com/dotnet/install-scripts/issues.\\\"\\n                return
  1\\n                ;;\\n        esac\\n    else\\n        osname=\\\"$(get_c\
  urrent_os_name)\\\" || return 1\\n    fi\\n    echo
  \\\"$osname\\\"\\n    return 0\\n}\\n\\n# args:\\n# quality -
  $1\\nget_normalized_quality() {\\n    eval $invocation\\n\\n    local
  quality=\\\"$(to_lowercase \\\"$1\\\")\\\"\\n    if [ ! -z \\\"$quality\\\" ];
  then\\n        case \\\"$quality\\\" in\\n            daily | signed |
  validated | preview)\\n                echo
  \\\"$quality\\\"\\n                return
  0\\n                ;;\\n            ga)\\n                #ga quality is
  available without specifying quality, so normalizing it to
  empty\\n                return
  0\\n                ;;\\n            *)\\n                say_err
  \\\"'$quality' is not a supported value for --quality option. Supported values
  are: daily, signed, validated, preview, ga. If you think this is a bug, report
  it at
  https://github.com/dotnet/install-scripts/issues.\\\"\\n                return
  1\\n                ;;\\n        esac\\n    fi\\n    return 0\\n}\\n\\n#
  args:\\n# channel - $1\\nget_normalized_channel() {\\n    eval
  $invocation\\n\\n    local channel=\\\"$(to_lowercase
  \\\"$1\\\")\\\"\\n\\n    if [[ $channel == current ]];
  then\\n        say_warning 'Value \\\"Current\\\" is deprecated for -Channel
  option. Use \\\"STS\\\" instead.'\\n    fi\\n\\n    if [[ $channel ==
  release/* ]]; then\\n        say_warning 'Using branch name with -Channel
  option is no longer supported with newer releases. Use -Quality option with a
  channel in X.Y format instead.';\\n    fi\\n\\n    if [ ! -z \\\"$channel\\\"
  ]; then\\n        case \\\"$channel\\\"
  in\\n            lts)\\n                echo
  \\\"LTS\\\"\\n                return
  0\\n                ;;\\n            sts)\\n                echo
  \\\"STS\\\"\\n                return
  0\\n                ;;\\n            current)\\n                echo
  \\\"STS\\\"\\n                return
  0\\n                ;;\\n            *)\\n                echo
  \\\"$channel\\\"\\n                return
  0\\n                ;;\\n        esac\\n    fi\\n\\n    return 0\\n}\\n\\n#
  args:\\n# runtime - $1\\nget_normalized_product() {\\n    eval
  $invocation\\n\\n    local product=\\\"\\\"\\n    local
  runtime=\\\"$(to_lowercase \\\"$1\\\")\\\"\\n    if [[ \\\"$runtime\\\" ==
  \\\"dotnet\\\" ]]; then\\n        product=\\\"dotnet-runtime\\\"\\n    elif [[
  \\\"$runtime\\\" == \\\"aspnetcore\\\" ]];
  then\\n        product=\\\"aspnetcore-runtime\\\"\\n    elif [ -z
  \\\"$runtime\\\" ];
  then\\n        product=\\\"dotnet-sdk\\\"\\n    fi\\n    echo
  \\\"$product\\\"\\n    return 0\\n}\\n\\n# The version text returned from the
  feeds is a 1-line or 2-line string:\\n# For the SDK and the dotnet runtime (2
  lines):\\n# Line 1: # commit_hash\\n# Line 2: # 4-part version\\n# For the
  aspnetcore runtime (1 line):\\n# Line 1: # 4-part version\\n\\n# args:\\n#
  version_text - stdin\\nget_version_from_latestversion_file_content()
  {\\n    eval $invocation\\n\\n    cat | tail -n 1 | sed
  's/\\\\r$//'\\n    return 0\\n}\\n\\n# args:\\n# install_root - $1\\n#
  relative_path_to_package - $2\\n# specific_version -
  $3\\nis_dotnet_package_installed() {\\n    eval $invocation\\n\\n    local
  install_root=\\\"$1\\\"\\n    local
  relative_path_to_package=\\\"$2\\\"\\n    local
  specific_version=\\\"${3//[$'\\\\t\\\\r\\\\n']}\\\"\\n\\n    local
  dotnet_package_path=\\\"$(combine_paths \\\"$(combine_paths
  \\\"$install_root\\\" \\\"$relative_path_to_package\\\")\\\"
  \\\"$specific_version\\\")\\\"\\n    say_verbose
  \\\"is_dotnet_package_installed:
  dotnet_package_path=$dotnet_package_path\\\"\\n\\n    if [ -d
  \\\"$dotnet_package_path\\\" ]; then\\n        return
  0\\n    else\\n        return 1\\n    fi\\n}\\n\\n# args:\\n# downloaded file
  - $1\\n# remote_file_size - $2\\nvalidate_remote_local_file_sizes()
  \\n{\\n    eval $invocation\\n\\n    local
  downloaded_file=\\\"$1\\\"\\n    local remote_file_size=\\\"$2\\\"\\n    local
  file_size=''\\n\\n    if [[ \\\"$OSTYPE\\\" == \\\"linux-gnu\\\"* ]];
  then\\n        file_size=\\\"$(stat -c '%s'
  \\\"$downloaded_file\\\")\\\"\\n    elif [[ \\\"$OSTYPE\\\" == \\\"darwin\\\"*
  ]]; then\\n        # hardcode in order to avoid conflicts with GNU
  stat\\n        file_size=\\\"$(/usr/bin/stat -f '%z'
  \\\"$downloaded_file\\\")\\\"\\n    fi  \\n    \\n    if [ -n
  \\\"$file_size\\\" ]; then\\n        say \\\"Downloaded file size is
  $file_size bytes.\\\"\\n\\n        if [ -n \\\"$remote_file_size\\\" ] && [ -n
  \\\"$file_size\\\" ]; then\\n            if [ \\\"$remote_file_size\\\" -ne
  \\\"$file_size\\\" ]; then\\n                say \\\"The remote and local file
  sizes are not equal. The remote file size is $remote_file_size bytes and the
  local size is $file_size bytes. The local package may be
  corrupted.\\\"\\n            else\\n                say \\\"The remote and
  local file sizes are
  equal.\\\"\\n            fi\\n        fi\\n        \\n    else\\n        say
  \\\"Either downloaded or local package size can not be measured. One of them
  may be corrupted.\\\"      \\n    fi \\n}\\n\\n# args:\\n# azure_feed - $1\\n#
  channel - $2\\n# normalized_architecture -
  $3\\nget_version_from_latestversion_file() {\\n    eval
  $invocation\\n\\n    local azure_feed=\\\"$1\\\"\\n    local
  channel=\\\"$2\\\"\\n    local
  normalized_architecture=\\\"$3\\\"\\n\\n    local
  version_file_url=null\\n    if [[ \\\"$runtime\\\" == \\\"dotnet\\\" ]];
  then\\n        version_file_url=\\\"$azure_feed/Runtime/$channel/latest.versi\
  on\\\"\\n    elif [[ \\\"$runtime\\\" == \\\"aspnetcore\\\" ]];
  then\\n        version_file_url=\\\"$azure_feed/aspnetcore/Runtime/$channel/l\
  atest.version\\\"\\n    elif [ -z \\\"$runtime\\\" ];
  then\\n         version_file_url=\\\"$azure_feed/Sdk/$channel/latest.version\\\
  \"\\n    else\\n        say_err \\\"Invalid value for
  \\\\$runtime\\\"\\n        return 1\\n    fi\\n    say_verbose
  \\\"get_version_from_latestversion_file: latest url:
  $version_file_url\\\"\\n\\n    download \\\"$version_file_url\\\" || return
  $?\\n    return 0\\n}\\n\\n# args:\\n# json_file -
  $1\\nparse_globaljson_file_for_version() {\\n    eval
  $invocation\\n\\n    local json_file=\\\"$1\\\"\\n    if [ ! -f
  \\\"$json_file\\\" ]; then\\n        say_err \\\"Unable to find
  \\\\`$json_file\\\\`\\\"\\n        return
  1\\n    fi\\n\\n    sdk_section=$(cat $json_file | tr -d \\\"\\\\r\\\" | awk
  '/\\\"sdk\\\"/,/}/')\\n    if [ -z \\\"$sdk_section\\\" ];
  then\\n        say_err \\\"Unable to parse the SDK node in
  \\\\`$json_file\\\\`\\\"\\n        return 1\\n    fi\\n\\n    sdk_list=$(echo
  $sdk_section | awk -F\\\"[{}]\\\" '{print
  $2}')\\n    sdk_list=${sdk_list//[\\\\\\\"
  ]/}\\n    sdk_list=${sdk_list//,/$'\\\\n'}\\n\\n    local
  version_info=\\\"\\\"\\n    while read -r line; do\\n      IFS=:\\n      while
  read -r key value; do\\n        if [[ \\\"$key\\\" == \\\"version\\\" ]];
  then\\n          version_info=$value\\n        fi\\n      done <<<
  \\\"$line\\\"\\n    done <<< \\\"$sdk_list\\\"\\n    if [ -z
  \\\"$version_info\\\" ]; then\\n        say_err \\\"Unable to find the
  SDK:version node in \\\\`$json_file\\\\`\\\"\\n        return
  1\\n    fi\\n\\n    unset IFS;\\n    echo \\\"$version_info\\\"\\n    return
  0\\n}\\n\\n# args:\\n# azure_feed - $1\\n# channel - $2\\n#
  normalized_architecture - $3\\n# version - $4\\n# json_file -
  $5\\nget_specific_version_from_version() {\\n    eval
  $invocation\\n\\n    local azure_feed=\\\"$1\\\"\\n    local
  channel=\\\"$2\\\"\\n    local normalized_architecture=\\\"$3\\\"\\n    local
  version=\\\"$(to_lowercase \\\"$4\\\")\\\"\\n    local
  json_file=\\\"$5\\\"\\n\\n    if [ -z \\\"$json_file\\\" ]; then\\n        if
  [[ \\\"$version\\\" == \\\"latest\\\" ]]; then\\n            local
  version_info\\n            version_info=\\\"$(get_version_from_latestversion_\
  file \\\"$azure_feed\\\" \\\"$channel\\\" \\\"$normalized_architecture\\\"
  false)\\\" || return 1\\n            say_verbose
  \\\"get_specific_version_from_version:
  version_info=$version_info\\\"\\n            echo \\\"$version_info\\\" |
  get_version_from_latestversion_file_content\\n            return
  0\\n        else\\n            echo \\\"$version\\\"\\n            return
  0\\n        fi\\n    else\\n        local
  version_info\\n        version_info=\\\"$(parse_globaljson_file_for_version
  \\\"$json_file\\\")\\\" || return 1\\n        echo
  \\\"$version_info\\\"\\n        return 0\\n    fi\\n}\\n\\n# args:\\n#
  azure_feed - $1\\n# channel - $2\\n# normalized_architecture - $3\\n#
  specific_version - $4\\n# normalized_os - $5\\nconstruct_download_link()
  {\\n    eval $invocation\\n\\n    local azure_feed=\\\"$1\\\"\\n    local
  channel=\\\"$2\\\"\\n    local normalized_architecture=\\\"$3\\\"\\n    local
  specific_version=\\\"${4//[$'\\\\t\\\\r\\\\n']}\\\"\\n    local
  specific_product_version=\\\"$(get_specific_product_version \\\"$1\\\"
  \\\"$4\\\")\\\"\\n    local osname=\\\"$5\\\"\\n\\n    local
  download_link=null\\n    if [[ \\\"$runtime\\\" == \\\"dotnet\\\" ]];
  then\\n        download_link=\\\"$azure_feed/Runtime/$specific_version/dotnet\
  -runtime-$specific_product_version-$osname-$normalized_architecture.tar.gz\\\"\
  \\n    elif [[ \\\"$runtime\\\" == \\\"aspnetcore\\\" ]];
  then\\n        download_link=\\\"$azure_feed/aspnetcore/Runtime/$specific_ver\
  sion/aspnetcore-runtime-$specific_product_version-$osname-$normalized_archite\
  cture.tar.gz\\\"\\n    elif [ -z \\\"$runtime\\\" ];
  then\\n        download_link=\\\"$azure_feed/Sdk/$specific_version/dotnet-sdk\
  -$specific_product_version-$osname-$normalized_architecture.tar.gz\\\"\\n    \
  else\\n        return 1\\n    fi\\n\\n    echo
  \\\"$download_link\\\"\\n    return 0\\n}\\n\\n# args:\\n# azure_feed - $1\\n#
  specific_version - $2\\n# download link - $3
  (optional)\\nget_specific_product_version() {\\n    # If we find a
  'productVersion.txt' at the root of any folder, we'll use its contents\\n    #
  to resolve the version of what's in the folder, superseding the specified
  version.\\n    # if 'productVersion.txt' is missing but download link is
  already available, product version will be taken from download link\\n    eval
  $invocation\\n\\n    local azure_feed=\\\"$1\\\"\\n    local
  specific_version=\\\"${2//[$'\\\\t\\\\r\\\\n']}\\\"\\n    local
  package_download_link=\\\"\\\"\\n    if [ $# -gt 2  ]; then\\n        local
  package_download_link=\\\"$3\\\"\\n    fi\\n    local
  specific_product_version=null\\n\\n    # Try to get the version number, using
  the productVersion.txt file located next to the installer file.\\n    local
  download_links=($(get_specific_product_version_url \\\"$azure_feed\\\"
  \\\"$specific_version\\\" true
  \\\"$package_download_link\\\")\\n        $(get_specific_product_version_url
  \\\"$azure_feed\\\" \\\"$specific_version\\\" false
  \\\"$package_download_link\\\"))\\n\\n    for download_link in
  \\\"${download_links[@]}\\\"\\n    do\\n        say_verbose \\\"Checking for
  the existence of $download_link\\\"\\n\\n        if machine_has
  \\\"curl\\\"\\n        then\\n            if ! specific_product_version=$(curl
  -s --fail \\\"${download_link}${feed_credential}\\\" 2>&1);
  then\\n                continue\\n            else\\n                echo
  \\\"${specific_product_version//[$'\\\\t\\\\r\\\\n']}\\\"\\n                r\
  eturn 0\\n            fi\\n\\n        elif machine_has
  \\\"wget\\\"\\n        then\\n            specific_product_version=$(wget -qO-
  \\\"${download_link}${feed_credential}\\\" 2>&1)\\n            if [ $? = 0 ];
  then\\n                echo
  \\\"${specific_product_version//[$'\\\\t\\\\r\\\\n']}\\\"\\n                r\
  eturn 0\\n            fi\\n        fi\\n    done\\n    \\n    # Getting the
  version number with productVersion.txt has failed. Try parsing the download
  link for a version number.\\n    say_verbose \\\"Failed to get the version
  using productVersion.txt file. Download link will be parsed
  instead.\\\"\\n    specific_product_version=\\\"$(get_product_specific_versio\
  n_from_download_link \\\"$package_download_link\\\"
  \\\"$specific_version\\\")\\\"\\n    echo
  \\\"${specific_product_version//[$'\\\\t\\\\r\\\\n']}\\\"\\n    return
  0\\n}\\n\\n# args:\\n# azure_feed - $1\\n# specific_version - $2\\n#
  is_flattened - $3\\n# download link - $4
  (optional)\\nget_specific_product_version_url() {\\n    eval
  $invocation\\n\\n    local azure_feed=\\\"$1\\\"\\n    local
  specific_version=\\\"$2\\\"\\n    local is_flattened=\\\"$3\\\"\\n    local
  package_download_link=\\\"\\\"\\n    if [ $# -gt 3  ]; then\\n        local
  package_download_link=\\\"$4\\\"\\n    fi\\n\\n    local
  pvFileName=\\\"productVersion.txt\\\"\\n    if [ \\\"$is_flattened\\\" = true
  ]; then\\n        if [ -z \\\"$runtime\\\" ];
  then\\n            pvFileName=\\\"sdk-productVersion.txt\\\"\\n        elif [[
  \\\"$runtime\\\" == \\\"dotnet\\\" ]];
  then\\n            pvFileName=\\\"runtime-productVersion.txt\\\"\\n        el\
  se\\n            pvFileName=\\\"$runtime-productVersion.txt\\\"\\n        fi\
  \\n    fi\\n\\n    local download_link=null\\n\\n    if [ -z
  \\\"$package_download_link\\\" ]; then\\n        if [[ \\\"$runtime\\\" ==
  \\\"dotnet\\\" ]];
  then\\n            download_link=\\\"$azure_feed/Runtime/$specific_version/${\
  pvFileName}\\\"\\n        elif [[ \\\"$runtime\\\" == \\\"aspnetcore\\\" ]];
  then\\n            download_link=\\\"$azure_feed/aspnetcore/Runtime/$specific\
  _version/${pvFileName}\\\"\\n        elif [ -z \\\"$runtime\\\" ];
  then\\n            download_link=\\\"$azure_feed/Sdk/$specific_version/${pvFi\
  leName}\\\"\\n        else\\n            return
  1\\n        fi\\n    else\\n        download_link=\\\"${package_download_link\
  %/*}/${pvFileName}\\\"\\n    fi\\n\\n    say_verbose \\\"Constructed
  productVersion link: $download_link\\\"\\n    echo
  \\\"$download_link\\\"\\n    return 0\\n}\\n\\n# args:\\n# download link -
  $1\\n# specific version -
  $2\\nget_product_specific_version_from_download_link()\\n{\\n    eval
  $invocation\\n\\n    local download_link=\\\"$1\\\"\\n    local
  specific_version=\\\"$2\\\"\\n    local specific_product_version=\\\"\\\"
  \\n\\n    if [ -z \\\"$download_link\\\" ]; then\\n        echo
  \\\"$specific_version\\\"\\n        return 0\\n    fi\\n\\n    #get
  filename\\n    filename=\\\"${download_link##*/}\\\"\\n\\n    #product
  specific version follows the product name\\n    #for filename
  'dotnet-sdk-3.1.404-linux-x64.tar.gz': the product version is
  3.1.404\\n    IFS='-'\\n    read -ra filename_elems <<<
  \\\"$filename\\\"\\n    count=${#filename_elems[@]}\\n    if [[ \\\"$count\\\"
  -gt 2 ]];
  then\\n        specific_product_version=\\\"${filename_elems[2]}\\\"\\n    el\
  se\\n        specific_product_version=$specific_version\\n    fi\\n    unset
  IFS;\\n    echo \\\"$specific_product_version\\\"\\n    return 0\\n}\\n\\n#
  args:\\n# azure_feed - $1\\n# channel - $2\\n# normalized_architecture -
  $3\\n# specific_version - $4\\nconstruct_legacy_download_link() {\\n    eval
  $invocation\\n\\n    local azure_feed=\\\"$1\\\"\\n    local
  channel=\\\"$2\\\"\\n    local normalized_architecture=\\\"$3\\\"\\n    local
  specific_version=\\\"${4//[$'\\\\t\\\\r\\\\n']}\\\"\\n\\n    local
  distro_specific_osname\\n    distro_specific_osname=\\\"$(get_legacy_os_name)\
  \\\" || return 1\\n\\n    local legacy_download_link=null\\n    if [[
  \\\"$runtime\\\" == \\\"dotnet\\\" ]];
  then\\n        legacy_download_link=\\\"$azure_feed/Runtime/$specific_version\
  /dotnet-$distro_specific_osname-$normalized_architecture.$specific_version.ta\
  r.gz\\\"\\n    elif [ -z \\\"$runtime\\\" ];
  then\\n        legacy_download_link=\\\"$azure_feed/Sdk/$specific_version/dot\
  net-dev-$distro_specific_osname-$normalized_architecture.$specific_version.ta\
  r.gz\\\"\\n    else\\n        return 1\\n    fi\\n\\n    echo
  \\\"$legacy_download_link\\\"\\n    return 0\\n}\\n\\nget_user_install_path()
  {\\n    eval $invocation\\n\\n    if [ ! -z \\\"${DOTNET_INSTALL_DIR:-}\\\" ];
  then\\n        echo \\\"$DOTNET_INSTALL_DIR\\\"\\n    else\\n        echo
  \\\"$HOME/.dotnet\\\"\\n    fi\\n    return 0\\n}\\n\\n# args:\\n# install_dir
  - $1\\nresolve_installation_path() {\\n    eval $invocation\\n\\n    local
  install_dir=$1\\n    if [ \\\"$install_dir\\\" = \\\"<auto>\\\" ];
  then\\n        local
  user_install_path=\\\"$(get_user_install_path)\\\"\\n        say_verbose
  \\\"resolve_installation_path:
  user_install_path=$user_install_path\\\"\\n        echo
  \\\"$user_install_path\\\"\\n        return 0\\n    fi\\n\\n    echo
  \\\"$install_dir\\\"\\n    return 0\\n}\\n\\n# args:\\n#
  relative_or_absolute_path - $1\\nget_absolute_path() {\\n    eval
  $invocation\\n\\n    local relative_or_absolute_path=$1\\n    echo \\\"$(cd
  \\\"$(dirname \\\"$1\\\")\\\" && pwd -P)/$(basename
  \\\"$1\\\")\\\"\\n    return 0\\n}\\n\\n# args:\\n# input_files - stdin\\n#
  root_path - $1\\n# out_path - $2\\n# override -
  $3\\ncopy_files_or_dirs_from_list() {\\n    eval $invocation\\n\\n    local
  root_path=\\\"$(remove_trailing_slash \\\"$1\\\")\\\"\\n    local
  out_path=\\\"$(remove_trailing_slash \\\"$2\\\")\\\"\\n    local
  override=\\\"$3\\\"\\n    local
  osname=\\\"$(get_current_os_name)\\\"\\n    local
  override_switch=$(\\n        if [ \\\"$override\\\" = false ];
  then\\n            if [ \\\"$osname\\\" = \\\"linux-musl\\\" ];
  then\\n                printf --
  \\\"-u\\\";\\n            else\\n                printf --
  \\\"-n\\\";\\n            fi\\n        fi)\\n\\n    cat | uniq | while read -r
  file_path; do\\n        local path=\\\"$(remove_beginning_slash
  \\\"${file_path#$root_path}\\\")\\\"\\n        local
  target=\\\"$out_path/$path\\\"\\n        if [ \\\"$override\\\" = true ] || (!
  ([ -d \\\"$target\\\" ] || [ -e \\\"$target\\\" ])); then\\n            mkdir
  -p \\\"$out_path/$(dirname \\\"$path\\\")\\\"\\n            if [ -d
  \\\"$target\\\" ]; then\\n                rm -rf
  \\\"$target\\\"\\n            fi\\n            cp -R $override_switch
  \\\"$root_path/$path\\\" \\\"$target\\\"\\n        fi\\n    done\\n}\\n\\n#
  args:\\n# zip_uri - $1\\nget_remote_file_size() {\\n    local
  zip_uri=\\\"$1\\\"\\n\\n    if machine_has \\\"curl\\\";
  then\\n        file_size=$(curl -sI  \\\"$zip_uri\\\" | grep -i content-length
  | awk '{ num = $2 + 0; print num }')\\n    elif machine_has \\\"wget\\\";
  then\\n        file_size=$(wget --spider --server-response -O /dev/null
  \\\"$zip_uri\\\" 2>&1 | grep -i 'Content-Length:' | awk '{ num = $2 + 0; print
  num }')\\n    else\\n        say \\\"Neither curl nor wget is available on
  this system.\\\"\\n        return\\n    fi\\n\\n    if [ -n \\\"$file_size\\\"
  ]; then\\n        say \\\"Remote file $zip_uri size is $file_size
  bytes.\\\"\\n        echo \\\"$file_size\\\"\\n    else\\n        say_verbose
  \\\"Content-Length header was not extracted for $zip_uri.\\\"\\n        echo
  \\\"\\\"\\n    fi\\n}\\n\\n# args:\\n# zip_path - $1\\n# out_path - $2\\n#
  remote_file_size - $3\\nextract_dotnet_package() {\\n    eval
  $invocation\\n\\n    local zip_path=\\\"$1\\\"\\n    local
  out_path=\\\"$2\\\"\\n    local remote_file_size=\\\"$3\\\"\\n\\n    local
  temp_out_path=\\\"$(mktemp -d
  \\\"$temporary_file_template\\\")\\\"\\n\\n    local failed=false\\n    tar
  -xzf \\\"$zip_path\\\" -C \\\"$temp_out_path\\\" > /dev/null ||
  failed=true\\n\\n    local
  folders_with_version_regex='^.*/[0-9]+\\\\.[0-9]+[^/]+/'\\n    find
  \\\"$temp_out_path\\\" -type f | grep -Eo \\\"$folders_with_version_regex\\\"
  | sort | copy_files_or_dirs_from_list \\\"$temp_out_path\\\" \\\"$out_path\\\"
  false\\n    find \\\"$temp_out_path\\\" -type f | grep -Ev
  \\\"$folders_with_version_regex\\\" | copy_files_or_dirs_from_list
  \\\"$temp_out_path\\\" \\\"$out_path\\\"
  \\\"$override_non_versioned_files\\\"\\n    \\n    validate_remote_local_file\
  _sizes \\\"$zip_path\\\" \\\"$remote_file_size\\\"\\n    \\n    rm -rf
  \\\"$temp_out_path\\\"\\n    if [ -z ${keep_zip+x} ]; then\\n        rm -f
  \\\"$zip_path\\\" && say_verbose \\\"Temporary zip file $zip_path was
  removed\\\"\\n    fi\\n\\n    if [ \\\"$failed\\\" = true ];
  then\\n        say_err \\\"Extraction failed\\\"\\n        return
  1\\n    fi\\n    return 0\\n}\\n\\n# args:\\n# remote_path - $1\\n#
  disable_feed_credential - $2\\nget_http_header()\\n{\\n    eval
  $invocation\\n    local remote_path=\\\"$1\\\"\\n    local
  disable_feed_credential=\\\"$2\\\"\\n\\n    local failed=false\\n    local
  response\\n    if machine_has \\\"curl\\\";
  then\\n        get_http_header_curl $remote_path $disable_feed_credential ||
  failed=true\\n    elif machine_has \\\"wget\\\";
  then\\n        get_http_header_wget $remote_path $disable_feed_credential ||
  failed=true\\n    else\\n        failed=true\\n    fi\\n    if [
  \\\"$failed\\\" = true ]; then\\n        say_verbose \\\"Failed to get HTTP
  header: '$remote_path'.\\\"\\n        return 1\\n    fi\\n    return
  0\\n}\\n\\n# args:\\n# remote_path - $1\\n# disable_feed_credential -
  $2\\nget_http_header_curl() {\\n    eval $invocation\\n    local
  remote_path=\\\"$1\\\"\\n    local
  disable_feed_credential=\\\"$2\\\"\\n\\n    remote_path_with_credential=\\\"$\
  remote_path\\\"\\n    if [ \\\"$disable_feed_credential\\\" = false ];
  then\\n        remote_path_with_credential+=\\\"$feed_credential\\\"\\n    fi\
  \\n\\n    curl_options=\\\"-I -sSL --retry 5 --retry-delay 2 --connect-timeout
  15 \\\"\\n    curl $curl_options \\\"$remote_path_with_credential\\\" 2>&1 ||
  return 1\\n    return 0\\n}\\n\\n# args:\\n# remote_path - $1\\n#
  disable_feed_credential - $2\\nget_http_header_wget() {\\n    eval
  $invocation\\n    local remote_path=\\\"$1\\\"\\n    local
  disable_feed_credential=\\\"$2\\\"\\n    local wget_options=\\\"-q -S --spider
  --tries 5 \\\"\\n\\n    local wget_options_extra=''\\n\\n    # Test for
  options that aren't supported on all wget implementations.\\n    if [[ $(wget
  -h 2>&1 | grep -E 'waitretry|connect-timeout') ]];
  then\\n        wget_options_extra=\\\"--waitretry 2 --connect-timeout 15
  \\\"\\n    else\\n        say \\\"wget extra options are unavailable for this
  environment\\\"\\n    fi\\n\\n    remote_path_with_credential=\\\"$remote_path\
  \\\"\\n    if [ \\\"$disable_feed_credential\\\" = false ];
  then\\n        remote_path_with_credential+=\\\"$feed_credential\\\"\\n    fi\
  \\n\\n    wget $wget_options $wget_options_extra
  \\\"$remote_path_with_credential\\\" 2>&1\\n\\n    return $?\\n}\\n\\n#
  args:\\n# remote_path - $1\\n# [out_path] - $2 - stdout if not
  provided\\ndownload() {\\n    eval $invocation\\n\\n    local
  remote_path=\\\"$1\\\"\\n    local out_path=\\\"${2:-}\\\"\\n\\n    if [[
  \\\"$remote_path\\\" != \\\"http\\\"* ]]; then\\n        cp
  \\\"$remote_path\\\" \\\"$out_path\\\"\\n        return
  $?\\n    fi\\n\\n    local failed=false\\n    local attempts=0\\n    while [
  $attempts -lt 3 ];
  do\\n        attempts=$((attempts+1))\\n        failed=false\\n        if
  machine_has \\\"curl\\\"; then\\n            downloadcurl \\\"$remote_path\\\"
  \\\"$out_path\\\" || failed=true\\n        elif machine_has \\\"wget\\\";
  then\\n            downloadwget \\\"$remote_path\\\" \\\"$out_path\\\" ||
  failed=true\\n        else\\n            say_err \\\"Missing dependency:
  neither curl nor wget was found.\\\"\\n            exit
  1\\n        fi\\n\\n        if [ \\\"$failed\\\" = false ] || [ $attempts -ge
  3 ] || { [ ! -z $http_code ] && [ $http_code = \\\"404\\\" ]; };
  then\\n            break\\n        fi\\n\\n        say \\\"Download attempt
  #$attempts has failed: $http_code $download_error_msg\\\"\\n        say
  \\\"Attempt #$((attempts+1)) will start in $((attempts*10))
  seconds.\\\"\\n        sleep $((attempts*10))\\n    done\\n\\n    if [
  \\\"$failed\\\" = true ]; then\\n        say_verbose \\\"Download failed:
  $remote_path\\\"\\n        return 1\\n    fi\\n    return 0\\n}\\n\\n# Updates
  global variables $http_code and $download_error_msg\\ndownloadcurl()
  {\\n    eval $invocation\\n    unset http_code\\n    unset
  download_error_msg\\n    local remote_path=\\\"$1\\\"\\n    local
  out_path=\\\"${2:-}\\\"\\n    # Append feed_credential as late as possible
  before calling curl to avoid logging feed_credential\\n    # Avoid passing URI
  with credentials to functions: note, most of them echoing parameters of
  invocation in verbose output.\\n    local
  remote_path_with_credential=\\\"${remote_path}${feed_credential}\\\"\\n    lo\
  cal curl_options=\\\"--retry 20 --retry-delay 2 --connect-timeout 15 -sSL -f
  --create-dirs \\\"\\n    local curl_exit_code=0;\\n    if [ -z
  \\\"$out_path\\\" ]; then\\n        curl $curl_options
  \\\"$remote_path_with_credential\\\"
  2>&1\\n        curl_exit_code=$?\\n    else\\n        curl $curl_options -o
  \\\"$out_path\\\" \\\"$remote_path_with_credential\\\"
  2>&1\\n        curl_exit_code=$?\\n    fi\\n    \\n    if [ $curl_exit_code
  -gt 0 ]; then\\n        download_error_msg=\\\"Unable to download
  $remote_path.\\\"\\n        # Check for curl timeout codes\\n        if [[
  $curl_exit_code == 7 || $curl_exit_code == 28 ]];
  then\\n            download_error_msg+=\\\" Failed to reach the server:
  connection timeout.\\\"\\n        else\\n            local
  disable_feed_credential=false\\n            local
  response=$(get_http_header_curl $remote_path
  $disable_feed_credential)\\n            http_code=$( echo \\\"$response\\\" |
  awk '/^HTTP/{print $2}' | tail -1 )\\n            if  [[ ! -z $http_code &&
  $http_code != 2* ]]; then\\n                download_error_msg+=\\\" Returned
  HTTP status code:
  $http_code.\\\"\\n            fi\\n        fi\\n        say_verbose
  \\\"$download_error_msg\\\"\\n        return 1\\n    fi\\n    return
  0\\n}\\n\\n\\n# Updates global variables $http_code and
  $download_error_msg\\ndownloadwget() {\\n    eval $invocation\\n    unset
  http_code\\n    unset download_error_msg\\n    local
  remote_path=\\\"$1\\\"\\n    local out_path=\\\"${2:-}\\\"\\n    # Append
  feed_credential as late as possible before calling wget to avoid logging
  feed_credential\\n    local
  remote_path_with_credential=\\\"${remote_path}${feed_credential}\\\"\\n    lo\
  cal wget_options=\\\"--tries 20 \\\"\\n\\n    local
  wget_options_extra=''\\n    local wget_result=''\\n\\n    # Test for options
  that aren't supported on all wget implementations.\\n    if [[ $(wget -h 2>&1
  | grep -E 'waitretry|connect-timeout') ]];
  then\\n        wget_options_extra=\\\"--waitretry 2 --connect-timeout 15
  \\\"\\n    else\\n        say \\\"wget extra options are unavailable for this
  environment\\\"\\n    fi\\n\\n    if [ -z \\\"$out_path\\\" ];
  then\\n        wget -q $wget_options $wget_options_extra -O -
  \\\"$remote_path_with_credential\\\"
  2>&1\\n        wget_result=$?\\n    else\\n        wget $wget_options
  $wget_options_extra -O \\\"$out_path\\\" \\\"$remote_path_with_credential\\\"
  2>&1\\n        wget_result=$?\\n    fi\\n\\n    if [[ $wget_result != 0 ]];
  then\\n        local disable_feed_credential=false\\n        local
  response=$(get_http_header_wget $remote_path
  $disable_feed_credential)\\n        http_code=$( echo \\\"$response\\\" | awk
  '/^  HTTP/{print $2}' | tail -1 )\\n        download_error_msg=\\\"Unable to
  download $remote_path.\\\"\\n        if  [[ ! -z $http_code && $http_code !=
  2* ]]; then\\n            download_error_msg+=\\\" Returned HTTP status code:
  $http_code.\\\"\\n        # wget exit code 4 stands for
  network-issue\\n        elif [[ $wget_result == 4 ]];
  then\\n            download_error_msg+=\\\" Failed to reach the server:
  connection timeout.\\\"\\n        fi\\n        say_verbose
  \\\"$download_error_msg\\\"\\n        return 1\\n    fi\\n\\n    return
  0\\n}\\n\\nget_download_link_from_aka_ms() {\\n    eval
  $invocation\\n\\n    #quality is not supported for LTS or STS
  channel\\n    #STS maps to current\\n    if [[ ! -z
  \\\"$normalized_quality\\\"  && (\\\"$normalized_channel\\\" == \\\"LTS\\\" ||
  \\\"$normalized_channel\\\" == \\\"STS\\\") ]];
  then\\n        normalized_quality=\\\"\\\"\\n        say_warning
  \\\"Specifying quality for STS or LTS channel is not supported, the quality
  will be ignored.\\\"\\n    fi\\n\\n    say_verbose \\\"Retrieving primary
  payload URL from aka.ms for channel: '$normalized_channel', quality:
  '$normalized_quality', product: '$normalized_product', os: '$normalized_os',
  architecture: '$normalized_architecture'.\\\" \\n\\n    #construct aka.ms
  link\\n    aka_ms_link=\\\"https://aka.ms/dotnet\\\"\\n    if  [
  \\\"$internal\\\" = true ];
  then\\n        aka_ms_link=\\\"$aka_ms_link/internal\\\"\\n    fi\\n    aka_m\
  s_link=\\\"$aka_ms_link/$normalized_channel\\\"\\n    if [[ ! -z
  \\\"$normalized_quality\\\" ]];
  then\\n        aka_ms_link=\\\"$aka_ms_link/$normalized_quality\\\"\\n    fi\
  \\n    aka_ms_link=\\\"$aka_ms_link/$normalized_product-$normalized_os-$norma\
  lized_architecture.tar.gz\\\"\\n    say_verbose \\\"Constructed aka.ms link:
  '$aka_ms_link'.\\\"\\n\\n    #get HTTP response\\n    #do not pass credentials
  as a part of the $aka_ms_link and do not apply credentials in the
  get_http_header function\\n    #otherwise the redirect link would have
  credentials as well\\n    #it would result in applying credentials twice to
  the resulting link and thus breaking it, and in echoing credentials to the
  output as a part of redirect
  link\\n    disable_feed_credential=true\\n    response=\\\"$(get_http_header
  $aka_ms_link $disable_feed_credential)\\\"\\n\\n    say_verbose \\\"Received
  response: $response\\\"\\n    # Get results of all the
  redirects.\\n    http_codes=$( echo \\\"$response\\\" | awk '$1 ~ /^HTTP/
  {print $2}' )\\n    # They all need to be 301, otherwise some links are broken
  (except for the last, which is not a redirect but 200 or
  404).\\n    broken_redirects=$( echo \\\"$http_codes\\\" | sed '$d' | grep -v
  '301' )\\n\\n    # All HTTP codes are 301 (Moved Permanently), the redirect
  link exists.\\n    if [[ -z \\\"$broken_redirects\\\" ]];
  then\\n        aka_ms_download_link=$( echo \\\"$response\\\" | awk '$1 ~
  /^Location/{print $2}' | tail -1 | tr -d '\\\\r')\\n\\n        if [[ -z
  \\\"$aka_ms_download_link\\\" ]]; then\\n            say_verbose \\\"The
  aka.ms link '$aka_ms_link' is not valid: failed to get redirect
  location.\\\"\\n            return 1\\n        fi\\n\\n        say_verbose
  \\\"The redirect location retrieved:
  '$aka_ms_download_link'.\\\"\\n        return
  0\\n    else\\n        say_verbose \\\"The aka.ms link '$aka_ms_link' is not
  valid: received HTTP code: $(echo \\\"$broken_redirects\\\" | paste -sd
  \\\",\\\" -).\\\"\\n        return
  1\\n    fi\\n}\\n\\nget_feeds_to_use()\\n{\\n    feeds=(\\n    \\\"https://do\
  tnetcli.azureedge.net/dotnet\\\"\\n    \\\"https://dotnetbuilds.azureedge.net\
  /public\\\"\\n    )\\n\\n    if [[ -n \\\"$azure_feed\\\" ]];
  then\\n        feeds=(\\\"$azure_feed\\\")\\n    fi\\n\\n    if [[
  \\\"$no_cdn\\\" == \\\"true\\\" ]];
  then\\n        feeds=(\\n        \\\"https://dotnetcli.blob.core.windows.net/\
  dotnet\\\"\\n        \\\"https://dotnetbuilds.blob.core.windows.net/public\\\"\
  \\n        )\\n\\n        if [[ -n \\\"$uncached_feed\\\" ]];
  then\\n            feeds=(\\\"$uncached_feed\\\")\\n        fi\\n    fi\\n}\\n\
  \\n# THIS FUNCTION MAY EXIT (if the determined version is already
  installed).\\ngenerate_download_links()
  {\\n\\n    download_links=()\\n    specific_versions=()\\n    effective_versi\
  ons=()\\n    link_types=()\\n\\n    # If generate_akams_links returns false,
  no fallback to old links. Just terminate.\\n    # This function may also
  'exit' (if the determined version is already
  installed).\\n    generate_akams_links || return\\n\\n    # Check other feeds
  only if we haven't been able to find an aka.ms link.\\n    if [[
  \\\"${#download_links[@]}\\\" -lt 1 ]]; then\\n        for feed in
  ${feeds[@]}\\n        do\\n            # generate_regular_links may also
  'exit' (if the determined version is already
  installed).\\n            generate_regular_links $feed ||
  return\\n        done\\n    fi\\n\\n    if [[ \\\"${#download_links[@]}\\\"
  -eq 0 ]]; then\\n        say_err \\\"Failed to resolve the exact version
  number.\\\"\\n        return 1\\n    fi\\n\\n    say_verbose \\\"Generated
  ${#download_links[@]} links.\\\"\\n    for link_index in
  ${!download_links[@]}\\n    do\\n        say_verbose \\\"Link $link_index:
  ${link_types[$link_index]}, ${effective_versions[$link_index]},
  ${download_links[$link_index]}\\\"\\n    done\\n}\\n\\n# THIS FUNCTION MAY
  EXIT (if the determined version is already
  installed).\\ngenerate_akams_links() {\\n    local
  valid_aka_ms_link=true;\\n\\n    normalized_version=\\\"$(to_lowercase
  \\\"$version\\\")\\\"\\n    if [[ \\\"$normalized_version\\\" !=
  \\\"latest\\\" ]] && [ -n \\\"$normalized_quality\\\" ];
  then\\n        say_err \\\"Quality and Version options are not allowed to be
  specified simultaneously. See
  https://learn.microsoft.com/dotnet/core/tools/dotnet-install-script#options
  for details.\\\"\\n        return 1\\n    fi\\n\\n    if [[ -n
  \\\"$json_file\\\" || \\\"$normalized_version\\\" != \\\"latest\\\" ]];
  then\\n        # aka.ms links are not needed when exact version is specified
  via command or json
  file\\n        return\\n    fi\\n\\n    get_download_link_from_aka_ms ||
  valid_aka_ms_link=false\\n\\n    if [[ \\\"$valid_aka_ms_link\\\" == true ]];
  then\\n        say_verbose \\\"Retrieved primary payload URL from aka.ms link:
  '$aka_ms_download_link'.\\\"\\n        say_verbose \\\"Downloading using
  legacy url will not be
  attempted.\\\"\\n\\n        download_link=$aka_ms_download_link\\n\\n        \
  #get version from the path\\n        IFS='/'\\n        read -ra pathElems <<<
  \\\"$download_link\\\"\\n        count=${#pathElems[@]}\\n        specific_ve\
  rsion=\\\"${pathElems[count-2]}\\\"\\n        unset IFS;\\n        say_verbose
  \\\"Version: '$specific_version'.\\\"\\n\\n        #Retrieve effective
  version\\n        effective_version=\\\"$(get_specific_product_version
  \\\"$azure_feed\\\" \\\"$specific_version\\\"
  \\\"$download_link\\\")\\\"\\n\\n        # Add link info to
  arrays\\n        download_links+=($download_link)\\n        specific_versions\
  +=($specific_version)\\n        effective_versions+=($effective_version)\\n        \
  link_types+=(\\\"aka.ms\\\")\\n\\n        #  Check if the SDK version is
  already installed.\\n        if [[ \\\"$dry_run\\\" != true ]] &&
  is_dotnet_package_installed \\\"$install_root\\\" \\\"$asset_relative_path\\\"
  \\\"$effective_version\\\"; then\\n            say \\\"$asset_name with
  version '$effective_version' is already installed.\\\"\\n            exit
  0\\n        fi\\n\\n        return 0\\n    fi\\n\\n    # if quality is
  specified - exit with error - there is no fallback approach\\n    if [ ! -z
  \\\"$normalized_quality\\\" ]; then\\n        say_err \\\"Failed to locate the
  latest version in the channel '$normalized_channel' with '$normalized_quality'
  quality for '$normalized_product', os: '$normalized_os', architecture:
  '$normalized_architecture'.\\\"\\n        say_err \\\"Refer to:
  https://aka.ms/dotnet-os-lifecycle for information on .NET Core
  support.\\\"\\n        return 1\\n    fi\\n    say_verbose \\\"Falling back to
  latest.version file approach.\\\"\\n}\\n\\n# THIS FUNCTION MAY EXIT (if the
  determined version is already installed)\\n# args:\\n# feed -
  $1\\ngenerate_regular_links() {\\n    local feed=\\\"$1\\\"\\n    local
  valid_legacy_download_link=true\\n\\n    specific_version=$(get_specific_vers\
  ion_from_version \\\"$feed\\\" \\\"$channel\\\"
  \\\"$normalized_architecture\\\" \\\"$version\\\" \\\"$json_file\\\") ||
  specific_version='0'\\n\\n    if [[ \\\"$specific_version\\\" == '0' ]];
  then\\n        say_verbose \\\"Failed to resolve the specific version number
  using feed
  '$feed'\\\"\\n        return\\n    fi\\n\\n    effective_version=\\\"$(get_sp\
  ecific_product_version \\\"$feed\\\"
  \\\"$specific_version\\\")\\\"\\n    say_verbose
  \\\"specific_version=$specific_version\\\"\\n\\n    download_link=\\\"$(const\
  ruct_download_link \\\"$feed\\\" \\\"$channel\\\"
  \\\"$normalized_architecture\\\" \\\"$specific_version\\\"
  \\\"$normalized_os\\\")\\\"\\n    say_verbose \\\"Constructed primary named
  payload URL: $download_link\\\"\\n\\n    # Add link info to
  arrays\\n    download_links+=($download_link)\\n    specific_versions+=($spec\
  ific_version)\\n    effective_versions+=($effective_version)\\n    link_types\
  +=(\\\"primary\\\")\\n\\n    legacy_download_link=\\\"$(construct_legacy_down\
  load_link \\\"$feed\\\" \\\"$channel\\\" \\\"$normalized_architecture\\\"
  \\\"$specific_version\\\")\\\" || valid_legacy_download_link=false\\n\\n    if
  [ \\\"$valid_legacy_download_link\\\" = true ]; then\\n        say_verbose
  \\\"Constructed legacy named payload URL:
  $legacy_download_link\\\"\\n    \\n        download_links+=($legacy_download_\
  link)\\n        specific_versions+=($specific_version)\\n        effective_ve\
  rsions+=($effective_version)\\n        link_types+=(\\\"legacy\\\")\\n    else\
  \\n        legacy_download_link=\\\"\\\"\\n        say_verbose \\\"Cound not
  construct a legacy_download_link; omitting...\\\"\\n    fi\\n\\n    #  Check
  if the SDK version is already installed.\\n    if [[ \\\"$dry_run\\\" != true
  ]] && is_dotnet_package_installed \\\"$install_root\\\"
  \\\"$asset_relative_path\\\" \\\"$effective_version\\\"; then\\n        say
  \\\"$asset_name with version '$effective_version' is already
  installed.\\\"\\n        exit 0\\n    fi\\n}\\n\\nprint_dry_run()
  {\\n\\n    say \\\"Payload URLs:\\\"\\n\\n    for link_index in
  \\\"${!download_links[@]}\\\"\\n        do\\n            say \\\"URL
  #$link_index - ${link_types[$link_index]}:
  ${download_links[$link_index]}\\\"\\n    done\\n\\n    resolved_version=${spe\
  cific_versions[0]}\\n    repeatable_command=\\\"./$script_name --version
  \\\"\\\\\\\"\\\"$resolved_version\\\"\\\\\\\"\\\" --install-dir
  \\\"\\\\\\\"\\\"$install_root\\\"\\\\\\\"\\\" --architecture
  \\\"\\\\\\\"\\\"$normalized_architecture\\\"\\\\\\\"\\\" --os
  \\\"\\\\\\\"\\\"$normalized_os\\\"\\\\\\\"\\\"\\\"\\n    \\n    if [ ! -z
  \\\"$normalized_quality\\\" ]; then\\n        repeatable_command+=\\\"
  --quality
  \\\"\\\\\\\"\\\"$normalized_quality\\\"\\\\\\\"\\\"\\\"\\n    fi\\n\\n    if
  [[ \\\"$runtime\\\" == \\\"dotnet\\\" ]];
  then\\n        repeatable_command+=\\\" --runtime
  \\\"\\\\\\\"\\\"dotnet\\\"\\\\\\\"\\\"\\\"\\n    elif [[ \\\"$runtime\\\" ==
  \\\"aspnetcore\\\" ]]; then\\n        repeatable_command+=\\\" --runtime
  \\\"\\\\\\\"\\\"aspnetcore\\\"\\\\\\\"\\\"\\\"\\n    fi\\n\\n    repeatable_c\
  ommand+=\\\"$non_dynamic_parameters\\\"\\n\\n    if [ -n
  \\\"$feed_credential\\\" ]; then\\n        repeatable_command+=\\\"
  --feed-credential
  \\\"\\\\\\\"\\\"<feed_credential>\\\"\\\\\\\"\\\"\\\"\\n    fi\\n\\n    say
  \\\"Repeatable invocation: $repeatable_command\\\"\\n}\\n\\ncalculate_vars()
  {\\n    eval $invocation\\n\\n    script_name=$(basename
  \\\"$0\\\")\\n    normalized_architecture=\\\"$(get_normalized_architecture_f\
  rom_architecture \\\"$architecture\\\")\\\"\\n    say_verbose \\\"Normalized
  architecture:
  '$normalized_architecture'.\\\"\\n    normalized_os=\\\"$(get_normalized_os
  \\\"$user_defined_os\\\")\\\"\\n    say_verbose \\\"Normalized OS:
  '$normalized_os'.\\\"\\n    normalized_quality=\\\"$(get_normalized_quality
  \\\"$quality\\\")\\\"\\n    say_verbose \\\"Normalized quality:
  '$normalized_quality'.\\\"\\n    normalized_channel=\\\"$(get_normalized_chan\
  nel \\\"$channel\\\")\\\"\\n    say_verbose \\\"Normalized channel:
  '$normalized_channel'.\\\"\\n    normalized_product=\\\"$(get_normalized_prod\
  uct \\\"$runtime\\\")\\\"\\n    say_verbose \\\"Normalized product:
  '$normalized_product'.\\\"\\n    install_root=\\\"$(resolve_installation_path
  \\\"$install_dir\\\")\\\"\\n    say_verbose \\\"InstallRoot:
  '$install_root'.\\\"\\n\\n    normalized_architecture=\\\"$(get_normalized_ar\
  chitecture_for_specific_sdk_version \\\"$version\\\"
  \\\"$normalized_channel\\\" \\\"$normalized_architecture\\\")\\\"\\n\\n    if
  [[ \\\"$runtime\\\" == \\\"dotnet\\\" ]];
  then\\n        asset_relative_path=\\\"shared/Microsoft.NETCore.App\\\"\\n        \
  asset_name=\\\".NET Core Runtime\\\"\\n    elif [[ \\\"$runtime\\\" ==
  \\\"aspnetcore\\\" ]];
  then\\n        asset_relative_path=\\\"shared/Microsoft.AspNetCore.App\\\"\\n        \
  asset_name=\\\"ASP.NET Core Runtime\\\"\\n    elif [ -z \\\"$runtime\\\" ];
  then\\n        asset_relative_path=\\\"sdk\\\"\\n        asset_name=\\\".NET
  Core SDK\\\"\\n    fi\\n\\n    get_feeds_to_use\\n}\\n\\ninstall_dotnet()
  {\\n    eval $invocation\\n    local download_failed=false\\n    local
  download_completed=false\\n    local remote_file_size=0\\n\\n    mkdir -p
  \\\"$install_root\\\"\\n    zip_path=\\\"${zip_path:-$(mktemp
  \\\"$temporary_file_template\\\")}\\\"\\n    say_verbose \\\"Zip path:
  $zip_path\\\"\\n\\n    for link_index in
  \\\"${!download_links[@]}\\\"\\n    do\\n        download_link=\\\"${download\
  _links[$link_index]}\\\"\\n        specific_version=\\\"${specific_versions[$\
  link_index]}\\\"\\n        effective_version=\\\"${effective_versions[$link_i\
  ndex]}\\\"\\n        link_type=\\\"${link_types[$link_index]}\\\"\\n\\n        \
  say \\\"Attempting to download using $link_type link
  $download_link\\\"\\n\\n        # The download function will set variables
  $http_code and $download_error_msg in case of
  failure.\\n        download_failed=false\\n        download
  \\\"$download_link\\\" \\\"$zip_path\\\" 2>&1 ||
  download_failed=true\\n\\n        if [ \\\"$download_failed\\\" = true ];
  then\\n            case $http_code in\\n            404)\\n                say
  \\\"The resource at $link_type link '$download_link' is not
  available.\\\"\\n                ;;\\n            *)\\n                say
  \\\"Failed to download $link_type link '$download_link':
  $download_error_msg\\\"\\n                ;;\\n            esac\\n            \
  rm -f \\\"$zip_path\\\" 2>&1 && say_verbose \\\"Temporary zip file $zip_path
  was
  removed\\\"\\n        else\\n            download_completed=true\\n            \
  break\\n        fi\\n    done\\n\\n    if [[ \\\"$download_completed\\\" ==
  false ]]; then\\n        say_err \\\"Could not find \\\\`$asset_name\\\\` with
  version = $specific_version\\\"\\n        say_err \\\"Refer to:
  https://aka.ms/dotnet-os-lifecycle for information on .NET Core
  support\\\"\\n        return
  1\\n    fi\\n\\n    remote_file_size=\\\"$(get_remote_file_size
  \\\"$download_link\\\")\\\"\\n\\n    say \\\"Extracting zip from
  $download_link\\\"\\n    extract_dotnet_package \\\"$zip_path\\\"
  \\\"$install_root\\\" \\\"$remote_file_size\\\" || return 1\\n\\n    #  Check
  if the SDK version is installed; if not, fail the installation.\\n    # if the
  version contains \\\"RTM\\\" or \\\"servicing\\\"; check if a 'release-type'
  SDK version is installed.\\n    if [[ $specific_version == *\\\"rtm\\\"* ||
  $specific_version == *\\\"servicing\\\"* ]];
  then\\n        IFS='-'\\n        read -ra verArr <<<
  \\\"$specific_version\\\"\\n        release_version=\\\"${verArr[0]}\\\"\\n        \
  unset IFS;\\n        say_verbose \\\"Checking installation: version =
  $release_version\\\"\\n        if is_dotnet_package_installed
  \\\"$install_root\\\" \\\"$asset_relative_path\\\" \\\"$release_version\\\";
  then\\n            say \\\"Installed version is
  $effective_version\\\"\\n            return
  0\\n        fi\\n    fi\\n\\n    #  Check if the standard SDK version is
  installed.\\n    say_verbose \\\"Checking installation: version =
  $effective_version\\\"\\n    if is_dotnet_package_installed
  \\\"$install_root\\\" \\\"$asset_relative_path\\\" \\\"$effective_version\\\";
  then\\n        say \\\"Installed version is
  $effective_version\\\"\\n        return 0\\n    fi\\n\\n    # Version
  verification failed. More likely something is wrong either with the downloaded
  content or with the verification algorithm.\\n    say_err \\\"Failed to verify
  the version of installed \\\\`$asset_name\\\\`.\\\\nInstallation source:
  $download_link.\\\\nInstallation location: $install_root.\\\\nReport the bug
  at https://github.com/dotnet/install-scripts/issues.\\\"\\n    say_err
  \\\"\\\\`$asset_name\\\\` with version = $effective_version failed to install
  with an error.\\\"\\n    return
  1\\n}\\n\\nargs=(\\\"$@\\\")\\n\\nlocal_version_file_relative_path=\\\"/.vers\
  ion\\\"\\nbin_folder_relative_path=\\\"\\\"\\ntemporary_file_template=\\\"${T\
  MPDIR:-/tmp}/dotnet.XXXXXXXXX\\\"\\n\\nchannel=\\\"LTS\\\"\\nversion=\\\"Late\
  st\\\"\\njson_file=\\\"\\\"\\ninstall_dir=\\\"<auto>\\\"\\narchitecture=\\\"<\
  auto>\\\"\\ndry_run=false\\nno_path=false\\nno_cdn=false\\nazure_feed=\\\"\\\"\
  \\nuncached_feed=\\\"\\\"\\nfeed_credential=\\\"\\\"\\nverbose=false\\nruntim\
  e=\\\"\\\"\\nruntime_id=\\\"\\\"\\nquality=\\\"\\\"\\ninternal=false\\noverri\
  de_non_versioned_files=true\\nnon_dynamic_parameters=\\\"\\\"\\nuser_defined_\
  os=\\\"\\\"\\n\\nwhile [ $# -ne 0 ]\\ndo\\n    name=\\\"$1\\\"\\n    case
  \\\"$name\\\"
  in\\n        -c|--channel|-[Cc]hannel)\\n            shift\\n            chan\
  nel=\\\"$1\\\"\\n            ;;\\n        -v|--version|-[Vv]ersion)\\n            \
  shift\\n            version=\\\"$1\\\"\\n            ;;\\n        -q|--qualit\
  y|-[Qq]uality)\\n            shift\\n            quality=\\\"$1\\\"\\n            \
  ;;\\n        --internal|-[Ii]nternal)\\n            internal=true\\n            \
  non_dynamic_parameters+=\\\"
  $name\\\"\\n            ;;\\n        -i|--install-dir|-[Ii]nstall[Dd]ir)\\n            \
  shift\\n            install_dir=\\\"$1\\\"\\n            ;;\\n        --arch|\
  --architecture|-[Aa]rch|-[Aa]rchitecture)\\n            shift\\n            a\
  rchitecture=\\\"$1\\\"\\n            ;;\\n        --os|-[Oo][SS])\\n            \
  shift\\n            user_defined_os=\\\"$1\\\"\\n            ;;\\n        --s\
  hared-runtime|-[Ss]hared[Rr]untime)\\n            say_warning \\\"The
  --shared-runtime flag is obsolete and may be removed in a future version of
  this script. The recommended usage is to specify '--runtime
  dotnet'.\\\"\\n            if [ -z \\\"$runtime\\\" ];
  then\\n                runtime=\\\"dotnet\\\"\\n            fi\\n            \
  ;;\\n        --runtime|-[Rr]untime)\\n            shift\\n            runtime=\
  \\\"$1\\\"\\n            if [[ \\\"$runtime\\\" != \\\"dotnet\\\" ]] && [[
  \\\"$runtime\\\" != \\\"aspnetcore\\\" ]]; then\\n                say_err
  \\\"Unsupported value for --runtime: '$1'. Valid values are 'dotnet' and
  'aspnetcore'.\\\"\\n                if [[ \\\"$runtime\\\" ==
  \\\"windowsdesktop\\\" ]]; then\\n                    say_err
  \\\"WindowsDesktop archives are manufactured for Windows platforms
  only.\\\"\\n                fi\\n                exit
  1\\n            fi\\n            ;;\\n        --dry-run|-[Dd]ry[Rr]un)\\n            \
  dry_run=true\\n            ;;\\n        --no-path|-[Nn]o[Pp]ath)\\n            \
  no_path=true\\n            non_dynamic_parameters+=\\\"
  $name\\\"\\n            ;;\\n        --verbose|-[Vv]erbose)\\n            ver\
  bose=true\\n            non_dynamic_parameters+=\\\"
  $name\\\"\\n            ;;\\n        --no-cdn|-[Nn]o[Cc]dn)\\n            no_\
  cdn=true\\n            non_dynamic_parameters+=\\\"
  $name\\\"\\n            ;;\\n        --azure-feed|-[Aa]zure[Ff]eed)\\n            \
  shift\\n            azure_feed=\\\"$1\\\"\\n            non_dynamic_parameter\
  s+=\\\" $name
  \\\"\\\\\\\"\\\"$1\\\"\\\\\\\"\\\"\\\"\\n            ;;\\n        --uncached-\
  feed|-[Uu]ncached[Ff]eed)\\n            shift\\n            uncached_feed=\\\
  \"$1\\\"\\n            non_dynamic_parameters+=\\\" $name
  \\\"\\\\\\\"\\\"$1\\\"\\\\\\\"\\\"\\\"\\n            ;;\\n        --feed-cred\
  ential|-[Ff]eed[Cc]redential)\\n            shift\\n            feed_credenti\
  al=\\\"$1\\\"\\n            #feed_credential should start with \\\"?\\\", for
  it to be added to the end of the link.\\n            #adding \\\"?\\\" at the
  beginning of the feed_credential if needed.\\n            [[ -z \\\"$(echo
  $feed_credential)\\\" ]] || [[ $feed_credential == \\\\?* ]] ||
  feed_credential=\\\"?$feed_credential\\\"\\n            ;;\\n        --runtim\
  e-id|-[Rr]untime[Ii]d)\\n            shift\\n            runtime_id=\\\"$1\\\"\
  \\n            non_dynamic_parameters+=\\\" $name
  \\\"\\\\\\\"\\\"$1\\\"\\\\\\\"\\\"\\\"\\n            say_warning \\\"Use of
  --runtime-id is obsolete and should be limited to the versions below 2.1. To
  override architecture, use --architecture option instead. To override OS, use
  --os option
  instead.\\\"\\n            ;;\\n        --jsonfile|-[Jj][Ss]on[Ff]ile)\\n            \
  shift\\n            json_file=\\\"$1\\\"\\n            ;;\\n        --skip-no\
  n-versioned-files|-[Ss]kip[Nn]on[Vv]ersioned[Ff]iles)\\n            override_\
  non_versioned_files=false\\n            non_dynamic_parameters+=\\\"
  $name\\\"\\n            ;;\\n        --keep-zip|-[Kk]eep[Zz]ip)\\n            \
  keep_zip=true\\n            non_dynamic_parameters+=\\\"
  $name\\\"\\n            ;;\\n        --zip-path|-[Zz]ip[Pp]ath)\\n            \
  shift\\n            zip_path=\\\"$1\\\"\\n            ;;\\n        -?|--?|-h|\
  --help|-[Hh]elp)\\n            script_name=\\\"$(basename
  \\\"$0\\\")\\\"\\n            echo \\\".NET Tools
  Installer\\\"\\n            echo \\\"Usage: $script_name [-c|--channel
  <CHANNEL>] [-v|--version <VERSION>] [-p|--prefix
  <DESTINATION>]\\\"\\n            echo \\\"       $script_name
  -h|-?|--help\\\"\\n            echo \\\"\\\"\\n            echo
  \\\"$script_name is a simple command line interface for obtaining dotnet
  cli.\\\"\\n            echo \\\"    Note that the intended use of this script
  is for Continuous Integration (CI) scenarios, where:\\\"\\n            echo
  \\\"    - The SDK needs to be installed without user interaction and without
  admin rights.\\\"\\n            echo \\\"    - The SDK installation doesn't
  need to persist across multiple CI runs.\\\"\\n            echo \\\"    To set
  up a development environment or to run apps, use installers rather than this
  script. Visit https://dotnet.microsoft.com/download to get the
  installer.\\\"\\n            echo \\\"\\\"\\n            echo
  \\\"Options:\\\"\\n            echo \\\"  -c,--channel
  <CHANNEL>         Download from the channel specified, Defaults to
  \\\\`$channel\\\\`.\\\"\\n            echo
  \\\"      -Channel\\\"\\n            echo \\\"          Possible
  values:\\\"\\n            echo \\\"          - STS - the most recent Standard
  Term Support release\\\"\\n            echo \\\"          - LTS - the most
  recent Long Term Support release\\\"\\n            echo \\\"          - 2-part
  version in a format A.B - represents a specific release\\\"\\n            echo
  \\\"              examples: 2.0; 1.0\\\"\\n            echo \\\"          -
  3-part version in a format A.B.Cxx - represents a specific SDK
  release\\\"\\n            echo \\\"              examples: 5.0.1xx,
  5.0.2xx.\\\"\\n            echo \\\"              Supported since 5.0
  release\\\"\\n            echo \\\"          Warning: Value 'Current' is
  deprecated for the Channel parameter. Use 'STS'
  instead.\\\"\\n            echo \\\"          Note: The version parameter
  overrides the channel parameter when any version other than 'latest' is
  used.\\\"\\n            echo \\\"  -v,--version <VERSION>         Use specific
  VERSION, Defaults to \\\\`$version\\\\`.\\\"\\n            echo
  \\\"      -Version\\\"\\n            echo \\\"          Possible
  values:\\\"\\n            echo \\\"          - latest - the latest build on
  specific channel\\\"\\n            echo \\\"          - 3-part version in a
  format A.B.C - represents specific version of build\\\"\\n            echo
  \\\"              examples: 2.0.0-preview2-006120;
  1.1.0\\\"\\n            echo \\\"  -q,--quality <quality>         Download the
  latest build of specified quality in the channel.\\\"\\n            echo
  \\\"      -Quality\\\"\\n            echo \\\"          The possible values
  are: daily, signed, validated, preview, GA.\\\"\\n            echo
  \\\"          Works only in combination with channel. Not applicable for STS
  and LTS channels and will be ignored if those channels are used.\\\"
  \\n            echo \\\"          For SDK use channel in A.B.Cxx format. Using
  quality for SDK together with channel in A.B format is not supported.\\\"
  \\n            echo \\\"          Supported since 5.0 release.\\\"
  \\n            echo \\\"          Note: The version parameter overrides the
  channel parameter when any version other than 'latest' is used, and therefore
  overrides the quality.\\\"\\n            echo
  \\\"  --internal,-Internal               Download internal builds. Requires
  providing credentials via --feed-credential parameter.\\\"\\n            echo
  \\\"  --feed-credential <FEEDCREDENTIAL> Token to access Azure feed. Used as a
  query string to append to the Azure feed.\\\"\\n            echo
  \\\"      -FeedCredential                This parameter typically is not
  specified.\\\"\\n            echo \\\"  -i,--install-dir
  <DIR>             Install under specified location (see Install Location
  below)\\\"\\n            echo \\\"      -InstallDir\\\"\\n            echo
  \\\"  --architecture <ARCHITECTURE>      Architecture of dotnet binaries to be
  installed, Defaults to \\\\`$architecture\\\\`.\\\"\\n            echo
  \\\"      --arch,-Architecture,-Arch\\\"\\n            echo
  \\\"          Possible values: x64, arm, arm64, s390x, ppc64le and
  loongarch64\\\"\\n            echo \\\"  --os
  <system>                    Specifies operating system to be used when
  selecting the installer.\\\"\\n            echo \\\"          Overrides the OS
  determination approach used by the script. Supported values: osx, linux,
  linux-musl, freebsd, rhel.6.\\\"\\n            echo \\\"          In case any
  other value is provided, the platform will be determined by the script based
  on machine configuration.\\\"\\n            echo \\\"          Not supported
  for legacy links. Use --runtime-id to specify platform for legacy
  links.\\\"\\n            echo \\\"          Refer to:
  https://aka.ms/dotnet-os-lifecycle for more
  information.\\\"\\n            echo \\\"  --runtime
  <RUNTIME>                Installs a shared runtime only, without the
  SDK.\\\"\\n            echo \\\"      -Runtime\\\"\\n            echo
  \\\"          Possible values:\\\"\\n            echo \\\"          -
  dotnet     - the Microsoft.NETCore.App shared runtime\\\"\\n            echo
  \\\"          - aspnetcore - the Microsoft.AspNetCore.App shared
  runtime\\\"\\n            echo \\\"  --dry-run,-DryRun                  Do not
  perform installation. Display download link.\\\"\\n            echo
  \\\"  --no-path, -NoPath                 Do not set PATH for the current
  process.\\\"\\n            echo
  \\\"  --verbose,-Verbose                 Display diagnostics
  information.\\\"\\n            echo
  \\\"  --azure-feed,-AzureFeed            For internal use
  only.\\\"\\n            echo \\\"                                     Allows
  using a different storage to download SDK archives
  from.\\\"\\n            echo \\\"                                     This
  parameter is only used if --no-cdn is false.\\\"\\n            echo
  \\\"  --uncached-feed,-UncachedFeed      For internal use
  only.\\\"\\n            echo \\\"                                     Allows
  using a different storage to download SDK archives
  from.\\\"\\n            echo \\\"                                     This
  parameter is only used if --no-cdn is true.\\\"\\n            echo
  \\\"  --skip-non-versioned-files         Skips non-versioned files if they
  already exist, such as the dotnet executable.\\\"\\n            echo
  \\\"      -SkipNonVersionedFiles\\\"\\n            echo
  \\\"  --no-cdn,-NoCdn                    Disable downloading from the Azure
  CDN, and use the uncached feed directly.\\\"\\n            echo
  \\\"  --jsonfile <JSONFILE>              Determines the SDK version from a
  user specified global.json file.\\\"\\n            echo
  \\\"                                     Note: global.json must have a value
  for 'SDK:Version'\\\"\\n            echo
  \\\"  --keep-zip,-KeepZip                If set, downloaded file is
  kept.\\\"\\n            echo \\\"  --zip-path, -ZipPath               If set,
  downloaded file is stored at the specified path.\\\"\\n            echo
  \\\"  -?,--?,-h,--help,-Help             Shows this help
  message\\\"\\n            echo \\\"\\\"\\n            echo \\\"Install
  Location:\\\"\\n            echo \\\"  Location is chosen in following
  order:\\\"\\n            echo \\\"    - --install-dir
  option\\\"\\n            echo \\\"    - Environmental variable
  DOTNET_INSTALL_DIR\\\"\\n            echo \\\"    -
  $HOME/.dotnet\\\"\\n            exit
  0\\n            ;;\\n        *)\\n            say_err \\\"Unknown argument
  \\\\`$name\\\\`\\\"\\n            exit
  1\\n            ;;\\n    esac\\n\\n    shift\\ndone\\n\\nsay_verbose \\\"Note
  that the intended use of this script is for Continuous Integration (CI)
  scenarios, where:\\\"\\nsay_verbose \\\"- The SDK needs to be installed
  without user interaction and without admin rights.\\\"\\nsay_verbose \\\"- The
  SDK installation doesn't need to persist across multiple CI
  runs.\\\"\\nsay_verbose \\\"To set up a development environment or to run
  apps, use installers rather than this script. Visit
  https://dotnet.microsoft.com/download to get the installer.\\\\n\\\"\\n\\nif [
  \\\"$internal\\\" = true ] && [ -z \\\"$(echo $feed_credential)\\\" ];
  then\\n    message=\\\"Provide credentials via --feed-credential
  parameter.\\\"\\n    if [ \\\"$dry_run\\\" = true ];
  then\\n        say_warning \\\"$message\\\"\\n    else\\n        say_err
  \\\"$message\\\"\\n        exit
  1\\n    fi\\nfi\\n\\ncheck_min_reqs\\ncalculate_vars\\n#
  generate_regular_links call below will 'exit' if the determined version is
  already installed.\\ngenerate_download_links\\n\\nif [[ \\\"$dry_run\\\" =
  true ]]; then\\n    print_dry_run\\n    exit
  0\\nfi\\n\\ninstall_dotnet\\n\\nbin_path=\\\"$(get_absolute_path
  \\\"$(combine_paths \\\"$install_root\\\"
  \\\"$bin_folder_relative_path\\\")\\\")\\\"\\nif [ \\\"$no_path\\\" = false ];
  then\\n    say \\\"Adding to current process PATH: \\\\`$bin_path\\\\`. Note:
  This change will be visible only when sourcing script.\\\"\\n    export
  PATH=\\\"$bin_path\\\":\\\"$PATH\\\"\\nelse\\n    say \\\"Binaries of dotnet
  can be found in $bin_path\\\"\\nfi\\n\\nsay \\\"Note that the script does not
  resolve dependencies during installation.\\\"\\nsay \\\"To check the list of
  dependencies, go to https://learn.microsoft.com/dotnet/core/install, select
  your operating system and check the \\\\\\\"Dependencies\\\\\\\"
  section.\\\"\\nsay \\\"Installation finished
  successfully.\\\"\\n\",\"status\":200,\"statusText\":\"OK\",\"headers\":{\"da\
  te\":\"Tue, 16 Jan 2024 13:37:34
  GMT\",\"content-type\":\"application/x-sh\",\"content-length\":\"61896\",\"co\
  nnection\":\"keep-alive\",\"cache-control\":\"public,
  max-age=300\",\"etag\":\"\\\"1da4591c1823dc8\\\"\",\"last-modified\":\"Fri, 12
  Jan 2024 19:58:48 GMT\",\"set-cookie\":\"TiPMix=3.181519573669145; path=/;
  HttpOnly; Domain=dotnetwebsite.azurewebsites.net; Max-Age=3600; Secure;
  SameSite=None, x-ms-routing-name=self; path=/; HttpOnly;
  Domain=dotnetwebsite.azurewebsites.net; Max-Age=3600; Secure;
  SameSite=None\",\"request-context\":\"appId=cid-v1:109cec76-ff6c-4be0-97b5-4f\
  02dbac2451\",\"x-powered-by\":\"ASP.NET\",\"x-content-type-options\":\"nosniff\
  \",\"x-azure-ref\":\"20240116T133734Z-9q3q7rak8h45m5fuhsdwybrdb4000000020g000\
  00000qyse\",\"x-cache\":\"CONFIG_NOCACHE\",\"accept-ranges\":\"bytes\",\"x-ax\
  ios-cache-stale-if-error\":\"300000\"}}}}"
ms-vscode.cpptools: '{"CPP.1.11.5.Progress":300,"CPP.1.11.5.ignoreMismatchedCompatibleVsix":false,"CPP.machineId":"7256dc33d4af5c86ff33ffe6a2cf35a31668f3ddd25c367118f733bf6f45836c","CPP.1.11.5.checkForConflictingExtensions":false,"VSCode.ABExp.FeatureData":{"features":["account-aa","gettingStarted.overrideCategory.ms-vscode.cpptools.cppWelcome.when","livesharecontinuousaacf","mindaroBinariesVersion","mindaroBinariesVersion-1.0.20210702","mindaroBinariesVersion-1.0.20210723","portForwardingServiceEnabled-development","portForwardingServiceEnabled-production","portForwardingServiceEnabled-staging","redErrorTextcf","RemoveKernelToolbarInInteractiveWindowcf","reusableLinks","shouldUseGrpcService","ShowLangStatBar","showStatusBarIntelliSenseIndicatorcf"],"assignmentContext":"vsliv368cf:30146710;vsreu685:30147344;python383cf:30185419;vspor879:30202332;vspor708:30202333;vspor363:30204092;vserr242cf:30382550;binariesv615:30325510;bridge0708:30335490;bridge0723:30353136;vsaa593:30376534;c4g48928:30535728;showlangstatbar:30737416;fixshowwlkth:30771522;hideindicator:30785051;","configs":[{"Id":"vscode","Parameters":{"account-aa":true,"gettingStarted.overrideCategory.ms-vscode.cpptools.cppWelcome.when":"true","livesharecontinuousaa":false,"mindaroBinariesVersion":"1.0.20210615.1","mindaroBinariesVersion-1.0.20210702":"1.0.20210708.15","mindaroBinariesVersion-1.0.20210723":"1.0.20210723.6","portForwardingServiceEnabled-development":true,"portForwardingServiceEnabled-production":true,"portForwardingServiceEnabled-staging":true,"redErrorText":false,"RemoveKernelToolbarInInteractiveWindow":false,"reusableLinks":true,"shouldUseGrpcService":true,"ShowLangStatBar":true,"showStatusBarIntelliSenseIndicator":false}}]},"CPP.1.12.4.Progress":200,"CPP.1.12.4.ignoreMismatchedCompatibleVsix":false,"CPP.1.12.4.checkForConflictingExtensions":false,"CPP.1.16.3.Progress":300,"CPP.1.16.3.ignoreMismatchedCompatibleVsix":false,"CPP.1.16.3.checkForConflictingExtensions":false}'
Orta.vscode-jest: '{"orta.vscode-jest-5.1.0-launch":true,"orta.vscode-jest-5.2.2-launch":true,"orta.vscode-jest-5.2.3-launch":true,"orta.vscode-jest-6.2.0-launch":true,"orta.vscode-jest-6.2.2-launch":true,"orta.vscode-jest-6.2.5-launch":true}'
PKief.material-icon-theme: '{"material-icon-theme.version":"4.21.0"}'
redhat.vscode-xml: '{"telemetry.events.tracking.startup":{"count":1,"lastUpdated":1718056800000}}'
snyk-security.snyk-vulnerability-scanner: '{"snyk.anonymousId":"910204ba-e17b-4a9b-b9b4-6dafa0c8fec7","snyk.firstInstallDate":1682190495244,"snyk.lsLastUpdateDate":1720427927690,"snyk.lsChecksum":"bfaa1c705de94773a69b1486a442221440e55f65053500f9d29907f5a0e3a864","snyk.lsProtocolVersion":12}'
SonarSource.sonarlint-vscode: '{"FIRST_SECRET_ISSUE_DETECTED_KEY":true,"install.time":"2023-06-20T14:37:55.914Z"}'
vscode-icons-team.vscode-icons: '{"vsicons":{"version":"12.8.0","status":0,"welcomeShown":true}}'
workbench.activity.pinnedViewlets2: '[{"id":"workbench.view.explorer","pinned":true,"visible":true,"order":0},{"id":"workbench.view.search","pinned":true,"visible":true,"order":1},{"id":"workbench.view.scm","pinned":true,"visible":true,"order":2},{"id":"workbench.view.debug","pinned":true,"visible":true,"order":3},{"id":"workbench.view.remote","pinned":false,"visible":false,"order":4},{"id":"workbench.view.extension.atlascode-drawer","pinned":true,"visible":false,"order":8},{"id":"workbench.view.extension.test","pinned":true,"visible":true,"order":6},{"id":"workbench.view.extension.gitlens","pinned":true,"visible":false,"order":9},{"id":"workbench.view.extension.references-view","pinned":true,"visible":false,"order":7},{"id":"workbench.view.extension.gitlensInspect","pinned":true,"visible":true,"order":10},{"id":"workbench.view.extension.gitlensPatch","pinned":true,"visible":false,"order":11},{"id":"workbench.view.extension.mongoDB","pinned":true,"visible":true,"order":17},{"id":"workbench.view.extension.todo-tree-container","pinned":false,"visible":true,"order":16},{"id":"workbench.view.extension.dockerView","pinned":false,"visible":true,"order":18},{"id":"workbench.view.extension.kubernetesView","pinned":true,"visible":true,"order":19},{"id":"workbench.view.extension.snyk","pinned":true,"visible":true,"order":21},{"id":"workbench.view.extension.github-pull-requests","pinned":true,"visible":false,"order":14},{"id":"workbench.view.extension.github-pull-request","pinned":true,"visible":false,"order":15},{"id":"workbench.view.extension.project-reference-explorer","pinned":false,"visible":true,"order":20},{"id":"workbench.view.extensions","pinned":true,"visible":true,"order":4},{"id":"workbench.view.extension.SonarLint","pinned":false,"visible":true,"order":22},{"id":"workbench.view.extension.cspell-explorer","pinned":true,"visible":false,"order":23},{"id":"workbench.view.extension.thunder-client","pinned":true,"visible":false,"order":16},{"id":"workbench.view.extension.github-actions","pinned":true,"visible":true,"order":13},{"id":"workbench.view.extension.godotTools","pinned":true,"visible":false,"order":12},{"id":"workbench.panel.chatSidebar","pinned":true,"visible":false,"order":100},{"id":"workbench.panel.chatSidebar.copilot","pinned":true,"visible":false,"order":100},{"id":"workbench.view.sync","pinned":true,"visible":false},{"id":"workbench.view.editSessions","pinned":true,"visible":false},{"id":"userDataProfiles","pinned":true,"visible":false}]'
workbench.activity.placeholderViewlets: "[{\"id\":\"workbench.view.explorer\",\
  \"themeIcon\":{\"id\":\"explorer-view-icon\"},\"name\":\"Explorer\",\"isBuilt\
  in\":true,\"views\":[{},{},{},{\"when\":\"config.gitlens.cloudPatches.enabled
  && gitlens:gk:organization:drafts:enabled && !gitlens:hasVirtualFolders &&
  !gitlens:untrusted\"},{\"when\":\"!gitlens:hasVirtualFolders &&
  !gitlens:untrusted\"},{},{},{\"when\":\"timelineHasProvider\"},{\"when\":\"np\
  m:showScriptExplorer\"},{\"when\":\"git.commit.selected &&
  git.commit.view.show &&
  !config.gitHistory.hideCommitViewExplorer\"},{\"when\":\"git.commit.compare.c\
  ompared && git.commit.compare.view.show &&
  !config.gitHistory.hideCompareCommitViewExplorer\"},{\"when\":\"solutionExplo\
  rerVisible\"},{},{}]},{\"id\":\"workbench.view.search\",\"themeIcon\":{\"id\":\
  \"search-view-icon\"},\"name\":\"Search\",\"isBuiltin\":true,\"views\":[{}]},{\
  \"id\":\"workbench.view.scm\",\"themeIcon\":{\"id\":\"source-control-view-icon\
  \"},\"name\":\"Source
  Control\",\"isBuiltin\":true,\"views\":[{\"when\":\"scm.providerCount &&
  scm.providerCount !=
  '0'\"},{},{\"when\":\"!gitlens:disabled\"},{\"when\":\"!gitlens:disabled\"},{\
  \"when\":\"!gitlens:disabled\"},{\"when\":\"!gitlens:disabled\"},{\"when\":\"\
  !gitlens:disabled &&
  !gitlens:hasVirtualFolders\"},{\"when\":\"!gitlens:disabled\"},{\"when\":\"gi\
  tlens:plus:enabled && !gitlens:disabled &&
  !gitlens:hasVirtualFolders\"},{\"when\":\"!gitlens:disabled\"}]},{\"id\":\"wo\
  rkbench.view.debug\",\"themeIcon\":{\"id\":\"run-view-icon\"},\"name\":\"Run
  and Debug\",\"isBuiltin\":true,\"views\":[{\"when\":\"debugUx ==
  'simple'\"},{\"when\":\"debugUx == 'default'\"},{\"when\":\"debugUx ==
  'default'\"},{\"when\":\"debugUx ==
  'default'\"},{\"when\":\"loadedScriptsSupported && debugUx ==
  'default'\"},{\"when\":\"breakpointsExist || hasDebugged || debugUx ==
  'default'\"},{\"when\":\"debugType == 'pwa-chrome' || debugType ==
  'pwa-msedge'\"},{\"when\":\"jsDebugHasExcludedCallers && debugType ==
  'node-terminal' || jsDebugHasExcludedCallers && debugType == 'pwa-chrome' ||
  jsDebugHasExcludedCallers && debugType == 'pwa-extensionHost' ||
  jsDebugHasExcludedCallers && debugType == 'pwa-msedge' ||
  jsDebugHasExcludedCallers && debugType ==
  'pwa-node'\"},{\"when\":\"inDebugMode && debugType ==
  'firefox'\"},{},{},{\"when\":\"cpptools.enableSshTargetsView\"}]},{\"id\":\"w\
  orkbench.view.remote\",\"themeIcon\":{\"id\":\"remote-explorer-view-icon\"},\
  \"name\":\"Remote
  Explorer\",\"isBuiltin\":true,\"views\":[]},{\"id\":\"workbench.view.extensio\
  n.atlascode-drawer\",\"iconUrl\":{\"$mid\":1,\"path\":\"%%EXTENSION_DATA_PATH\
  %%/atlassian.atlascode-3.0.10/resources/atlassian-icon.svg\",\"scheme\":\"file\
  \"},\"name\":\"Atlassian\",\"isBuiltin\":false,\"views\":[{\"when\":\"atlasco\
  de:jiraExplorerEnabled &&
  config.atlascode.jira.enabled\"},{\"when\":\"atlascode:bitbucketExplorerEnabl\
  ed &&
  config.atlascode.bitbucket.enabled\"},{\"when\":\"atlascode:pipelineExplorerE\
  nabled &&
  config.atlascode.bitbucket.enabled\"},{\"when\":\"atlascode:bitbucketIssuesEx\
  plorerEnabled &&
  config.atlascode.bitbucket.enabled\"},{\"when\":\"config.atlascode.helpExplor\
  erEnabled\"}]},{\"id\":\"workbench.view.extension.test\",\"themeIcon\":{\"id\
  \":\"test-view-icon\"},\"name\":\"Testing\",\"isBuiltin\":true,\"views\":[{\"\
  when\":\"testing.providerCount >
  0\"},{\"when\":\"testing.isTestCoverageOpen\"},{},{\"when\":\"testExplorerVis\
  ible\"}]},{\"id\":\"workbench.view.extension.gitlens\",\"themeIcon\":{\"id\":\
  \"gitlens-gitlens\"},\"name\":\"GitLens\",\"isBuiltin\":false,\"views\":[]},{\
  \"id\":\"workbench.view.extension.references-view\",\"themeIcon\":{\"id\":\"r\
  eferences\"},\"name\":\"References\",\"isBuiltin\":false,\"views\":[{\"when\":\
  \"reference-list.isActive\"},{\"when\":\"cpptools.hasReferencesResults\"}]},{\
  \"id\":\"workbench.view.extension.gitlensInspect\",\"themeIcon\":{\"id\":\"gi\
  tlens-gitlens-inspect\"},\"name\":\"GitLens
  Inspect\",\"isBuiltin\":false,\"views\":[{\"when\":\"!gitlens:disabled\"},{\"\
  when\":\"gitlens:views:pullRequest:visible &&
  !gitlens:disabled\"},{\"when\":\"!gitlens:disabled &&
  !gitlens:hasVirtualFolders\"},{\"when\":\"!gitlens:disabled\"},{\"when\":\"gi\
  tlens:plus:enabled &&
  !gitlens:disabled\"},{\"when\":\"!gitlens:disabled\"}]},{\"id\":\"workbench.v\
  iew.extension.gitlensPatch\",\"themeIcon\":{\"id\":\"gitlens-cloud-patch\"},\
  \"name\":\"GitLens
  Patch\",\"isBuiltin\":false,\"views\":[{\"when\":\"config.gitlens.cloudPatche\
  s.enabled && gitlens:views:patchDetails:mode &&
  !gitlens:untrusted\"}]},{\"id\":\"workbench.view.extension.mongoDB\",\"iconUrl\
  \":{\"$mid\":1,\"path\":\"%%EXTENSION_DATA_PATH%%/mongodb.mongodb-vscode-1.6.\
  0/images/sidebar-leaf.svg\",\"scheme\":\"file\"},\"name\":\"MongoDB\",\"isBui\
  ltin\":false,\"views\":[{\"when\":\"config.mdb.showMongoDBConnectionExplorer\
  \"},{\"when\":\"config.mdb.showMongoDBPlaygrounds\"},{\"when\":\"config.mdb.s\
  howMongoDBHelpExplorer\"}]},{\"id\":\"workbench.view.extension.todo-tree-cont\
  ainer\",\"iconUrl\":{\"$mid\":1,\"path\":\"%%EXTENSION_DATA_PATH%%/gruntfuggl\
  y.todo-tree-0.0.226/resources/todo-tree-container.svg\",\"scheme\":\"file\"},\
  \"name\":\"TODOs\",\"isBuiltin\":false,\"views\":[{\"when\":\"!todo-tree-is-e\
  mpty\"}]},{\"id\":\"workbench.view.extension.dockerView\",\"iconUrl\":{\"$mid\
  \":1,\"path\":\"%%EXTENSION_DATA_PATH%%/ms-azuretools.vscode-docker-1.29.1/re\
  sources/docker.svg\",\"scheme\":\"file\"},\"name\":\"Docker\",\"isBuiltin\":f\
  alse,\"views\":[{},{},{},{},{},{},{}]},{\"id\":\"workbench.view.extension.kub\
  ernetesView\",\"iconUrl\":{\"$mid\":1,\"path\":\"%%EXTENSION_DATA_PATH%%/ms-k\
  ubernetes-tools.vscode-kubernetes-tools-1.3.16/images/logo.svg\",\"scheme\":\
  \"file\"},\"name\":\"Kubernetes\",\"isBuiltin\":false,\"views\":[{},{},{}]},{\
  \"id\":\"workbench.view.extension.snyk\",\"iconUrl\":{\"$mid\":1,\"path\":\"%\
  %EXTENSION_DATA_PATH%%/snyk-security.snyk-vulnerability-scanner-2.13.0/media/\
  images/snyk_extension_icon_new.svg\",\"scheme\":\"file\"},\"name\":\"Snyk\",\
  \"isBuiltin\":false,\"views\":[{\"when\":\"snyk:error || !snyk:loggedIn ||
  !snyk:workspaceFound\"},{\"when\":\"snyk:initialized && snyk:loggedIn &&
  snyk:workspaceFound && !snyk:error\"},{\"when\":\"snyk:codeEnabled &&
  snyk:initialized && snyk:loggedIn && snyk:workspaceFound &&
  !snyk:error\"},{\"when\":\"snyk:initialized && snyk:loggedIn &&
  snyk:workspaceFound && !snyk:error\"},{\"when\":\"snyk:codeEnabled &&
  snyk:initialized && snyk:loggedIn && snyk:workspaceFound &&
  !snyk:error\"},{\"when\":\"snyk:initialized && snyk:loggedIn &&
  snyk:workspaceFound && !snyk:codeEnabled &&
  !snyk:error\"},{}]},{\"id\":\"workbench.view.extension.github-pull-requests\",\
  \"name\":\"GitHub Pull
  Requests\",\"isBuiltin\":false},{\"id\":\"workbench.view.extension.github-pul\
  l-request\",\"name\":\"GitHub Pull
  Request\",\"isBuiltin\":false},{\"id\":\"workbench.view.extension.project-ref\
  erence-explorer\",\"iconUrl\":{\"$mid\":1,\"path\":\"%%EXTENSION_DATA_PATH%%/\
  revrenlove.c-sharp-utilities-1.12.1/assets/images/logo-mono-sidebar.png\",\"s\
  cheme\":\"file\"},\"name\":\"Project Reference
  Explorer\",\"isBuiltin\":false,\"views\":[{}]},{\"id\":\"workbench.view.exten\
  sions\",\"themeIcon\":{\"id\":\"extensions-view-icon\"},\"name\":\"Extensions\
  \",\"isBuiltin\":true,\"views\":[{\"when\":\"defaultExtensionViews\"},{\"when\
  \":\"searchExtensionUpdates ||
  searchOutdatedExtensions\"},{\"when\":\"recommendedExtensions &&
  workbenchState != 'empty'\"},{\"when\":\"defaultExtensionViews && hasGallery
  && !hasInstalledExtensions\"},{\"when\":\"searchExtensionUpdates ||
  searchRecentlyUpdatedExtensions\"},{\"when\":\"recommendedExtensions\"},{\"wh\
  en\":\"defaultExtensionViews && hasGallery &&
  !config.extensions.showRecommendationsOnlyOnDemand &&
  !sortByUpdateDate\"},{\"when\":\"defaultExtensionViews &&
  hasInstalledExtensions\"},{\"when\":\"defaultExtensionViews &&
  hasInstalledExtensions\"},{\"when\":\"searchMarketplaceExtensions\"},{\"when\
  \":\"installedExtensions ||
  searchInstalledExtensions\"},{\"when\":\"searchEnabledExtensions\"},{\"when\":\
  \"searchDisabledExtensions\"},{\"when\":\"searchBuiltInExtensions\"},{\"when\
  \":\"searchWorkspaceUnsupportedExtensions\"},{\"when\":\"builtInExtensions\"}\
  ,{\"when\":\"builtInExtensions\"},{\"when\":\"builtInExtensions\"},{\"when\":\
  \"searchUnsupportedWorkspaceExtensions\"},{\"when\":\"searchUnsupportedWorksp\
  aceExtensions\"},{\"when\":\"searchUnsupportedWorkspaceExtensions &&
  virtualWorkspace\"},{\"when\":\"searchUnsupportedWorkspaceExtensions &&
  virtualWorkspace\"},{\"when\":\"searchDeprecatedExtensions\"}]},{\"id\":\"wor\
  kbench.view.extension.SonarLint\",\"iconUrl\":{\"$mid\":1,\"path\":\"%%EXTENS\
  ION_DATA_PATH%%/sonarsource.sonarlint-vscode-4.7.0-linux-x64/images/sonarlint\
  .svg\",\"scheme\":\"file\"},\"name\":\"SonarLint\",\"isBuiltin\":false,\"views\
  \":[{},{},{},{}]},{\"id\":\"workbench.view.extension.cspell-explorer\",\"icon\
  Url\":{\"$mid\":1,\"path\":\"%%EXTENSION_DATA_PATH%%/streetsidesoftware.code-\
  spell-checker-3.0.1/resources/dark/check_circle.svg\",\"scheme\":\"file\"},\"\
  name\":\"Spell Checker
  Info\",\"isBuiltin\":false,\"views\":[{\"when\":\"config.cSpell.experimental.\
  enableRegexpView\"}]},{\"id\":\"workbench.view.extension.thunder-client\",\"i\
  sBuiltin\":false},{\"id\":\"workbench.view.extension.github-actions\",\"iconU\
  rl\":{\"$mid\":1,\"path\":\"%%EXTENSION_DATA_PATH%%/github.vscode-github-acti\
  ons-0.26.3/resources/icons/light/explorer.svg\",\"scheme\":\"file\"},\"name\":\
  \"GitHub
  Actions\",\"isBuiltin\":false,\"views\":[{\"when\":\"github-actions.has-repos
  && github-actions.internet-access &&
  github-actions.signed-in\"},{\"when\":\"github-actions.has-repos &&
  github-actions.internet-access &&
  github-actions.signed-in\"},{\"when\":\"github-actions.has-repos &&
  github-actions.internet-access &&
  github-actions.signed-in\"},{\"when\":\"!github-actions.has-repos ||
  !github-actions.internet-access ||
  !github-actions.signed-in\"}]},{\"id\":\"workbench.view.extension.godotTools\
  \",\"iconUrl\":{\"$mid\":1,\"path\":\"%%EXTENSION_DATA_PATH%%/geequlim.godot-\
  tools-2.0.0/resources/godot_icon.svg\",\"scheme\":\"file\"},\"name\":\"Godot
  Tools\",\"isBuiltin\":false,\"views\":[{}]},{\"id\":\"workbench.panel.chatSid\
  ebar\",\"themeIcon\":{\"id\":\"comment-discussion\"},\"name\":\"Chat\",\"isBu\
  iltin\":true,\"views\":[]},{\"id\":\"workbench.panel.chatSidebar.copilot\",\"\
  isBuiltin\":false},{\"id\":\"workbench.view.sync\",\"themeIcon\":{\"id\":\"se\
  ttings-sync-view-icon\"},\"name\":\"Settings
  Sync\",\"isBuiltin\":true,\"views\":[{\"when\":\"enableSyncConflictsView &&
  hasConflicts\"},{\"when\":\"enableSyncActivityViews &&
  userDataSyncAccountStatus == 'available' && syncStatus !=
  'uninitialized'\"},{\"when\":\"enableSyncActivityViews &&
  userDataSyncAccountStatus == 'available' && syncStatus !=
  'uninitialized'\"},{\"when\":\"enableSyncActivityViews &&
  userDataSyncAccountStatus == 'available' && syncStatus !=
  'uninitialized'\"},{\"when\":\"enableSyncActivityViews\"},{\"when\":\"enableS\
  yncActivityViews\"}]},{\"id\":\"workbench.view.editSessions\",\"themeIcon\":{\
  \"id\":\"edit-sessions-view-icon\"},\"name\":\"Cloud
  Changes\",\"isBuiltin\":true,\"views\":[{\"when\":\"editSessionsShowView\"}]}\
  ,{\"id\":\"userDataProfiles\",\"themeIcon\":{\"id\":\"defaultProfile-icon\"},\
  \"name\":\"Profiles\",\"isBuiltin\":true,\"views\":[]}]"
workbench.activityBar.location: default
workbench.auxiliarybar.pinnedPanels: "[]"
workbench.auxiliaryBar.size: "300"
workbench.editor.languageDetectionOpenedLanguages.global: '[["markdown",true],["shellscript",true],["json",true],["typescript",true],["javascript",true],["http",true],["sql",true],["dockercompose",true],["xml",true],["plaintext",true],["jsonc",true],["csharp",true]]'
workbench.explorer.views.state.hidden: '[{"id":"outline","isHidden":false,"order":6},{"id":"timeline","isHidden":false,"order":7},{"id":"workbench.explorer.openEditorsView","isHidden":true,"order":0},{"id":"workbench.explorer.emptyView","isHidden":false},{"id":"npm","isHidden":true,"order":8},{"id":"commitViewProvider","isHidden":false,"order":9},{"id":"compareCommitViewProvider","isHidden":false,"order":10},{"id":"regionViewer","isHidden":false,"order":12},{"id":"SonarLint.AllRules","isHidden":false},{"id":"SonarLint.IssueLocations","isHidden":false,"order":13},{"id":"workbench.explorer.fileView","isHidden":false,"order":1},{"id":"SonarLint.ConnectedMode","isHidden":false},{"id":"solutionExplorer","isHidden":false,"order":11},{"id":"gitlens.views.home","isHidden":true,"order":2},{"id":"gitlens.views.drafts","isHidden":true,"order":3},{"id":"gitlens.views.workspaces","isHidden":true,"order":4},{"id":"gitlens.views.account","isHidden":true,"order":5},{"id":"github:createPullRequestWebview","isHidden":false},{"id":"github:compareChangesFiles","isHidden":false},{"id":"github:compareChangesCommits","isHidden":false},{"id":"github:conflictResolution","isHidden":false},{"id":"prStatus:github","isHidden":false},{"id":"github:activePullRequest","isHidden":false},{"id":"github:activePullRequest:welcome","isHidden":false}]'
workbench.grid.size: '{"height":1056,"width":1920}'
workbench.panel.alignment: center
workbench.panel.lastNonMaximizedHeight: "300"
workbench.panel.lastNonMaximizedWidth: "300"
workbench.panel.markers.hidden: '[{"id":"workbench.panel.markers.view","isHidden":false}]'
workbench.panel.output.hidden: '[{"id":"workbench.panel.output","isHidden":false}]'
workbench.panel.pinnedPanels: '[{"id":"workbench.panel.markers","pinned":true,"visible":true,"order":0},{"id":"workbench.panel.output","pinned":true,"visible":true,"order":1},{"id":"workbench.panel.repl","pinned":true,"visible":true,"order":2},{"id":"workbench.panel.testResults","pinned":true,"visible":false,"order":3},{"id":"terminal","pinned":true,"visible":true,"order":3},{"id":"~remote.forwardedPortsContainer","pinned":true,"visible":true,"order":5},{"id":"workbench.view.extension.gitlensPanel","pinned":true,"visible":false,"order":6},{"id":"workbench.panel.comments","pinned":true,"visible":true,"order":10},{"id":"refactorPreview","pinned":true,"visible":false}]'
workbench.panel.placeholderPanels: '[{"id":"workbench.panel.markers","themeIcon":{"id":"markers-view-icon"},"name":"Problems","isBuiltin":true,"views":[{}]},{"id":"workbench.panel.output","themeIcon":{"id":"output-view-icon"},"name":"Output","isBuiltin":true,"views":[{}]},{"id":"workbench.panel.repl","themeIcon":{"id":"debug-console-view-icon"},"name":"Debug
  Console","isBuiltin":true,"views":[{"when":"debuggersAvailable"}]},{"id":"workbench.panel.testResults","themeIcon":{"id":"test-results-icon"},"name":"Test
  Results","isBuiltin":true,"views":[{"when":"testing.hasAnyResults"}]},{"id":"terminal","themeIcon":{"id":"terminal-view-icon"},"name":"Terminal","isBuiltin":true,"views":[{}]},{"id":"~remote.forwardedPortsContainer","themeIcon":{"id":"ports-view-icon"},"name":"Ports","isBuiltin":true,"views":[{}]},{"id":"workbench.view.extension.gitlensPanel","themeIcon":{"id":"gitlens-graph"},"name":"GitLens","isBuiltin":false,"views":[{"when":"gitlens:plus:enabled
  && !gitlens:disabled"},{"when":"gitlens:plus:enabled &&
  !gitlens:disabled"}]},{"id":"workbench.panel.comments","themeIcon":{"id":"comments-view-icon"},"name":"Comments","isBuiltin":true,"views":[{}]},{"id":"refactorPreview","themeIcon":{"id":"refactor-preview-view-icon"},"name":"Refactor
  Preview","isBuiltin":true,"views":[{"when":"refactorPreview.enabled"}]}]'
workbench.panel.repl.hidden: '[{"id":"workbench.panel.repl.view","isHidden":false}]'
workbench.panel.size: "240"
workbench.panel.testResults.state.hidden: '[{"id":"workbench.panel.testResults.view","isHidden":false}]'
workbench.scm.views.state.hidden: '[{"id":"workbench.scm.repositories","isHidden":true},{"id":"workbench.scm","isHidden":false},{"id":"gitlens.views.commits","isHidden":false},{"id":"gitlens.views.repositories","isHidden":true},{"id":"gitlens.views.fileHistory","isHidden":false},{"id":"gitlens.views.lineHistory","isHidden":true},{"id":"gitlens.views.branches","isHidden":false},{"id":"gitlens.views.remotes","isHidden":false},{"id":"gitlens.views.stashes","isHidden":false},{"id":"gitlens.views.tags","isHidden":false},{"id":"gitlens.views.worktrees","isHidden":false},{"id":"gitlens.views.contributors","isHidden":true},{"id":"gitlens.views.searchAndCompare","isHidden":false},{"id":"gitlens.views.commitDetails","isHidden":false},{"id":"workbench.scm.sync","isHidden":false}]'
workbench.sideBar.size: "307"
workbench.statusbar.hidden: '["status.workspaceTrust.1651520647507","status.workspaceTrust.857874ebe1a28bf0bb43ad6f8f8dcd08","status.workspaceTrust.7ab56ee296ddb1cf022845379d7d6d5d","status.workspaceTrust.1651649065204","status.workspaceTrust.8686805c3d9c02b66f62798ccbef9f90","status.workspaceTrust.1651653485046","status.workspaceTrust.6808faf9c03957ab1214e7fb617760c1","status.workspaceTrust.1651836778912","status.workspaceTrust.2617a56ce712e8995b0abd94f800dc1f","status.workspaceTrust.1651837499688","status.workspaceTrust.267e0e855a07f3243ef6145ff2237174","status.workspaceTrust.4a75b87fbea781221b267f2c1b616227","status.workspaceTrust.1652087543591","status.workspaceTrust.1652088170670","status.workspaceTrust.b8de7835b50514de03a92d9b64a65ec9","status.workspaceTrust.0f5533ea6531544cd88860365a8ecce1","status.workspaceTrust.55fbddaf47f8aa1cea3105035b64b363","status.workspaceTrust.1652424479204","status.workspaceTrust.887eb4a1a759e43b9c03f91daa933049","status.workspaceTrust.1652425047278","status.workspaceTrust.9607f16c4ce6dc26cc7c5fab7f1b1dfb","status.workspaceTrust.1652790162545","status.workspaceTrust.54186ef9562dbd3e4f2af134f8202a26","status.workspaceTrust.a88df685e58c3066a54f8ebcb4a0fe19","status.workspaceTrust.1652992416215","status.workspaceTrust.15e0b6c73e88929b74fec5a1f22caf50","status.workspaceTrust.1653048712130","status.workspaceTrust.1653222176260","status.workspaceTrust.1653293718329","status.workspaceTrust.dddfad15e9692531c2eaad9680fbb15e","status.workspaceTrust.a0a41e28ce6ff695b4412729a0615075","status.workspaceTrust.1653316338068","status.workspaceTrust.1653378028772","status.workspaceTrust.eced549e26f6fc806eca7070aeba00d6","status.workspaceTrust.1654176303074","status.workspaceTrust.d16f886cafd39cc4fe9dbd4baea9cb34","status.workspaceTrust.622e73b0f2781ca2e910e333a0377a80","status.workspaceTrust.1655881110262","status.workspaceTrust.8d22ce19607642d8becbc00e6a4d8395","status.workspaceTrust.c8f644ae104cd8d4bdcb6d85f0359f1a","status.workspaceTrust.1656074800783","status.workspaceTrust.1656185611137","status.workspaceTrust.6def0cf960b41725c92bb7e56b20b7bc","status.workspaceTrust.1657001726970","status.workspaceTrust.d2e877c3ab105a6c3b97424e3dbf4279","status.workspaceTrust.27233992bf5a5e67b93fd5abcf649b4c","status.workspaceTrust.d20090d2caf078477565d71d989a0b3c","status.workspaceTrust.ad480c07a6e68e487fbab70bf0fe65e6","status.workspaceTrust.1658212961543","status.workspaceTrust.d6f12d869121eeec9fd37fedd28cf098","status.workspaceTrust.0d03d2326b7f2e7a313de37fd5ae59c8","status.workspaceTrust.11fd0423c24c95e3b8ff85f94a93fad8","status.workspaceTrust.1658222312919","status.workspaceTrust.1658223564379","status.workspaceTrust.1236475fbc70f98b1718bd034d94c055","status.workspaceTrust.bb413c7676cef3fc3901cd17837bab8d","status.workspaceTrust.08c2d07d28193ce47c6649d46d4552e4","status.workspaceTrust.10b179322588fccc8d548303a3baacbb","status.workspaceTrust.1658237016590","status.workspaceTrust.1658243484836","status.workspaceTrust.dfb77bda5619e65e13d0d338db9262ac","status.workspaceTrust.bea3b47516173176761437b81e2ff521","status.workspaceTrust.1658399124659","status.workspaceTrust.cac52d1d0dc9a05f2b9fae85f47311f2","status.workspaceTrust.1658401438529","status.workspaceTrust.1658406477898","status.workspaceTrust.1658490493785","status.workspaceTrust.1658736916912","status.workspaceTrust.4b68ecb83fe73be18f3251893564e8bf","status.workspaceTrust.1658746282906","status.workspaceTrust.7b5d73631d6e0af0eda5fa363151e02e","status.workspaceTrust.9b8f81cea2ad87e4b5b1015700f3f6af","status.workspaceTrust.92b53eb010036e6733d4caf958edb962","status.workspaceTrust.1658827159602","status.workspaceTrust.2500f183d824041667ab34b387e4bcc1","status.workspaceTrust.ff4c200c3df331418d11a3a460df5091","status.workspaceTrust.e37c739299f9b814e116732b677c85b5","status.workspaceTrust.1658844463369","status.workspaceTrust.1658844544549","status.workspaceTrust.1658846832297","status.workspaceTrust.1658996111972","status.workspaceTrust.1659077756499","status.workspaceTrust.1659337950598","status.workspaceTrust.1659427100731","status.workspaceTrust.1659429145734","status.workspaceTrust.f734024e5dbac6b06f4084cfc4d6be13","status.workspaceTrust.3bb47f9151b29bc283629a270fa45842","status.workspaceTrust.1659597704370","status.workspaceTrust.918eefba55570bed1edcd3d31ee59758","status.workspaceTrust.1659642889912","status.workspaceTrust.5573dce2d35d77c588096a39b78ffe75","status.workspaceTrust.1659682212487","status.workspaceTrust.f7a705b98b910ffa6e843e1de5f4cb49","status.workspaceTrust.6b042e60a433a87c62edcb63dfc9a686","status.workspaceTrust.1659942120320","status.workspaceTrust.1659957633389","status.workspaceTrust.6544002a3cd20cafd98f29b42104e12f","status.workspaceTrust.1bda9b6a25a7e5825b0e320a475b25fa","status.workspaceTrust.ebe6fbf2d2a58c715c610e1fe2423c40","status.workspaceTrust.1660134850688","status.workspaceTrust.1660231601703","status.workspaceTrust.1660548242984","status.workspaceTrust.1660549425503","status.workspaceTrust.1660557310949","status.workspaceTrust.1660636261639","status.workspaceTrust.1660643414778","status.workspaceTrust.1660649825207","status.workspaceTrust.b1f2bcc566074b7486fed7d537db25e9","status.workspaceTrust.1660824945840","status.workspaceTrust.1660830061396","status.workspaceTrust.1661240463998","status.workspaceTrust.51aedaf1d92a5d6294e3c9deb3a66186","status.workspaceTrust.1661429677560","status.workspaceTrust.9f76fd7731d7df4cbf52e3dbfdcab4b1","status.workspaceTrust.1661432315481","status.workspaceTrust.1661625555697","status.workspaceTrust.1661755197064","status.workspaceTrust.1661851919513","status.workspaceTrust.f5a096dda978c1238924c55ce6f61c78","status.workspaceTrust.1661852234676","status.workspaceTrust.c4893fa66ec780a04733185981a0aea9","status.workspaceTrust.1662022605730","status.workspaceTrust.6e290faefcb44a4c45cea0b6714b4614","status.workspaceTrust.1c7b579dae2743224122d8fe53495705","status.workspaceTrust.85fea1ae4f2f117b0d145f6f42641cf3","status.workspaceTrust.1662470956121","status.workspaceTrust.2107012b1d92d32094022da0192a2cb8","status.workspaceTrust.2bdcff3121214e359a986fe410206869","status.workspaceTrust.1662499709465","status.workspaceTrust.be3bcae841db3f67c01d0ff89fa8d4b3","status.workspaceTrust.1662499873589","status.workspaceTrust.f9b3745029cb6be759d36cd37cac2366","status.workspaceTrust.1662545178378","status.workspaceTrust.1662632036764","status.workspaceTrust.1662717112346","status.workspaceTrust.9ea2ffc570db3cff37af4893060e92bd","status.workspaceTrust.f558496e33d519cec9b215743749b468","status.workspaceTrust.b65cbcdc4ee112eec0f8ecde1f2e016b","status.workspaceTrust.1663596648284","status.workspaceTrust.25708c8ef6dab82141c55493817ed362","status.workspaceTrust.63c42ecbd51a8570187950c0877dea0f","status.workspaceTrust.d8c508a0b015cbdb0688f459416834e0","status.workspaceTrust.ca445bd1719b36390b391ab5cf6a44b3","status.workspaceTrust.6bb6256122fc48fae9128ab07052a5ca","status.workspaceTrust.ed4e8bf0dfb660f2afdd9afd76fffa99","status.workspaceTrust.1664782537970","status.workspaceTrust.b51544c2ce4250088d85aaf8e0f0ee38","status.workspaceTrust.1664892834149","status.workspaceTrust.7b867f45054475caa7e1df6c84a74699","status.workspaceTrust.1664969038305","status.workspaceTrust.1665047989558","status.workspaceTrust.1665405030924","status.workspaceTrust.3d9329cad77512394e8eec405dafb35f","status.workspaceTrust.1665409355313","status.workspaceTrust.1665476116139","status.workspaceTrust.1665500275211","status.workspaceTrust.1665515339619","status.workspaceTrust.e22a16bf2aa1b42ccd1e896cea84bf0a","status.workspaceTrust.1665694697184","status.workspaceTrust.285fe717c47f36db74a3995a0bfac83e","status.workspaceTrust.cc16b5f7dc0407e5a84d1c739f03caf0","status.workspaceTrust.91d70aff28894a5e90d83d8d118636a7","status.workspaceTrust.d9f5d4dd6b3169960cafc3d1bffaa357","status.workspaceTrust.f3b6540fb865dfa0699e78ec6fe109f5","status.workspaceTrust.174d19c0c8d35cfdba3e8503d23c7422","status.workspaceTrust.8bfdcb7f5d3e5c4c848dff994585a379","status.workspaceTrust.1666612529923","status.workspaceTrust.a2a8af8572abded4c58e4fce0f7940b6","status.workspaceTrust.1666616527198","status.workspaceTrust.1666870590652","status.workspaceTrust.767d2be0d21b8e922b8052e53372a50c","status.workspaceTrust.096eb7fbd27b65a0c1e7ca1c9b2a0148","status.workspaceTrust.1667169744535","status.workspaceTrust.29ce056e322a45fee3774e41b6df2c7d","status.workspaceTrust.1667315772645","status.workspaceTrust.b2c6616f5f315800b8ed83245c2a814b","status.workspaceTrust.1d96b078e3fa193f60baca818eaa1bca","status.workspaceTrust.1667814980197","status.workspaceTrust.1667825253454","status.workspaceTrust.1667829521315","status.workspaceTrust.0ac176b54feef1afd94802d021514164","status.workspaceTrust.104e445a07e079d283e756c2e90029ec","status.workspaceTrust.1668071830474","status.workspaceTrust.1668072672351","status.workspaceTrust.1668156457384","status.workspaceTrust.1668501197159","status.workspaceTrust.1668586583995","status.workspaceTrust.1668586851468","status.workspaceTrust.962ecd6af44bd50633262ad9643cd606","status.workspaceTrust.0f5292099b709051ee01d55773446f73","status.workspaceTrust.1668692755454","status.workspaceTrust.e4acdd2107e8a937f7521c8706354d29","status.workspaceTrust.1668782246759","status.workspaceTrust.7615fb8221f08caf13825b3289a46aba","status.workspaceTrust.3ad9d5d396b31e717083c8f9dd95b505","status.workspaceTrust.1669025618644","status.workspaceTrust.1669993963980","status.workspaceTrust.9b4c3e6d644bfdb2add88270e50449b8","status.workspaceTrust.cf30e507135bbe071a5fe57011a73a1b","status.workspaceTrust.bd04eda75d58f9de12b1efe89a446b16","status.workspaceTrust.d86474212b653d1358dca066b7536fc1","status.workspaceTrust.1670707640288","status.workspaceTrust.86904700a5e18358fc83f35dd58c9843","status.workspaceTrust.1671008438266","status.workspaceTrust.1671697642259","status.workspaceTrust.1671717474976","status.workspaceTrust.ab3b164a9a44448e304250f0523aa8c4","status.workspaceTrust.1671816533805","status.workspaceTrust.2306116392ba85ca91a3d7805ddf9557","status.workspaceTrust.be4166bf42741dca9d085e7d1b435430","status.workspaceTrust.1673297436981","status.workspaceTrust.1673385607046","status.workspaceTrust.1673386035594","status.workspaceTrust.b86e67869287867eb81ed7ba6b6bf2e5","status.workspaceTrust.1673886058889","status.workspaceTrust.87df9bc20d4649ffd46ba9fc0e0aff18","status.workspaceTrust.ef658fcae94ba875e78e42f149cd3a8a","status.workspaceTrust.1674124395233","status.workspaceTrust.1674208813131","status.workspaceTrust.b04dba0c23b367811d27669d1e4d91c2","status.workspaceTrust.bfc571d6befa52c90da058421fd316ff","status.workspaceTrust.1674209979056","status.workspaceTrust.1674211383224","status.workspaceTrust.4a29b502c3f1857ddc8422ba8c0e27f0","status.workspaceTrust.c67858e5445db5ca71d763bfb53a2c64","status.workspaceTrust.fe513b1566b8eff8b9ef344b0b970106","status.workspaceTrust.4f43622a034f28c3bd1b3577dc554a40","status.workspaceTrust.1675508656270","status.workspaceTrust.47ac490c1b466e0aca8778279fb24760","status.workspaceTrust.1675776621063","status.workspaceTrust.5e173af4a398293eab7015e394132c70","status.workspaceTrust.1675933467271","status.workspaceTrust.75fa26aba5caa2a3d851465ee95dc93c","status.workspaceTrust.1675955675744","status.workspaceTrust.1676299288283","status.workspaceTrust.1676314811988","status.workspaceTrust.1676362352380","status.workspaceTrust.1676560658078","status.workspaceTrust.1676622867058","status.workspaceTrust.1676889060721","status.workspaceTrust.1676889186540","status.workspaceTrust.2755192ddeda1b47cc732d56fe99f00a","status.workspaceTrust.12c50d9650f980a02db88eb85531abf7","status.workspaceTrust.1677066500076","status.workspaceTrust.1677840896247","status.workspaceTrust.364a975ca5a8b563dc16da4747578cee","status.workspaceTrust.1678093125049","status.workspaceTrust.cff4b77c02635a6a1f6ea1ae842cf947","status.workspaceTrust.1678353641787","status.workspaceTrust.6a15fd1645e1881fff48898d95f4d54d","status.workspaceTrust.1678711889271","status.workspaceTrust.1678713580429","status.workspaceTrust.1679177018682","status.workspaceTrust.1679179996021","status.workspaceTrust.aebe3078edf785b367c6a7f3db360504","status.workspaceTrust.1679254342239","status.workspaceTrust.1679254387297","status.workspaceTrust.1680262452252","status.workspaceTrust.1680505026707","status.workspaceTrust.77d73b80dced239c5641c3e3b70b547c","status.workspaceTrust.6e7318f0e6deb68a0413d7b20acd873c","status.workspaceTrust.c7fd34a8f0bb592ea00d25ab353d2a6d","status.workspaceTrust.1681120099269","status.workspaceTrust.1681120168903","status.workspaceTrust.1681120210670","status.workspaceTrust.1681323223581","status.workspaceTrust.1681327009401","status.workspaceTrust.d27d4b8465f518aeb5949460c5075bf3","status.workspaceTrust.1681327214942","status.workspaceTrust.1681327519407","status.workspaceTrust.d1b04cf4aefa905d6bbc76a0b28be78f","status.workspaceTrust.1681728451318","status.workspaceTrust.d3e9d9dbbd6875392900aa3dd61e1c89","status.workspaceTrust.1681730250419","status.workspaceTrust.1681739350800","status.workspaceTrust.68d107c626af6c009c87e61250ad098c","status.workspaceTrust.1682077447918","status.workspaceTrust.1682078168859","status.workspaceTrust.1682281183313","status.workspaceTrust.2ccdee20b9c103afb587d7ff248155a4","status.workspaceTrust.4c3c1fba217003571f19f52a69c57107","status.workspaceTrust.425623eff6a5e637eb85dd065297f32e","status.workspaceTrust.1682623589735","status.workspaceTrust.0780a5f0f574bde51a259fe20ab18c11","status.workspaceTrust.4a1d4a8b2220f28413cacebc2f1249c2","status.workspaceTrust.c563ee98e348b7603958db61d3af6e0e","status.workspaceTrust.e964e547f52471a92922c217b79fa87c","status.workspaceTrust.81b93722a4e911fe0589f0f7b3cd9ff4","status.workspaceTrust.1138bc9d074633466d05a7bb70e2dfe2","status.workspaceTrust.1682936943320","status.workspaceTrust.1683126158024","status.workspaceTrust.d4e9dcae57a250515e21502189f7f1ad","status.workspaceTrust.1683276749696","status.workspaceTrust.1683708666539","status.workspaceTrust.1683710133614","status.workspaceTrust.1683710551834","status.workspaceTrust.1683728778201","status.workspaceTrust.1683787719021","status.workspaceTrust.38d29237ea98f99a01fbe3b75ef799ff","status.workspaceTrust.1683787766692","status.workspaceTrust.1683895759039","status.workspaceTrust.1684139232711","status.workspaceTrust.f3ca72edac17ceaabb9d832954229e47","status.workspaceTrust.2515af94c4f0fdc54686307d30289596","status.workspaceTrust.1e080b6979b25a53e30689a8980b0e6b","status.workspaceTrust.b49b9a8aec629b1274b9e23c78ce3431","status.workspaceTrust.179189d3e74ceece314e33a1f3c25cd6","status.workspaceTrust.1684443279447","status.workspaceTrust.ccdb71dbcd8adf126cdf326094af0aff","status.workspaceTrust.a21496e4daa84ca75e1e3b1af6836575","status.workspaceTrust.0e2d22245cc6940f0551a8769f8e8b6f","status.workspaceTrust.1685960220594","status.workspaceTrust.1685962864501","status.workspaceTrust.4ad312b0accf035624dc365777933183","status.workspaceTrust.94b50ed63dc4b3312a87542e88599ee2","status.workspaceTrust.57b0d9093cec71a8ab667a10f1b8a4cd","status.workspaceTrust.959b7aab5799f37252b1e54a92583be2","status.workspaceTrust.1686302313262","status.workspaceTrust.8c3d7c34b00fefd972a5b8c5cd27c332","status.workspaceTrust.23543c4db987ead84e17a17e8af9d2a6","status.workspaceTrust.1687117417193","status.workspaceTrust.8fd08051186dcb84d1c0857ff315732d","status.workspaceTrust.1687272036348","status.workspaceTrust.4847f3d0943f1e1a68e03e4a84965467","status.workspaceTrust.1687505041336","status.workspaceTrust.1688132972946","status.workspaceTrust.1688133223911","status.workspaceTrust.c2aaa6a5c8cfcb8846f5c2d62f901f9e","status.workspaceTrust.1689337363597","status.workspaceTrust.3240a4bcde7d52114feec0142fee9c13","status.workspaceTrust.f99e48bb63a5a1fea03aacaa5847b922","status.workspaceTrust.1689422118213","status.workspaceTrust.60711701356450c6dac6c483e983fe88","status.workspaceTrust.1689531412438","status.workspaceTrust.d1251470c3abbabfbfd1fdf4aa06da58","status.workspaceTrust.1689531461615","status.workspaceTrust.528702ce13a523978d48224476490664","status.workspaceTrust.1689533212072","status.workspaceTrust.1689545808856","status.workspaceTrust.130e5f87646f2e61ff1e952b1158cc0a","status.workspaceTrust.94db8c95da1eaf240102011528446354","status.workspaceTrust.1689600193610","status.workspaceTrust.461ac037769c6a5adf5e9a54663ebfae","status.workspaceTrust.58f6e30966ff4e2fc1f7b644be0068f2","status.workspaceTrust.d49d118a521a8dd91d6a496f4879a467","status.workspaceTrust.4d0ddd6a9ee3a62e2af824b1b401aa56","status.workspaceTrust.a684ddd746c8079626d6cc57c549130c","status.workspaceTrust.54e713ac75eacf9cc8de8a54040b3d82","status.workspaceTrust.f67197bda4e6c502036c50b448224efd","status.workspaceTrust.99c343cccb5eadeddf4498ef22c0db01","status.workspaceTrust.801742788fc495f9f2c6b791234bff3c","status.workspaceTrust.1690188269818","status.workspaceTrust.ab1c72aee5adb79a1cfa461c59c5e93a","status.workspaceTrust.1690232155388","status.workspaceTrust.244a434c149624a8bf78cad9b7440f0e","status.workspaceTrust.c774ff234001a1c4b09e8849d12ed96b","status.workspaceTrust.1690232642119","status.workspaceTrust.750ac26935c03c10db02f2dafeb43958","status.workspaceTrust.1690296456491","status.workspaceTrust.1ebf3dad4104a7fa62fdd106bcae42b9","status.workspaceTrust.0a1d8be5752187cecc8639bf096934cb","status.workspaceTrust.dd35d809ed84c40ec60c41a883493356","status.workspaceTrust.1690465975270","status.workspaceTrust.4dd2f07793b64b12b88d82e5c0f73487","status.workspaceTrust.fd956d2ec732570eb50207266a8231e4","status.workspaceTrust.31ee44855e156f804459fa85e4d60c42","status.workspaceTrust.c10f6172530f01c5b5d0401e94a32fad","status.workspaceTrust.1690809068174","status.workspaceTrust.f8e856701256c2c05cd2c8ad8e2f1177","status.workspaceTrust.1690966427878","status.workspaceTrust.4c2d34e8412dbbf3f0c70065bc7af2fd","status.workspaceTrust.1690970771556","status.workspaceTrust.61a4dcf5bf0836072e5522d1f180acfe","status.workspaceTrust.970dd6a728e982758a56cd8611317d0a","status.workspaceTrust.c30bedc99722d483ff7f7f36649e4b61","status.workspaceTrust.1692035428992","status.workspaceTrust.1692037200574","status.workspaceTrust.144bf9bb43c097b8ce16520321ad63c2","status.workspaceTrust.1692086055862","status.workspaceTrust.1692099774158","status.workspaceTrust.0d337060ea9abdadde8f2ed17ee1491a","status.workspaceTrust.1692360471129","status.workspaceTrust.97e948768b00fbed731730fe7bc8f2af","status.workspaceTrust.e7b2c353cbb2aab5d2c51a99161eb0ac","status.workspaceTrust.1692604274678","status.workspaceTrust.1692606086319","status.workspaceTrust.1692716958343","status.workspaceTrust.bd4bbf2f73fe6495495a415766cd629a","status.workspaceTrust.c0f1bee506b05535efa7886df0d8f424","status.workspaceTrust.1692889891482","status.workspaceTrust.1692966549305","status.workspaceTrust.1692969164898","status.workspaceTrust.abae81a2eab7a4ffadf3a670871d9b2b","status.workspaceTrust.1693220048265","status.workspaceTrust.5864b031b2fab5207ddccbb56b09863f","status.workspaceTrust.16b863d3acb3f2f76764dac139baddff","status.workspaceTrust.1693255262090","status.workspaceTrust.1694091212595","status.workspaceTrust.5de71e7fde74eb599fbfc8ea431b87c7","status.workspaceTrust.968b34dfa70119191f8694889d684f91","status.workspaceTrust.1694458402035","status.workspaceTrust.1694675662101","status.workspaceTrust.1694675980836","status.workspaceTrust.1694704935594","status.workspaceTrust.d0cfd081b046f7bb8882329ba5fc1e32","status.workspaceTrust.1695040141901","status.workspaceTrust.79eebdfabf5cf56488cca99e49e83e83","status.workspaceTrust.d3086aee7614c08a64040c27f001951e","status.workspaceTrust.1696793421590","status.workspaceTrust.1696834092359","status.workspaceTrust.1d67e3ca8c57d62c436141908290ed96","status.workspaceTrust.1696834190715","status.workspaceTrust.1696834607654","status.workspaceTrust.1696835025794","status.workspaceTrust.1697235042708","status.workspaceTrust.1697489380704","status.workspaceTrust.1697636352913","status.workspaceTrust.1698095763793","status.workspaceTrust.1698095846334","status.workspaceTrust.1698176708262","status.workspaceTrust.1698181801784","status.workspaceTrust.7e6df8c53a4aea6ababd367e052cee13","status.workspaceTrust.1698244761790","status.workspaceTrust.183ff67f19b9e5d97743b115cf2f19f7","status.workspaceTrust.27292ce97d18c21bdd9db0d42f638372","status.workspaceTrust.1698310091790","status.workspaceTrust.1698310108680","status.workspaceTrust.fd772234c942d0ab186f61e08870fb3e","status.workspaceTrust.1698485388801","status.workspaceTrust.999aa70332082a7aa8dba3c1358494eb","status.workspaceTrust.1698524022491","status.workspaceTrust.1698603113641","status.workspaceTrust.5c93b7f82a76fd853596fa3f53cb59de","status.workspaceTrust.1698670511882","status.workspaceTrust.bd4c08b326787abdb3d63b8ed8ecafd1","status.workspaceTrust.1698679083189","status.workspaceTrust.1698679366341","status.workspaceTrust.1698692468041","status.workspaceTrust.484d181d9e025f366abc471ec80e4a8c","status.workspaceTrust.1698740540536","status.workspaceTrust.0c4c50de4008ff2cfb6b080cabf9f6a4","status.workspaceTrust.4a5b9195d3733a522ccf2fd102a8dfaf","status.workspaceTrust.97421103c32db5b4a319ba7664f74f2c","status.workspaceTrust.07806674d3ce1ae18e59c426420c1355","status.workspaceTrust.1699963219916","status.workspaceTrust.65b917305bfbe4d92ed365b0c364bbe6","status.workspaceTrust.1700515779563","status.workspaceTrust.42ca46095bc03dfd2ec0864c99bff071","status.workspaceTrust.594d83c8c5b0f7323517b4d9bff84b77","status.workspaceTrust.1701156370352","status.workspaceTrust.e333f89255bdd68a5d54f528c51cc445","status.workspaceTrust.1b297efd9d34056127a76f01d6173497","status.workspaceTrust.1703255135581","status.workspaceTrust.1704641591142","status.workspaceTrust.1705479726646","status.workspaceTrust.23b8910205f33d5632ccff92a5dec78f","status.workspaceTrust.517665925843ff50d0db60e997a0b713","status.workspaceTrust.1707205752615","status.workspaceTrust.1707292883077","status.workspaceTrust.6549b4b04a1d74980edb339bfcb65737","status.workspaceTrust.1707313288381","status.workspaceTrust.5aeae84728effbfd564356d50e7ca6a4","status.workspaceTrust.1707687975398","status.workspaceTrust.b3e543eff230ad232e1df54bb86eade7","status.workspaceTrust.1707773726702","status.workspaceTrust.c133ecd54d716db4088a27221c1503af","status.workspaceTrust.1709237722643"]'
workbench.telemetryOptOutShown: "true"
workbench.view.debug.state.hidden: '[{"id":"workbench.debug.welcome","isHidden":false},{"id":"workbench.debug.variablesView","isHidden":false},{"id":"workbench.debug.watchExpressionsView","isHidden":false},{"id":"workbench.debug.callStackView","isHidden":false},{"id":"workbench.debug.loadedScriptsView","isHidden":false},{"id":"workbench.debug.breakPointsView","isHidden":false},{"id":"jsBrowserBreakpoints","isHidden":false},{"id":"jsExcludedCallers","isHidden":false},{"id":"extension.firefox.loadedScripts","isHidden":false},{"id":"CppSshTargetsView","isHidden":false},{"id":"activeSceneTree","isHidden":false},{"id":"inspectNode","isHidden":false}]'
workbench.view.extension.atlascode-drawer.state.hidden: '[{"id":"atlascode.views.jira.customJql","isHidden":false},{"id":"atlascode.views.bb.pullrequestsTreeView","isHidden":false},{"id":"atlascode.views.bb.pipelinesTreeView","isHidden":false},{"id":"atlascode.views.bb.issuesTreeView","isHidden":false},{"id":"atlascode.views.helpTreeView","isHidden":false}]'
workbench.view.extension.dockerView.state.hidden: '[{"id":"dockerContainers","isHidden":false},{"id":"dockerImages","isHidden":false},{"id":"dockerRegistries","isHidden":false},{"id":"dockerNetworks","isHidden":false},{"id":"dockerVolumes","isHidden":false},{"id":"vscode-docker.views.dockerContexts","isHidden":false},{"id":"vscode-docker.views.help","isHidden":false}]'
workbench.view.extension.github-actions.state.hidden: '[{"id":"github-actions.current-branch","isHidden":false},{"id":"github-actions.workflows","isHidden":false},{"id":"github-actions.settings","isHidden":false},{"id":"github-actions.empty-view","isHidden":false}]'
workbench.view.extension.github-pull-request.state.hidden: '[{"id":"github:createPullRequest","isHidden":false},{"id":"github:compareChanges","isHidden":false},{"id":"prStatus:github","isHidden":false},{"id":"github:activePullRequest","isHidden":false},{"id":"github:activePullRequest:welcome","isHidden":false},{"id":"github:createPullRequestWebview","isHidden":false},{"id":"github:compareChangesFiles","isHidden":false},{"id":"github:compareChangesCommits","isHidden":false}]'
workbench.view.extension.github-pull-requests.state.hidden: '[{"id":"github:login","isHidden":false},{"id":"pr:github","isHidden":false},{"id":"issues:github","isHidden":false}]'
workbench.view.extension.gitlens.state.hidden: '[{"id":"gitlens.views.home","isHidden":false},{"id":"gitlens.views.contributors","isHidden":false},{"id":"gitlens.views.workspaces","isHidden":false},{"id":"gitlens.views.account","isHidden":false},{"id":"gitlens.views.drafts","isHidden":false}]'
workbench.view.extension.gitlensInspect.state.hidden: '[{"id":"gitlens.views.commitDetails","isHidden":false},{"id":"gitlens.views.lineHistory","isHidden":false},{"id":"gitlens.views.fileHistory","isHidden":false},{"id":"gitlens.views.timeline","isHidden":false},{"id":"gitlens.views.searchAndCompare","isHidden":false},{"id":"gitlens.views.pullRequest","isHidden":false}]'
workbench.view.extension.gitlensPanel.state.hidden: '[{"id":"gitlens.views.timeline","isHidden":false},{"id":"gitlens.views.graph","isHidden":false},{"id":"gitlens.views.graphDetails","isHidden":false}]'
workbench.view.extension.godotTools.state.hidden: '[{"id":"scenePreview","isHidden":false}]'
workbench.view.extension.kubernetesView.state.hidden: '[{"id":"extension.vsKubernetesExplorer","isHidden":false},{"id":"extension.vsKubernetesHelmRepoExplorer","isHidden":false},{"id":"kubernetes.cloudExplorer","isHidden":false}]'
workbench.view.extension.mongoDB.state.hidden: '[{"id":"mongoDBConnectionExplorer","isHidden":false},{"id":"mongoDBPlaygroundsExplorer","isHidden":false},{"id":"mongoDBHelpExplorer","isHidden":false}]'
workbench.view.extension.postgres-explorer.state.hidden: '[{"id":"postgres","isHidden":false}]'
workbench.view.extension.project-reference-explorer.state.hidden: '[{"id":"projectReferences","isHidden":false}]'
workbench.view.extension.references-view.state.hidden: '[{"id":"references-view.tree","isHidden":false},{"id":"CppReferencesView","isHidden":false}]'
workbench.view.extension.snyk.state.hidden: '[{"id":"snyk.views.features","isHidden":false},{"id":"snyk.views.welcome","isHidden":false},{"id":"snyk.views.analysis.oss","isHidden":false},{"id":"snyk.views.analysis.code.security.old","isHidden":false},{"id":"snyk.views.analysis.code.quality.old","isHidden":false},{"id":"snyk.views.analysis.code.security","isHidden":false},{"id":"snyk.views.analysis.configuration","isHidden":false},{"id":"snyk.views.analysis.code.quality","isHidden":false},{"id":"snyk.views.analysis.code.enablement","isHidden":false},{"id":"snyk.views.analysis.code.localEngine","isHidden":false},{"id":"snyk.views.support","isHidden":false}]'
workbench.view.extension.SonarLint.state.hidden: '[{"id":"SonarLint.AllRules","isHidden":false},{"id":"SonarLint.ConnectedMode","isHidden":false},{"id":"SonarLint.SecurityHotspots","isHidden":false},{"id":"SonarLint.HelpAndFeedback","isHidden":false}]'
workbench.view.extension.test.state.hidden: '[{"id":"workbench.view.testing","isHidden":false},{"id":"dotnetTestExplorer","isHidden":false},{"id":"test-explorer","isHidden":false},{"id":"github:login","isHidden":false},{"id":"pr:github","isHidden":false},{"id":"issues:github","isHidden":false},{"id":"workbench.view.testCoverage","isHidden":false}]'
workbench.view.extension.thunder-client.state.hidden: '[{"id":"thunder-client-sidebar","isHidden":false}]'
workbench.view.extension.todo-tree-container.state.hidden: '[{"id":"todo-tree-view","isHidden":false}]'
workbench.view.extensions.state.hidden: '[{"id":"workbench.views.extensions.installed","isHidden":false},{"id":"workbench.views.extensions.workspaceRecommendations","isHidden":false},{"id":"workbench.views.extensions.popular","isHidden":false},{"id":"workbench.views.extensions.otherRecommendations","isHidden":false},{"id":"extensions.recommendedList","isHidden":false},{"id":"workbench.views.extensions.enabled","isHidden":true},{"id":"workbench.views.extensions.disabled","isHidden":true},{"id":"workbench.views.extensions.marketplace","isHidden":false},{"id":"workbench.views.extensions.searchInstalled","isHidden":false},{"id":"workbench.views.extensions.searchEnabled","isHidden":false},{"id":"workbench.views.extensions.searchDisabled","isHidden":false},{"id":"workbench.views.extensions.searchOutdated","isHidden":false},{"id":"workbench.views.extensions.searchBuiltin","isHidden":false},{"id":"workbench.views.extensions.searchWorkspaceUnsupported","isHidden":false},{"id":"workbench.views.extensions.builtinFeatureExtensions","isHidden":false},{"id":"workbench.views.extensions.builtinThemeExtensions","isHidden":false},{"id":"workbench.views.extensions.builtinProgrammingLanguageExtensions","isHidden":false},{"id":"workbench.views.extensions.untrustedUnsupportedExtensions","isHidden":false},{"id":"workbench.views.extensions.untrustedPartiallySupportedExtensions","isHidden":false},{"id":"workbench.views.extensions.virtualUnsupportedExtensions","isHidden":false},{"id":"workbench.views.extensions.virtualPartiallySupportedExtensions","isHidden":false},{"id":"workbench.views.extensions.searchRecentlyUpdated","isHidden":false},{"id":"workbench.views.extensions.deprecatedExtensions","isHidden":false}]'
workbench.view.remote.state.hidden: '[{"id":"targetsContainers","isHidden":false},{"id":"detailsContainers","isHidden":false},{"id":"devVolumes","isHidden":false},{"id":"sshHosts","isHidden":false},{"id":"remoteTargets","isHidden":false}]'
workbench.view.search.state.hidden: '[{"id":"workbench.view.search","isHidden":false}]'
workbench.view.sync.state.hidden: '[{"id":"workbench.views.sync.merges","isHidden":false},{"id":"workbench.views.sync.remoteActivity","isHidden":false},{"id":"workbench.views.sync.machines","isHidden":false},{"id":"workbench.views.sync.localActivity","isHidden":true},{"id":"workbench.views.sync.troubleshoot","isHidden":true}]'
workbench.views.extensions.installed.size: "111"
workbench.welcomePage.walkthroughMetadata: '[["ms-vscode.cpptools#cppWelcome",{"firstSeen":1651520748487,"stepIDs":["verify.compiler.mac","verify.compiler.linux","verify.compiler.windows","open.project","setup.intellisense","run.project.mac","run.project.linux","run.project.windows","install.cmake.tools","watch.tutorials"],"manaullyOpened":false}],["eamodio.gitlens#gitlens.welcome",{"firstSeen":1651520779233,"stepIDs":["gitlens.welcome.experience","gitlens.welcome.settings","gitlens.welcome.currentLineBlame","gitlens.welcome.gitCodeLens","gitlens.welcome.revisionHistory","gitlens.welcome.fileAnnotations","gitlens.welcome.gitSideBarViews","gitlens.welcome.hostingServiceIntegrations","gitlens.welcome.gitCommandPalette","gitlens.welcome.interactiveRebaseEditor","gitlens.welcome.terminal","gitlens.welcome.plus"],"manaullyOpened":false}],["eamodio.gitlens#gitlens.plus",{"firstSeen":1651520779233,"stepIDs":["gitlens.plus.intro.tryNow","gitlens.plus.intro.signIn","gitlens.plus.intro","gitlens.plus.visualFileHistory","gitlens.plus.worktrees","gitlens.plus.comingSoon","gitlens.plus.tryNow","gitlens.plus.signIn"],"manaullyOpened":false}],["ms-azuretools.vscode-docker#dockerStart",{"firstSeen":1651520864646,"stepIDs":["openFolder","openFolderMac","scaffold","buildImage","runContainer","dockerExplorer","pushImage","azDeploy","learn"],"manaullyOpened":false}],["msjsdiag.vscode-react-native#RNTGetStarted",{"firstSeen":1651520900002,"stepIDs":["settingUpCommonEnvironment","settingUpExpoEnvironment","settingUpWindowsEnvironment","settingUpMacOsEnvironment","hermesEngine","runAndDebugReactNativeApp","exploreExtensionFeatures"],"manaullyOpened":false}]]'
zokugun.cron-tasks: '{"version":"0.1.2"}'
